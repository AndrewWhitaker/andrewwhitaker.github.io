<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Andrew Whitaker]]></title>
  <link href="http://blog.andrewawhitaker.com/atom.xml" rel="self"/>
  <link href="http://blog.andrewawhitaker.com/"/>
  <updated>2014-10-26T17:33:58-05:00</updated>
  <id>http://blog.andrewawhitaker.com/</id>
  <author>
    <name><![CDATA[Andrew Whitaker]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Named Queries and Unmapped Types]]></title>
    <link href="http://blog.andrewawhitaker.com/blog/2014/10/26/named-queries-and-unmapped-types/"/>
    <updated>2014-10-26T16:38:35-05:00</updated>
    <id>http://blog.andrewawhitaker.com/blog/2014/10/26/named-queries-and-unmapped-types</id>
    <content type="html"><![CDATA[<p><em>This post was inspired by <a href="http://stackoverflow.com/q/26512930/497356">this StackOverflow question</a></em>.</p>

<p>Named queries are extremely useful in a variety of situations when you&rsquo;re using NHibernate. If you want to use dialect-specific features that aren&rsquo;t supported in NHibernate, you&rsquo;re practically forced to go this route.</p>

<p>Another (possibly less common scenario) is this: you&rsquo;re working with a database and want to use a stored procedure. For some reason you cannot change the stored procedure.</p>

<!-- more -->


<p>On the surface, this doesn&rsquo;t sound problematic: Just map the stored procedure to a named query and execute it. What if the stored procedure returns a resultset whose column names are less than ideal?</p>

<p>To make this problem a bit more concrete, here&rsquo;s a simple stored procedure written against the AdventureWorks database that I&rsquo;ll work with for the rest of the post:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">create</span> <span class="k">procedure</span> <span class="p">[</span><span class="n">Products_GetAll</span><span class="p">]</span>
</span><span class='line'><span class="k">as</span> <span class="k">begin</span>
</span><span class='line'>  <span class="k">select</span>
</span><span class='line'>      <span class="p">[</span><span class="n">Production</span><span class="p">].[</span><span class="n">Product</span><span class="p">].[</span><span class="n">ProductID</span><span class="p">]</span> <span class="k">as</span> <span class="p">[</span><span class="n">prod_id</span><span class="p">],</span>
</span><span class='line'>      <span class="p">[</span><span class="n">Production</span><span class="p">].[</span><span class="n">Product</span><span class="p">].[</span><span class="n">Name</span><span class="p">]</span> <span class="k">as</span> <span class="p">[</span><span class="n">prod_name</span><span class="p">],</span>
</span><span class='line'>      <span class="p">[</span><span class="n">Production</span><span class="p">].[</span><span class="n">Product</span><span class="p">].[</span><span class="n">Color</span><span class="p">]</span> <span class="k">as</span> <span class="p">[</span><span class="n">prod_col</span><span class="p">]</span>
</span><span class='line'>  <span class="k">from</span>
</span><span class='line'>      <span class="p">[</span><span class="n">Production</span><span class="p">].[</span><span class="n">Product</span><span class="p">];</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Our result type, <code>ProductDTO</code> has property names we&rsquo;d expect:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">ProductDTO</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="kt">int</span> <span class="n">Id</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="kt">string</span> <span class="n">Name</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="kt">string</span> <span class="n">Color</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>With these pieces in mind, lets go over some possible solutions to our problem. I&rsquo;m assuming here that you don&rsquo;t want to just rename the properties on <code>ProductDTO</code>. You could certainly do that&mdash;however you&rsquo;d end up with some ugly property names, which is what we&rsquo;re trying to avoid.</p>

<p>So basically the rules are:</p>

<ul>
<li>We can&rsquo;t change the stored procedure</li>
<li>We want sane names for the properties in <code>ProductDTO</code></li>
</ul>


<h2>Map <code>ProductDTO</code></h2>

<p>Named queries can have a <code>&lt;return&gt;</code> element with a <code>class</code> attribute. If we went this route, our <code>.hbm.xml</code> file containing the named query might look like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;hibernate-mapping</span> <span class="na">xmlns=</span><span class="s">&quot;urn:nhibernate-mapping-2.2&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;sql-query</span> <span class="na">name=</span><span class="s">&quot;Products_GetAll&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;return</span> <span class="na">class=</span><span class="s">&quot;AdventureWorks.ProductDTO&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;return-property</span> <span class="na">name=</span><span class="s">&quot;ProductId&quot;</span> <span class="na">column=</span><span class="s">&quot;prod_id&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;return-property</span> <span class="na">name=</span><span class="s">&quot;ProductName&quot;</span> <span class="na">column=</span><span class="s">&quot;prod_name&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;return-property</span> <span class="na">name=</span><span class="s">&quot;ProductColor&quot;</span> <span class="na">column=</span><span class="s">&quot;prod_color&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/return&gt;</span>
</span><span class='line'>    exec [Products_GetAll];
</span><span class='line'>  <span class="nt">&lt;/sql-query&gt;</span>
</span><span class='line'><span class="nt">&lt;/hibernate-mapping&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This looks like it would work right? The problem is that if you go this route, <code>ProductDTO</code> must be mapped. If you try using this mapping with an unmapped class, NHibernate will throw an exception stating that it doesn&rsquo;t know what <code>ProductDTO</code> is.</p>

<p>This might actually make sense depending on your architecture, but if the stored procedure we&rsquo;re executing is purpose-built for a particular area of our application, it probably doesn&rsquo;t make sense to do that. I&rsquo;m thinking specifically of a domain-driven architecture where domain entities are mapped to tables in a database. If that&rsquo;s the architecture we&rsquo;re using then adding a <code>GetAllProducts</code> entity doesn&rsquo;t really make sense.</p>

<p>Furthermore, this stored procedure is simply a <em>query</em>. It doesn&rsquo;t really make sense to map something that&rsquo;s just used to query the same way we&rsquo;d map a table to a class that can be inserted/updated.</p>

<p>There&rsquo;s also the limitation that the poster of the StackOverflow question above had&mdash;his or her query returned a resultset that did not have a column/columns that could be used as an identifier. NHibernate requires that mapped classes have a column or combination of columns that can uniquely identify the row.</p>

<h2>Use LINQ to transform the result of executing the named query</h2>

<p>This solution involves using <code>&lt;return-scalar&gt;</code> in our named query. In other words, an <code>.hbm.xml</code> file that looks like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;hibernate-mapping</span> <span class="na">xmlns=</span><span class="s">&quot;urn:nhibernate-mapping-2.2&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;sql-query</span> <span class="na">name=</span><span class="s">&quot;Products_GetAll&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;return-scalar</span> <span class="na">column=</span><span class="s">&quot;prod_id&quot;</span> <span class="na">type=</span><span class="s">&quot;integer&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;return-scalar</span> <span class="na">column=</span><span class="s">&quot;prod_name&quot;</span> <span class="na">type=</span><span class="s">&quot;string&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;return-scalar</span> <span class="na">column=</span><span class="s">&quot;prod_col&quot;</span> <span class="na">type=</span><span class="s">&quot;string&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'>    exec [Products_GetAll];
</span><span class='line'>  <span class="nt">&lt;/sql-query&gt;</span>
</span><span class='line'><span class="nt">&lt;/hibernate-mapping&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>And our C# to get the <code>Product</code>s list would look like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="kt">var</span> <span class="n">products</span> <span class="p">=</span> <span class="n">session</span><span class="p">.</span><span class="n">GetNamedQuery</span><span class="p">(</span><span class="s">&quot;Products_GetAll&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="n">List</span><span class="p">&lt;</span><span class="kt">object</span><span class="p">[]&gt;()</span>
</span><span class='line'>    <span class="p">.</span><span class="n">Select</span><span class="p">(</span><span class="n">obj</span> <span class="p">=&gt;</span> <span class="k">new</span> <span class="n">ProductDTO</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">Id</span> <span class="p">=</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">obj</span><span class="p">[</span><span class="m">0</span><span class="p">],</span>
</span><span class='line'>        <span class="n">Name</span> <span class="p">=</span> <span class="p">(</span><span class="kt">string</span><span class="p">)</span><span class="n">obj</span><span class="p">[</span><span class="m">1</span><span class="p">],</span>
</span><span class='line'>        <span class="n">Color</span> <span class="p">=</span> <span class="p">(</span><span class="kt">string</span><span class="p">)</span><span class="n">obj</span><span class="p">[</span><span class="m">2</span><span class="p">]</span>
</span><span class='line'>    <span class="p">})</span>
</span><span class='line'>    <span class="p">.</span><span class="n">ToList</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>This will work fine. The problem is that it can become very unmanageable with more than 10 properties. NHibernate is supposed to get rid of code like this anyway. It feels like there should be a better solution.</p>

<h2>Use a Custom ResultTransformer</h2>

<p>The reason we can&rsquo;t use a built-in result transformer (i.e. one in the <code>NHibernate.Transform</code> namespace) is because the one that would be most useful, <code>AliasToBeanTransformer</code>, requires that we map aliases from the query to properties on the class we want to project into.</p>

<p>Unfortunately NHibernate doesn&rsquo;t allow us to do this mapping with a named query. We can, however, create a new result transformer that allows us to do that. We&rsquo;re using the same XML mapping for our named query as before:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;hibernate-mapping</span> <span class="na">xmlns=</span><span class="s">&quot;urn:nhibernate-mapping-2.2&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;sql-query</span> <span class="na">name=</span><span class="s">&quot;Products_GetAll&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;return-scalar</span> <span class="na">column=</span><span class="s">&quot;prod_id&quot;</span> <span class="na">type=</span><span class="s">&quot;integer&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;return-scalar</span> <span class="na">column=</span><span class="s">&quot;prod_name&quot;</span> <span class="na">type=</span><span class="s">&quot;string&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;return-scalar</span> <span class="na">column=</span><span class="s">&quot;prod_col&quot;</span> <span class="na">type=</span><span class="s">&quot;string&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'>    exec [Products_GetAll];
</span><span class='line'>  <span class="nt">&lt;/sql-query&gt;</span>
</span><span class='line'><span class="nt">&lt;/hibernate-mapping&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here are the steps you would take to map <code>ProductDTO</code> to the results of the query.</p>

<p><strong>1. Create an attribute that allows us to map column names to properties:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="na">[AttributeUsage(AttributeTargets.Property | AttributeTargets.Field, AllowMultiple = false)]</span>
</span><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">NHibernateQueryColumnAttribute</span> <span class="p">:</span> <span class="n">Attribute</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="nf">NHibernateQueryColumnAttribute</span><span class="p">(</span><span class="kt">string</span> <span class="n">columnName</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="n">ColumnName</span> <span class="p">=</span> <span class="n">columnName</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="kt">string</span> <span class="n">ColumnName</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>2. Apply the attribute to our result class:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">ProductDTO</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="na">    [NHibernateQueryColumn(&quot;prod_id&quot;)]</span>
</span><span class='line'>    <span class="k">public</span> <span class="kt">int</span> <span class="n">Id</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="na">    [NHibernateQueryColumn(&quot;prod_name&quot;)]</span>
</span><span class='line'>    <span class="k">public</span> <span class="kt">string</span> <span class="n">Name</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="na">    [NHibernateQueryColumn(&quot;prod_col&quot;)]</span>
</span><span class='line'>    <span class="k">public</span> <span class="kt">string</span> <span class="n">Color</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>3. Create a result transformer that can leverage that attribute:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">System.Collections</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">System.Collections.Generic</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">System.Linq</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">System.Reflection</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">NHibernate</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">NHibernate.Transform</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">QueryColumnAttributeTransformer</span><span class="p">&lt;</span><span class="n">TResultType</span><span class="p">&gt;</span> <span class="p">:</span> <span class="n">AliasedTupleSubsetResultTransformer</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">private</span> <span class="k">readonly</span> <span class="n">ConstructorInfo</span> <span class="n">constructor</span><span class="p">;</span>
</span><span class='line'>    <span class="k">private</span> <span class="k">readonly</span> <span class="n">Dictionary</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">,</span> <span class="n">MemberInfo</span><span class="p">&gt;</span> <span class="n">memberColumnMap</span><span class="p">;</span>
</span><span class='line'>    <span class="k">private</span> <span class="k">readonly</span> <span class="n">Type</span> <span class="n">resultType</span> <span class="p">=</span> <span class="k">typeof</span><span class="p">(</span><span class="n">TResultType</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="nf">QueryColumnAttributeTransformer</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="n">constructor</span> <span class="p">=</span> <span class="k">this</span><span class="p">.</span><span class="n">resultType</span><span class="p">.</span><span class="n">GetConstructor</span><span class="p">(</span>
</span><span class='line'>            <span class="n">BindingFlags</span><span class="p">.</span><span class="n">Public</span> <span class="p">|</span> <span class="n">BindingFlags</span><span class="p">.</span><span class="n">NonPublic</span> <span class="p">|</span> <span class="n">BindingFlags</span><span class="p">.</span><span class="n">Instance</span><span class="p">,</span>
</span><span class='line'>            <span class="k">null</span><span class="p">,</span>
</span><span class='line'>            <span class="n">Type</span><span class="p">.</span><span class="n">EmptyTypes</span><span class="p">,</span>
</span><span class='line'>            <span class="k">null</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="n">constructor</span> <span class="p">==</span> <span class="k">null</span> <span class="p">&amp;&amp;</span> <span class="k">this</span><span class="p">.</span><span class="n">resultType</span><span class="p">.</span><span class="n">IsClass</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nf">ArgumentException</span><span class="p">(</span>
</span><span class='line'>                <span class="s">&quot;The target class of a QueryColumnAttributeTransformer needs a parameterless constructor&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">const</span> <span class="n">BindingFlags</span> <span class="n">flags</span> <span class="p">=</span> <span class="n">BindingFlags</span><span class="p">.</span><span class="n">Public</span> <span class="p">|</span> <span class="n">BindingFlags</span><span class="p">.</span><span class="n">Instance</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="n">memberColumnMap</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Dictionary</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">,</span> <span class="n">MemberInfo</span><span class="p">&gt;();</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">MemberInfo</span><span class="p">[]</span> <span class="n">members</span> <span class="p">=</span>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="n">resultType</span><span class="p">.</span><span class="n">GetProperties</span><span class="p">(</span><span class="n">flags</span><span class="p">)</span>
</span><span class='line'>                <span class="p">.</span><span class="n">Cast</span><span class="p">&lt;</span><span class="n">MemberInfo</span><span class="p">&gt;()</span>
</span><span class='line'>                <span class="p">.</span><span class="n">Concat</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="n">resultType</span><span class="p">.</span><span class="n">GetFields</span><span class="p">(</span><span class="n">flags</span><span class="p">))</span>
</span><span class='line'>                <span class="p">.</span><span class="n">ToArray</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">foreach</span> <span class="p">(</span><span class="n">MemberInfo</span> <span class="n">member</span> <span class="k">in</span> <span class="n">members</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="kt">var</span> <span class="n">attr</span> <span class="p">=</span> <span class="n">member</span><span class="p">.</span><span class="n">GetCustomAttribute</span><span class="p">&lt;</span><span class="n">NHibernateQueryColumnAttribute</span><span class="p">&gt;();</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="n">memberColumnMap</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="n">attr</span> <span class="p">==</span> <span class="k">null</span> <span class="p">?</span> <span class="n">member</span><span class="p">.</span><span class="n">Name</span> <span class="p">:</span> <span class="n">attr</span><span class="p">.</span><span class="n">ColumnName</span><span class="p">,</span> <span class="n">member</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">override</span> <span class="kt">bool</span> <span class="nf">IsTransformedValueATupleElement</span><span class="p">(</span><span class="kt">string</span><span class="p">[]</span> <span class="n">aliases</span><span class="p">,</span> <span class="kt">int</span> <span class="n">tupleLength</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">false</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">override</span> <span class="kt">object</span> <span class="nf">TransformTuple</span><span class="p">(</span><span class="kt">object</span><span class="p">[]</span> <span class="n">tuple</span><span class="p">,</span> <span class="kt">string</span><span class="p">[]</span> <span class="n">aliases</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">aliases</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nf">ArgumentNullException</span><span class="p">(</span><span class="s">&quot;aliases&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kt">object</span> <span class="n">result</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">try</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">result</span> <span class="p">=</span> <span class="k">this</span><span class="p">.</span><span class="n">resultType</span><span class="p">.</span><span class="n">IsClass</span>
</span><span class='line'>                <span class="p">?</span> <span class="k">this</span><span class="p">.</span><span class="n">constructor</span><span class="p">.</span><span class="n">Invoke</span><span class="p">(</span><span class="k">null</span><span class="p">)</span>
</span><span class='line'>                <span class="p">:</span> <span class="n">NHibernate</span><span class="p">.</span><span class="n">Cfg</span><span class="p">.</span><span class="n">Environment</span><span class="p">.</span><span class="n">BytecodeProvider</span><span class="p">.</span><span class="n">ObjectsFactory</span><span class="p">.</span><span class="n">CreateInstance</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="n">resultType</span><span class="p">,</span> <span class="k">true</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">i</span> <span class="p">&lt;</span> <span class="n">aliases</span><span class="p">.</span><span class="n">Length</span><span class="p">;</span> <span class="n">i</span><span class="p">++)</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="kt">string</span> <span class="k">alias</span> <span class="p">=</span> <span class="n">aliases</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>                <span class="n">MemberInfo</span> <span class="n">member</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="n">memberColumnMap</span><span class="p">.</span><span class="n">TryGetValue</span><span class="p">(</span><span class="k">alias</span><span class="p">,</span> <span class="k">out</span> <span class="n">member</span><span class="p">))</span>
</span><span class='line'>                <span class="p">{</span>
</span><span class='line'>                    <span class="k">if</span> <span class="p">(</span><span class="n">member</span><span class="p">.</span><span class="n">MemberType</span> <span class="p">==</span> <span class="n">MemberTypes</span><span class="p">.</span><span class="n">Property</span><span class="p">)</span>
</span><span class='line'>                    <span class="p">{</span>
</span><span class='line'>                        <span class="p">((</span><span class="n">PropertyInfo</span><span class="p">)</span><span class="n">member</span><span class="p">).</span><span class="n">SetValue</span><span class="p">(</span><span class="n">result</span><span class="p">,</span> <span class="n">tuple</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span><span class='line'>                    <span class="p">}</span>
</span><span class='line'>                    <span class="k">else</span> <span class="nf">if</span> <span class="p">(</span><span class="n">member</span><span class="p">.</span><span class="n">MemberType</span> <span class="p">==</span> <span class="n">MemberTypes</span><span class="p">.</span><span class="n">Field</span><span class="p">)</span>
</span><span class='line'>                    <span class="p">{</span>
</span><span class='line'>                        <span class="p">((</span><span class="n">FieldInfo</span><span class="p">)</span><span class="n">member</span><span class="p">).</span><span class="n">SetValue</span><span class="p">(</span><span class="n">result</span><span class="p">,</span> <span class="n">tuple</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span><span class='line'>                    <span class="p">}</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>                <span class="k">else</span>
</span><span class='line'>                <span class="p">{</span>
</span><span class='line'>                    <span class="k">throw</span> <span class="k">new</span> <span class="nf">ArgumentException</span><span class="p">(</span>
</span><span class='line'>                        <span class="kt">string</span><span class="p">.</span><span class="n">Format</span><span class="p">(</span>
</span><span class='line'>                            <span class="s">&quot;{0} has no field or property mapped to column &#39;{1}&#39;&quot;</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="n">resultType</span><span class="p">,</span> <span class="k">alias</span><span class="p">));</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">catch</span> <span class="p">(</span><span class="n">MemberAccessException</span> <span class="n">e</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nf">HibernateException</span><span class="p">(</span><span class="s">&quot;Could not instantiate result class: &quot;</span> <span class="p">+</span> <span class="k">this</span><span class="p">.</span><span class="n">resultType</span><span class="p">,</span> <span class="n">e</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">override</span> <span class="n">IList</span> <span class="nf">TransformList</span><span class="p">(</span><span class="n">IList</span> <span class="n">collection</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">collection</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>4. Use the result transformer in the query:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="kt">var</span> <span class="n">products</span> <span class="p">=</span> <span class="n">session</span><span class="p">.</span><span class="n">GetNamedQuery</span><span class="p">(</span><span class="s">&quot;Products_GetAll&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="n">SetResultTransformer</span><span class="p">(</span><span class="k">new</span> <span class="n">QueryColumnAttributeTransformer</span><span class="p">&lt;</span><span class="n">ProductDTO</span><span class="p">&gt;())</span>
</span><span class='line'>    <span class="p">.</span><span class="n">List</span><span class="p">&lt;</span><span class="n">ProductDTO</span><span class="p">&gt;();</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you don&rsquo;t like the idea of modifying your result class to accommodate the query, you could make a few changes to the transformer that would allow it to use a <code>Dictionary</code> mapping that you pass in instead.</p>

<p>Hope that helps someone out there. And if there&rsquo;s an easier way to accomplish this, please let me know.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[QueryOver Series Part 8: Working with Subqueries]]></title>
    <link href="http://blog.andrewawhitaker.com/blog/2014/10/24/queryover-series-part-8-working-with-subqueries/"/>
    <updated>2014-10-24T11:17:39-05:00</updated>
    <id>http://blog.andrewawhitaker.com/blog/2014/10/24/queryover-series-part-8-working-with-subqueries</id>
    <content type="html"><![CDATA[<p>Subqueries are often extremely useful when building queries. Unfortunately there&rsquo;s not much out there on how to work with subqueries in QueryOver. In this post, I&rsquo;ll dive into how to create the subqueries using QueryOver&rsquo;s various subquery APIs.</p>

<!-- more -->


<p>There are two places you can use subqueries in a QueryOver query: the <code>SELECT</code> clause and the <code>WHERE</code> clause. Unfortunately you cannot use a subquery in the <code>FROM</code> clause of a QueryOver query.</p>

<h2>Subqueries in the <code>WHERE</code> clause</h2>

<p>As usual, there are several ways to generate identical SQL using QueryOver. I&rsquo;ll go over each one in detail.</p>

<h3><code>.WithSubquery</code></h3>

<p><code>.WithSubquery</code> is the most straightforward and natural way to create a subquery with QueryOver. Basically, using <code>.WithSubquery</code> allows you to use some property on <code>TSubType</code> (or a property belonging to an alias) with a subquery expression. After calling <code>.WithSubquery</code>, there are several methods that become available:</p>

<ul>
<li><code>.Where</code></li>
<li><code>.WhereAll</code></li>
<li><code>.WhereSome</code></li>
<li><code>.WhereExists</code></li>
<li><code>.WhereNotExists</code></li>
<li><code>.WhereProperty</code></li>
</ul>


<p>For the most part these are pretty straightforward, but I&rsquo;ll go over each one.</p>

<h4><code>.Where</code></h4>

<p>You should use <code>.WithSubquery.Where</code> when your subquery returns a scalar value and you want to compare that value (using <code>=</code>, <code>!=</code>, <code>&lt;</code>, <code>&gt;</code>, <code>&gt;=</code>, or <code>&lt;=</code>) with a value from your outer query.</p>

<p>For example, here&rsquo;s a query that finds the <code>Product</code> with the <code>Transaction</code> containing the highest quantity (one <code>Product</code> has many <code>Transactions</code>):</p>

<p><strong>QueryOver</strong>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="kt">var</span> <span class="n">popularProduct</span> <span class="p">=</span> <span class="n">session</span><span class="p">.</span><span class="n">QueryOver</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;()</span>
</span><span class='line'>    <span class="p">.</span><span class="n">WithSubquery</span><span class="p">.</span><span class="n">Where</span><span class="p">(</span><span class="n">pr</span> <span class="p">=&gt;</span> <span class="n">pr</span><span class="p">.</span><span class="n">Id</span> <span class="p">==</span>
</span><span class='line'>        <span class="n">QueryOver</span><span class="p">.</span><span class="n">Of</span><span class="p">&lt;</span><span class="n">TransactionHistory</span><span class="p">&gt;()</span>
</span><span class='line'>            <span class="p">.</span><span class="n">Select</span><span class="p">(</span><span class="n">tx</span> <span class="p">=&gt;</span> <span class="n">tx</span><span class="p">.</span><span class="n">Product</span><span class="p">.</span><span class="n">Id</span><span class="p">)</span>
</span><span class='line'>            <span class="p">.</span><span class="n">OrderBy</span><span class="p">(</span><span class="n">tx</span> <span class="p">=&gt;</span> <span class="n">tx</span><span class="p">.</span><span class="n">Quantity</span><span class="p">)</span>
</span><span class='line'>            <span class="p">.</span><span class="n">Desc</span>
</span><span class='line'>            <span class="p">.</span><span class="n">Take</span><span class="p">(</span><span class="m">1</span><span class="p">)</span>
</span><span class='line'>            <span class="p">.</span><span class="n">As</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;())</span>
</span><span class='line'>    <span class="p">.</span><span class="n">SingleOrDefault</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;();</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>SQL</strong>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span>
</span><span class='line'>    <span class="o">*</span>
</span><span class='line'><span class="k">FROM</span>
</span><span class='line'>    <span class="n">Production</span><span class="p">.</span><span class="n">Product</span> <span class="n">this_</span>
</span><span class='line'><span class="k">WHERE</span>
</span><span class='line'>    <span class="n">this_</span><span class="p">.</span><span class="n">ProductID</span> <span class="o">=</span> <span class="p">(</span>
</span><span class='line'>        <span class="k">SELECT</span>
</span><span class='line'>            <span class="n">TOP</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span>  <span class="n">this_0_</span><span class="p">.</span><span class="n">ProductID</span> <span class="k">as</span> <span class="n">y0_</span>
</span><span class='line'>        <span class="k">FROM</span>
</span><span class='line'>            <span class="n">Production</span><span class="p">.</span><span class="n">TransactionHistory</span> <span class="n">this_0_</span>
</span><span class='line'>        <span class="k">ORDER</span> <span class="k">BY</span>
</span><span class='line'>            <span class="n">this_0_</span><span class="p">.</span><span class="n">Quantity</span> <span class="k">desc</span>
</span><span class='line'>    <span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>The interesting thing to note about the subquery is the <code>.As&lt;T&gt;</code> method at the end. This allows us to compare the <code>Id</code> property from the outer query with the inner query&rsquo;s <code>Product.Id</code> property. This method&rsquo;s sole purpose is to be used inside of a subquery like this so that we can treat the entire QueryOver query as a scalar value for comparison purposes.</p>

<h4><code>.WhereAll</code> and <code>.WhereSome</code></h4>

<p><code>.WithSubquery.WhereAll</code> and <code>.WithSubquery.WhereSome</code> generate SQL that looks similar to the SQL generated by <code>Where</code>, but it uses the <code>all</code> or <code>some</code> operator to modify the comparison. The subquery should return a resultset of one column. Each row in that result is compared with the scalar value from the outer query.</p>

<p>For example, here&rsquo;s a query that finds all <code>Product</code>s who&rsquo;s <code>ListPrice</code> is greater than <em>all</em> of the related <code>ProductCostHistory</code> entries&#8217; <code>StandardCost</code>. <code>ProductCostHistory</code> tracks product cost over time:</p>

<p><strong>QueryOver</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">Product</span> <span class="n">productAlias</span> <span class="p">=</span> <span class="k">null</span><span class="p">;</span>
</span><span class='line'><span class="kt">var</span> <span class="n">products</span> <span class="p">=</span> <span class="n">session</span><span class="p">.</span><span class="n">QueryOver</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;(()</span> <span class="p">=&gt;</span> <span class="n">productAlias</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="n">WithSubquery</span><span class="p">.</span><span class="n">WhereAll</span><span class="p">(</span><span class="n">p</span> <span class="p">=&gt;</span> <span class="n">p</span><span class="p">.</span><span class="n">ListPrice</span> <span class="p">&gt;</span>
</span><span class='line'>        <span class="n">QueryOver</span><span class="p">.</span><span class="n">Of</span><span class="p">&lt;</span><span class="n">ProductCostHistory</span><span class="p">&gt;()</span>
</span><span class='line'>            <span class="p">.</span><span class="n">Where</span><span class="p">(</span><span class="n">ch</span> <span class="p">=&gt;</span> <span class="n">ch</span><span class="p">.</span><span class="n">Product</span><span class="p">.</span><span class="n">Id</span> <span class="p">==</span> <span class="n">productAlias</span><span class="p">.</span><span class="n">Id</span><span class="p">)</span>
</span><span class='line'>            <span class="p">.</span><span class="n">Select</span><span class="p">(</span><span class="n">ch</span> <span class="p">=&gt;</span> <span class="n">ch</span><span class="p">.</span><span class="n">StandardCost</span><span class="p">)</span>
</span><span class='line'>            <span class="p">.</span><span class="n">As</span><span class="p">&lt;</span><span class="kt">decimal</span><span class="p">&gt;())</span>
</span><span class='line'>    <span class="p">.</span><span class="n">List</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;();</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>SQL</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span>
</span><span class='line'>    <span class="o">*</span>
</span><span class='line'><span class="k">FROM</span>
</span><span class='line'>    <span class="n">Production</span><span class="p">.</span><span class="n">Product</span> <span class="n">this_</span>
</span><span class='line'><span class="k">WHERE</span>
</span><span class='line'>    <span class="n">this_</span><span class="p">.</span><span class="n">ListPrice</span> <span class="o">&gt;</span> <span class="k">all</span> <span class="p">(</span>
</span><span class='line'>        <span class="k">SELECT</span>
</span><span class='line'>            <span class="n">this_0_</span><span class="p">.</span><span class="n">StandardCost</span> <span class="k">as</span> <span class="n">y0_</span>
</span><span class='line'>        <span class="k">FROM</span>
</span><span class='line'>            <span class="n">Production</span><span class="p">.</span><span class="n">ProductCostHistory</span> <span class="n">this_0_</span>
</span><span class='line'>        <span class="k">WHERE</span>
</span><span class='line'>            <span class="n">this_0_</span><span class="p">.</span><span class="n">ProductID</span> <span class="o">=</span> <span class="n">this_</span><span class="p">.</span><span class="n">ProductID</span>
</span><span class='line'>    <span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you look carefully at the QueryOver, you&rsquo;ll notice that I assigned an alias to the outer <code>Product</code>. This is so that I could correlate the outer query and the inner query.</p>

<p>Using <code>.WhereSome</code> instead would generate SQL using the <code>some</code> operator. This operator returns <code>true</code> if <em>at least one</em> of the values in the resultset from the subquery returns true.</p>

<h4><code>.WhereExists</code> and <code>.WhereNotExists</code></h4>

<p>These two are straightforward. These will generate the SQL you&rsquo;d expect with <code>exists</code> or <code>not exists</code>, respectively. If you&rsquo;re familiar with SQL, you&rsquo;ve probably used these a fair amount. Use <code>.WhereExists</code> to return rows where there&rsquo;s at least one result in the subquery, and use <code>.WhereNotExists</code> to return rows where the subquery returns no results.</p>

<p>Here&rsquo;s an example that returns all products with no transaction history:</p>

<p><strong>QueryOver</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">Product</span> <span class="n">productAlias</span> <span class="p">=</span> <span class="k">null</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">var</span> <span class="n">productsWithNoTransactions</span> <span class="p">=</span> <span class="n">session</span><span class="p">.</span><span class="n">QueryOver</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;(()</span> <span class="p">=&gt;</span> <span class="n">productAlias</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="n">WithSubquery</span><span class="p">.</span><span class="n">WhereNotExists</span><span class="p">(</span>
</span><span class='line'>        <span class="n">QueryOver</span><span class="p">.</span><span class="n">Of</span><span class="p">&lt;</span><span class="n">TransactionHistory</span><span class="p">&gt;()</span>
</span><span class='line'>            <span class="p">.</span><span class="n">Where</span><span class="p">(</span><span class="n">tx</span> <span class="p">=&gt;</span> <span class="n">tx</span><span class="p">.</span><span class="n">Product</span><span class="p">.</span><span class="n">Id</span> <span class="p">==</span> <span class="n">productAlias</span><span class="p">.</span><span class="n">Id</span><span class="p">)</span>
</span><span class='line'>            <span class="p">.</span><span class="n">Select</span><span class="p">(</span><span class="n">tx</span> <span class="p">=&gt;</span> <span class="n">tx</span><span class="p">.</span><span class="n">Id</span><span class="p">))</span>
</span><span class='line'>    <span class="p">.</span><span class="n">List</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;();</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>SQL</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span>
</span><span class='line'>    <span class="o">*</span>
</span><span class='line'><span class="k">FROM</span>
</span><span class='line'>    <span class="n">Production</span><span class="p">.</span><span class="n">Product</span> <span class="n">this_</span>
</span><span class='line'><span class="k">WHERE</span>
</span><span class='line'>    <span class="k">not</span> <span class="k">exists</span> <span class="p">(</span>
</span><span class='line'>        <span class="k">SELECT</span>
</span><span class='line'>            <span class="n">this_0_</span><span class="p">.</span><span class="n">TransactionID</span> <span class="k">as</span> <span class="n">y0_</span>
</span><span class='line'>        <span class="k">FROM</span>
</span><span class='line'>            <span class="n">Production</span><span class="p">.</span><span class="n">TransactionHistory</span> <span class="n">this_0_</span>
</span><span class='line'>        <span class="k">WHERE</span>
</span><span class='line'>            <span class="n">this_0_</span><span class="p">.</span><span class="n">ProductID</span> <span class="o">=</span> <span class="n">this_</span><span class="p">.</span><span class="n">ProductID</span>
</span><span class='line'>    <span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Using <code>.WithSubquery</code> is the most straightforward way to work with subqueries in the <code>WHERE</code> clause of a query.</p>

<h3>With the <code>Restrictions</code> class</h3>

<p>You can use the <code>Restrictions</code> class to generate SQL within a QueryOver query as well. I won&rsquo;t show everything you can do with the <code>Restrictions</code> class&mdash; it should be pretty straightforward after showing a few examples.</p>

<p>Here&rsquo;s the first example from the previous section:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">session</span><span class="p">.</span><span class="n">QueryOver</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;()</span>
</span><span class='line'>    <span class="p">.</span><span class="n">Where</span><span class="p">(</span>
</span><span class='line'>        <span class="n">Restrictions</span><span class="p">.</span><span class="n">EqProperty</span><span class="p">(</span>
</span><span class='line'>            <span class="n">Projections</span><span class="p">.</span><span class="n">Property</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;(</span><span class="n">pr</span> <span class="p">=&gt;</span> <span class="n">pr</span><span class="p">.</span><span class="n">Id</span><span class="p">),</span>
</span><span class='line'>            <span class="n">Projections</span><span class="p">.</span><span class="n">SubQuery</span><span class="p">(</span>
</span><span class='line'>                <span class="n">QueryOver</span><span class="p">.</span><span class="n">Of</span><span class="p">&lt;</span><span class="n">TransactionHistory</span><span class="p">&gt;()</span>
</span><span class='line'>                    <span class="p">.</span><span class="n">Select</span><span class="p">(</span><span class="n">tx</span> <span class="p">=&gt;</span> <span class="n">tx</span><span class="p">.</span><span class="n">Product</span><span class="p">.</span><span class="n">Id</span><span class="p">)</span>
</span><span class='line'>                    <span class="p">.</span><span class="n">OrderBy</span><span class="p">(</span><span class="n">tx</span> <span class="p">=&gt;</span> <span class="n">tx</span><span class="p">.</span><span class="n">Quantity</span><span class="p">)</span>
</span><span class='line'>                    <span class="p">.</span><span class="n">Desc</span>
</span><span class='line'>                    <span class="p">.</span><span class="n">Take</span><span class="p">(</span><span class="m">1</span><span class="p">))))</span>
</span><span class='line'>    <span class="p">.</span><span class="n">SingleOrDefault</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;();</span>
</span></code></pre></td></tr></table></div></figure>


<p>I&rsquo;m not sure about you, but to me this is much harder to read and looks much more complex than the example in the previous section.</p>

<p>Usually this syntax is not necessary, but you may find it useful if you&rsquo;re building queries dynamically.</p>

<p>One way to build a list of conditions joined by <code>AND</code> operators is to use <code>Restrictions.Conjunction()</code>. You can call <code>.Add</code> on the <code>Conjunction</code> instance you get back, building a conjunction based on various conditions.</p>

<p>Here&rsquo;s an example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">Conjunction</span> <span class="n">conjunction</span> <span class="p">=</span> <span class="n">Restrictions</span><span class="p">.</span><span class="n">Conjunction</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">onlyBiggestTransaction</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">conjunction</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span>
</span><span class='line'>        <span class="n">Restrictions</span><span class="p">.</span><span class="n">EqProperty</span><span class="p">(</span>
</span><span class='line'>            <span class="n">Projections</span><span class="p">.</span><span class="n">Property</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;(</span><span class="n">pr</span> <span class="p">=&gt;</span> <span class="n">pr</span><span class="p">.</span><span class="n">Id</span><span class="p">),</span>
</span><span class='line'>            <span class="n">Projections</span><span class="p">.</span><span class="n">SubQuery</span><span class="p">(</span>
</span><span class='line'>                <span class="n">QueryOver</span><span class="p">.</span><span class="n">Of</span><span class="p">&lt;</span><span class="n">TransactionHistory</span><span class="p">&gt;()</span>
</span><span class='line'>                    <span class="p">.</span><span class="n">Select</span><span class="p">(</span><span class="n">tx</span> <span class="p">=&gt;</span> <span class="n">tx</span><span class="p">.</span><span class="n">Product</span><span class="p">.</span><span class="n">Id</span><span class="p">)</span>
</span><span class='line'>                    <span class="p">.</span><span class="n">OrderBy</span><span class="p">(</span><span class="n">tx</span> <span class="p">=&gt;</span> <span class="n">tx</span><span class="p">.</span><span class="n">Quantity</span><span class="p">)</span>
</span><span class='line'>                    <span class="p">.</span><span class="n">Desc</span>
</span><span class='line'>                    <span class="p">.</span><span class="n">Take</span><span class="p">(</span><span class="m">1</span><span class="p">))));</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">session</span><span class="p">.</span><span class="n">QueryOver</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;()</span>
</span><span class='line'>    <span class="p">.</span><span class="n">Where</span><span class="p">(</span><span class="n">conjunction</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="n">List</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;();</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you have lots of conditions you&rsquo;re evaluating to build a <code>WHERE</code> clause, I would consider going this route. It&rsquo;s easy to read the final query (starting on L16 above), and the various parts of the <code>Conjunction</code> are also nicely separated from the main query.</p>

<h2>Subqueries in the <code>SELECT</code> clause</h2>

<p>There are two ways to use subqueries in the <code>SELECT</code> clause: <code>SelectSubquery</code> and <code>Projections.Subquery</code>.</p>

<h3><code>SelectSubquery</code></h3>

<p>If you&rsquo;re using a select list (built using <code>QueryOver&lt;TRoot, TSubType&gt;.SelectList(...)</code>), the easiest way to create a subquery in the <code>SELECT</code> clause is to use <code>.SelectSubquery</code>. This works exactly how you&rsquo;d expect it to.</p>

<p>This example gets information about a <code>Product</code> and the highest <code>ProductReview.Rating</code> associated with that product:</p>

<p><strong>QueryOver</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">session</span><span class="p">.</span><span class="n">QueryOver</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;(()</span> <span class="p">=&gt;</span> <span class="n">productAlias</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="n">SelectList</span><span class="p">(</span><span class="n">list</span> <span class="p">=&gt;</span> <span class="n">list</span>
</span><span class='line'>        <span class="p">.</span><span class="n">SelectSubQuery</span><span class="p">(</span>
</span><span class='line'>            <span class="n">QueryOver</span><span class="p">.</span><span class="n">Of</span><span class="p">&lt;</span><span class="n">ProductReview</span><span class="p">&gt;()</span>
</span><span class='line'>                <span class="p">.</span><span class="n">Where</span><span class="p">(</span><span class="n">pr</span> <span class="p">=&gt;</span> <span class="n">pr</span><span class="p">.</span><span class="n">Product</span><span class="p">.</span><span class="n">Id</span> <span class="p">==</span> <span class="n">productAlias</span><span class="p">.</span><span class="n">Id</span><span class="p">)</span>
</span><span class='line'>                <span class="p">.</span><span class="n">Select</span><span class="p">(</span><span class="n">pr</span> <span class="p">=&gt;</span> <span class="n">pr</span><span class="p">.</span><span class="n">Rating</span><span class="p">)</span>
</span><span class='line'>                <span class="p">.</span><span class="n">OrderBy</span><span class="p">(</span><span class="n">pr</span> <span class="p">=&gt;</span> <span class="n">pr</span><span class="p">.</span><span class="n">Rating</span><span class="p">).</span><span class="n">Desc</span>
</span><span class='line'>                <span class="p">.</span><span class="n">Take</span><span class="p">(</span><span class="m">1</span><span class="p">))</span>
</span><span class='line'>        <span class="p">.</span><span class="n">Select</span><span class="p">(</span><span class="n">pr</span> <span class="p">=&gt;</span> <span class="n">pr</span><span class="p">.</span><span class="n">Id</span><span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="n">Select</span><span class="p">(</span><span class="n">pr</span> <span class="p">=&gt;</span> <span class="n">pr</span><span class="p">.</span><span class="n">Name</span><span class="p">))</span>
</span><span class='line'>    <span class="p">.</span><span class="n">List</span><span class="p">&lt;</span><span class="kt">object</span><span class="p">[]&gt;();</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that I&rsquo;m creating a correlated subquery by assigning <code>productAlias</code> in the outer query and then using it in the subquery.</p>

<p><strong>SQL</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span>
</span><span class='line'>    <span class="p">(</span><span class="k">SELECT</span>
</span><span class='line'>        <span class="n">TOP</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span>  <span class="n">this_0_</span><span class="p">.</span><span class="n">Rating</span> <span class="k">as</span> <span class="n">y0_</span>
</span><span class='line'>    <span class="k">FROM</span>
</span><span class='line'>        <span class="n">Production</span><span class="p">.</span><span class="n">ProductReview</span> <span class="n">this_0_</span>
</span><span class='line'>    <span class="k">WHERE</span>
</span><span class='line'>        <span class="n">this_0_</span><span class="p">.</span><span class="n">ProductID</span> <span class="o">=</span> <span class="n">this_</span><span class="p">.</span><span class="n">ProductID</span>
</span><span class='line'>    <span class="k">ORDER</span> <span class="k">BY</span>
</span><span class='line'>        <span class="n">this_0_</span><span class="p">.</span><span class="n">Rating</span> <span class="k">desc</span><span class="p">)</span> <span class="k">as</span> <span class="n">y0_</span><span class="p">,</span>
</span><span class='line'>    <span class="n">this_</span><span class="p">.</span><span class="n">ProductID</span> <span class="k">as</span> <span class="n">y1_</span><span class="p">,</span>
</span><span class='line'>    <span class="n">this_</span><span class="p">.</span><span class="n">Name</span> <span class="k">as</span> <span class="n">y2_</span>
</span><span class='line'><span class="k">FROM</span>
</span><span class='line'>    <span class="n">Production</span><span class="p">.</span><span class="n">Product</span> <span class="n">this_</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h3><code>Projections.Subquery</code></h3>

<p><code>Projections.Subquery</code> can come in handy when building the <code>SELECT</code> clause dynamically. This is especially useful when you&rsquo;re building a <code>SELECT</code> clause using <code>Projections.ProjectionList</code>. Here&rsquo;s the same query from the <code>SelectSubquery</code> example above:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">session</span><span class="p">.</span><span class="n">QueryOver</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;(()</span> <span class="p">=&gt;</span> <span class="n">productAlias</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="n">Select</span><span class="p">(</span><span class="n">Projections</span><span class="p">.</span><span class="n">ProjectionList</span><span class="p">()</span>
</span><span class='line'>        <span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="n">Projections</span><span class="p">.</span><span class="n">SubQuery</span><span class="p">(</span>
</span><span class='line'>            <span class="n">QueryOver</span><span class="p">.</span><span class="n">Of</span><span class="p">&lt;</span><span class="n">ProductReview</span><span class="p">&gt;()</span>
</span><span class='line'>                <span class="p">.</span><span class="n">Where</span><span class="p">(</span><span class="n">pr</span> <span class="p">=&gt;</span> <span class="n">pr</span><span class="p">.</span><span class="n">Product</span><span class="p">.</span><span class="n">Id</span> <span class="p">==</span> <span class="n">productAlias</span><span class="p">.</span><span class="n">Id</span><span class="p">)</span>
</span><span class='line'>                <span class="p">.</span><span class="n">Select</span><span class="p">(</span><span class="n">pr</span> <span class="p">=&gt;</span> <span class="n">pr</span><span class="p">.</span><span class="n">Rating</span><span class="p">)</span>
</span><span class='line'>                <span class="p">.</span><span class="n">OrderBy</span><span class="p">(</span><span class="n">pr</span> <span class="p">=&gt;</span> <span class="n">pr</span><span class="p">.</span><span class="n">Rating</span><span class="p">)</span>
</span><span class='line'>                <span class="p">.</span><span class="n">Desc</span>
</span><span class='line'>                <span class="p">.</span><span class="n">Take</span><span class="p">(</span><span class="m">1</span><span class="p">)))</span>
</span><span class='line'>        <span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="n">Projections</span><span class="p">.</span><span class="n">Property</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="n">productAlias</span><span class="p">.</span><span class="n">Id</span><span class="p">))</span>
</span><span class='line'>        <span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="n">Projections</span><span class="p">.</span><span class="n">Property</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="n">productAlias</span><span class="p">.</span><span class="n">Name</span><span class="p">)))</span>
</span><span class='line'>    <span class="p">.</span><span class="n">List</span><span class="p">&lt;</span><span class="kt">object</span><span class="p">[]&gt;();</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Refactoring tip</h2>

<p>Working with subqueries in QueryOver can quickly become overwhelming, especially if you&rsquo;re building a complex query.</p>

<p>One great way to easily make things a bit more readable is to simply store subquery definitions in variables. Keeping with the same example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">Product</span> <span class="n">productAlias</span> <span class="p">=</span> <span class="k">null</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Store the reviews subquery in a variable</span>
</span><span class='line'><span class="n">QueryOver</span><span class="p">&lt;</span><span class="n">ProductReview</span><span class="p">&gt;</span> <span class="n">reviewSubquery</span> <span class="p">=</span>
</span><span class='line'>    <span class="n">QueryOver</span><span class="p">.</span><span class="n">Of</span><span class="p">&lt;</span><span class="n">ProductReview</span><span class="p">&gt;()</span>
</span><span class='line'>        <span class="p">.</span><span class="n">Where</span><span class="p">(</span><span class="n">pr</span> <span class="p">=&gt;</span> <span class="n">pr</span><span class="p">.</span><span class="n">Product</span><span class="p">.</span><span class="n">Id</span> <span class="p">==</span> <span class="n">productAlias</span><span class="p">.</span><span class="n">Id</span><span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="n">Select</span><span class="p">(</span><span class="n">pr</span> <span class="p">=&gt;</span> <span class="n">pr</span><span class="p">.</span><span class="n">Rating</span><span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="n">OrderBy</span><span class="p">(</span><span class="n">pr</span> <span class="p">=&gt;</span> <span class="n">pr</span><span class="p">.</span><span class="n">Rating</span><span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="n">Desc</span>
</span><span class='line'>        <span class="p">.</span><span class="n">Take</span><span class="p">(</span><span class="m">1</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// use that variable in the main query</span>
</span><span class='line'><span class="n">session</span><span class="p">.</span><span class="n">QueryOver</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;(()</span> <span class="p">=&gt;</span> <span class="n">productAlias</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="n">Select</span><span class="p">(</span><span class="n">Projections</span><span class="p">.</span><span class="n">ProjectionList</span><span class="p">()</span>
</span><span class='line'>        <span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="n">Projections</span><span class="p">.</span><span class="n">SubQuery</span><span class="p">(</span><span class="n">reviewSubquery</span><span class="p">))</span>
</span><span class='line'>        <span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="n">Projections</span><span class="p">.</span><span class="n">Property</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="n">productAlias</span><span class="p">.</span><span class="n">Id</span><span class="p">))</span>
</span><span class='line'>        <span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="n">Projections</span><span class="p">.</span><span class="n">Property</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="n">productAlias</span><span class="p">.</span><span class="n">Name</span><span class="p">)))</span>
</span><span class='line'>    <span class="p">.</span><span class="n">List</span><span class="p">&lt;</span><span class="kt">object</span><span class="p">[]&gt;();</span>
</span></code></pre></td></tr></table></div></figure>


<p>That&rsquo;s an easy improvement to make, especially when you&rsquo;re dealing with larger queries.</p>

<h2>Summary</h2>

<p>Working with subqueries can quickly become overwhelming with QueryOver. Hopefully this post will help you write and maintain more advanced QueryOver queries involving subqueries. To summarize:</p>

<ul>
<li>With QueryOver you can use subqueries in the <code>SELECT</code> clause or the <code>WHERE</code> clause. Unfortunately you cannot query from a derived table in the <code>FROM</code> clause</li>
<li>In the <code>WHERE</code> clause, you can use <code>.WithSubquery</code>, followed by a <code>.Where</code> variety to control how the results of the subquery are treated</li>
<li>You can also use the <code>Restrictions</code> class along with <code>Projections.Subquery</code></li>
<li>In the <code>SELECT</code> clause, you can use <code>.SelectSubQuery</code> with <code>.SelectList</code>.</li>
<li>You can also use <code>Projections.Subquery</code> to  generate a subquery in the <code>SELECT</code> clause.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting NHibernate Up and Running Quickly]]></title>
    <link href="http://blog.andrewawhitaker.com/blog/2014/08/28/getting-nhibernate-up-and-running-quickly/"/>
    <updated>2014-08-28T10:44:06-05:00</updated>
    <id>http://blog.andrewawhitaker.com/blog/2014/08/28/getting-nhibernate-up-and-running-quickly</id>
    <content type="html"><![CDATA[<p>NHibernate can seem like a daunting library to set up. The configuration can get quite complicated&mdash;XML mappings, code mappings, mapping conventions, dialects, logging, etc. Sometimes you just want to get something up and running to test out a query or play around with a database other than your primary one. In this post, I&rsquo;ll show you how to get up and running with NHibernate in about 5 minutes and in around 50 lines of code in <a href="http://www.linqpad.net">LINQPad</a>.</p>

<p>This assumes you already have a database configured and ready to create new tables and connect to with NHibernate.</p>

<!-- more -->


<h2>1. Create your database table</h2>

<p>I&rsquo;ll use MySQL as an example, but first you&rsquo;ll need to create a database table (or a few tables) that you want to play around with. I&rsquo;ll create a <code>person</code> table:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">CREATE</span> <span class="k">TABLE</span> <span class="o">`</span><span class="n">person</span><span class="o">`</span> <span class="p">(</span>
</span><span class='line'>  <span class="o">`</span><span class="n">Id</span><span class="o">`</span> <span class="nb">int</span><span class="p">(</span><span class="mi">11</span><span class="p">)</span> <span class="k">NOT</span> <span class="k">NULL</span> <span class="n">AUTO_INCREMENT</span><span class="p">,</span>
</span><span class='line'>  <span class="o">`</span><span class="n">FirstName</span><span class="o">`</span> <span class="nb">varchar</span><span class="p">(</span><span class="mi">200</span><span class="p">)</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
</span><span class='line'>  <span class="o">`</span><span class="n">BirthDate</span><span class="o">`</span> <span class="nb">date</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
</span><span class='line'>  <span class="o">`</span><span class="n">LastName</span><span class="o">`</span> <span class="nb">varchar</span><span class="p">(</span><span class="mi">200</span><span class="p">)</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
</span><span class='line'>  <span class="k">PRIMARY</span> <span class="k">KEY</span> <span class="p">(</span><span class="o">`</span><span class="n">Id</span><span class="o">`</span><span class="p">)</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>2. Prepare your LINQPad Query</h2>

<p>After creating a new query in LINQPad, set the <strong>Language</strong> to <strong>C# Program</strong>, then press F4 to open the <strong>Query Properties</strong> window. From here you can browse to the &ldquo;NHibernate.dll&rdquo; file that you&rsquo;d like to use. I&rsquo;ll also add MySql.Data.dll since I need to interact with a MySql database:</p>

<p><img src="http://blog.andrewawhitaker.com/images/posts/2014-08-28-getting-nhibernate-up-and-running-quickly-linqpad-query-properties/linqpad-query-properties.png"></p>

<p>Next, go over to the <strong>Additional Namespace Imports</strong> tab and add the following namespaces:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="n">NHibernate</span>
</span><span class='line'><span class="n">NHibernate</span><span class="p">.</span><span class="n">Cfg</span>
</span><span class='line'><span class="n">NHibernate</span><span class="p">.</span><span class="n">Cfg</span><span class="p">.</span><span class="n">MappingSchema</span>
</span><span class='line'><span class="n">NHibernate</span><span class="p">.</span><span class="n">Dialect</span>
</span><span class='line'><span class="n">NHibernate</span><span class="p">.</span><span class="n">Mapping</span><span class="p">.</span><span class="n">ByCode</span>
</span><span class='line'><span class="n">NHibernate</span><span class="p">.</span><span class="n">Mapping</span><span class="p">.</span><span class="n">ByCode</span><span class="p">.</span><span class="n">Conformist</span>
</span></code></pre></td></tr></table></div></figure>


<p>Okay, that&rsquo;s all we should need to get started with actually writing the query.</p>

<h2>3. Add some configuration code</h2>

<p>Next we&rsquo;ll actually configure NHibernate to connect to the database correctly. Normally you would configure NHibernate via your project&rsquo;s *.config file, but since we&rsquo;re using LINQPad, a configuration file isn&rsquo;t really feasible. Luckily, we can configure NHibernate in C# using the <code>.DatabaseIntegration</code> extension method:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">void</span> <span class="nf">Main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">Configuration</span> <span class="n">cfg</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Configuration</span><span class="p">()</span>
</span><span class='line'>        <span class="p">.</span><span class="n">DataBaseIntegration</span><span class="p">(</span><span class="n">db</span> <span class="p">=&gt;</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">db</span><span class="p">.</span><span class="n">ConnectionString</span> <span class="p">=</span> <span class="s">&quot;Server=127.0.0.1;Database=test;Uid=nhibernate;Pwd=nhibernate;&quot;</span><span class="p">;</span>
</span><span class='line'>            <span class="n">db</span><span class="p">.</span><span class="n">Dialect</span><span class="p">&lt;</span><span class="n">MySQLDialect</span><span class="p">&gt;();</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here I&rsquo;m just specifying the dialect I&rsquo;d like to use (<code>MySQLDialect</code>) and setting my connection string.</p>

<h2>4. Add an entity and mapping</h2>

<p>Since I created a <code>person</code> table earlier, I&rsquo;m going to go ahead and create a <code>Person</code> class and <code>PersonMap</code> to map that class using NHibernate&rsquo;s mapping-by-code. This code goes just under the <code>Main</code> method we filled in earlier. Here&rsquo;s the entity:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">Person</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">virtual</span> <span class="kt">int</span> <span class="n">Id</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">virtual</span> <span class="kt">string</span> <span class="n">FirstName</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">virtual</span> <span class="kt">string</span> <span class="n">LastName</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">virtual</span> <span class="n">DateTime</span> <span class="n">BirthDate</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here&rsquo;s the mapping:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">PersonMap</span> <span class="p">:</span> <span class="n">ClassMapping</span><span class="p">&lt;</span><span class="n">Person</span><span class="p">&gt;</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="nf">PersonMap</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="n">Table</span><span class="p">(</span><span class="s">&quot;person&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="n">Id</span><span class="p">(</span><span class="n">p</span> <span class="p">=&gt;</span> <span class="n">p</span><span class="p">.</span><span class="n">Id</span><span class="p">);</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="n">Property</span><span class="p">(</span><span class="n">p</span> <span class="p">=&gt;</span> <span class="n">p</span><span class="p">.</span><span class="n">FirstName</span><span class="p">);</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="n">Property</span><span class="p">(</span><span class="n">p</span> <span class="p">=&gt;</span> <span class="n">p</span><span class="p">.</span><span class="n">LastName</span><span class="p">);</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="n">Property</span><span class="p">(</span><span class="n">p</span> <span class="p">=&gt;</span> <span class="n">p</span><span class="p">.</span><span class="n">BirthDate</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>5. Add code to process the mapping we added</h2>

<p>The last configuration step is to modify our <code>Main</code> method to incorporate our mappings into the configuration. We&rsquo;ll modify our <code>Main</code> method as follows:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">void</span> <span class="nf">Main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">Configuration</span> <span class="n">cfg</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Configuration</span><span class="p">()</span>
</span><span class='line'>        <span class="p">.</span><span class="n">DataBaseIntegration</span><span class="p">(</span><span class="n">db</span> <span class="p">=&gt;</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">db</span><span class="p">.</span><span class="n">ConnectionString</span> <span class="p">=</span> <span class="s">&quot;Server=127.0.0.1;Database=test;Uid=nhibernate;Pwd=nhibernate;&quot;</span><span class="p">;</span>
</span><span class='line'>            <span class="n">db</span><span class="p">.</span><span class="n">Dialect</span><span class="p">&lt;</span><span class="n">MySQLDialect</span><span class="p">&gt;();</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/* Add the mapping we defined: */</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">mapper</span> <span class="p">=</span> <span class="k">new</span> <span class="n">ModelMapper</span><span class="p">();</span>
</span><span class='line'>    <span class="n">mapper</span><span class="p">.</span><span class="n">AddMappings</span><span class="p">(</span><span class="n">Assembly</span><span class="p">.</span><span class="n">GetExecutingAssembly</span><span class="p">().</span><span class="n">GetExportedTypes</span><span class="p">());</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">HbmMapping</span> <span class="n">mapping</span> <span class="p">=</span> <span class="n">mapper</span><span class="p">.</span><span class="n">CompileMappingForAllExplicitlyAddedEntities</span><span class="p">();</span>
</span><span class='line'>    <span class="n">cfg</span><span class="p">.</span><span class="n">AddMapping</span><span class="p">(</span><span class="n">mapping</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>6. Create an <code>ISessionFactory</code>, <code>ISession</code> and <code>ITransaction</code> and write a query</h2>

<p>Ok the last step is to build an <code>ISessionFactory</code> from our configuration. From there we can get an <code>ISession</code> and an <code>ITransaction</code> to actually work with the entities we&rsquo;ve created and mapped. We&rsquo;ll modify the <code>Main</code> method again as follows:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">void</span> <span class="nf">Main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">Configuration</span> <span class="n">cfg</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Configuration</span><span class="p">()</span>
</span><span class='line'>        <span class="p">.</span><span class="n">DataBaseIntegration</span><span class="p">(</span><span class="n">db</span> <span class="p">=&gt;</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">db</span><span class="p">.</span><span class="n">ConnectionString</span> <span class="p">=</span> <span class="s">&quot;Server=127.0.0.1;Database=test;Uid=nhibernate;Pwd=nhibernate;&quot;</span><span class="p">;</span>
</span><span class='line'>            <span class="n">db</span><span class="p">.</span><span class="n">Dialect</span><span class="p">&lt;</span><span class="n">MySQLDialect</span><span class="p">&gt;();</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/* Add the mapping we defined: */</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">mapper</span> <span class="p">=</span> <span class="k">new</span> <span class="n">ModelMapper</span><span class="p">();</span>
</span><span class='line'>    <span class="n">mapper</span><span class="p">.</span><span class="n">AddMappings</span><span class="p">(</span><span class="n">Assembly</span><span class="p">.</span><span class="n">GetExecutingAssembly</span><span class="p">().</span><span class="n">GetExportedTypes</span><span class="p">());</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">HbmMapping</span> <span class="n">mapping</span> <span class="p">=</span> <span class="n">mapper</span><span class="p">.</span><span class="n">CompileMappingForAllExplicitlyAddedEntities</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">cfg</span><span class="p">.</span><span class="n">AddMapping</span><span class="p">(</span><span class="n">mapping</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/* Create a session and execute a query: */</span>
</span><span class='line'>    <span class="k">using</span> <span class="p">(</span><span class="n">ISessionFactory</span> <span class="n">factory</span> <span class="p">=</span> <span class="n">cfg</span><span class="p">.</span><span class="n">BuildSessionFactory</span><span class="p">())</span>
</span><span class='line'>    <span class="k">using</span> <span class="p">(</span><span class="n">ISession</span> <span class="n">session</span> <span class="p">=</span> <span class="n">factory</span><span class="p">.</span><span class="n">OpenSession</span><span class="p">())</span>
</span><span class='line'>    <span class="k">using</span> <span class="p">(</span><span class="n">ITransaction</span> <span class="n">tx</span> <span class="p">=</span> <span class="n">session</span><span class="p">.</span><span class="n">BeginTransaction</span><span class="p">())</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">session</span><span class="p">.</span><span class="n">Get</span><span class="p">&lt;</span><span class="n">Person</span><span class="p">&gt;(</span><span class="m">1</span><span class="p">).</span><span class="n">Dump</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">tx</span><span class="p">.</span><span class="n">Commit</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>&hellip;And that&rsquo;s really it. If you hit <strong>F5</strong> or the green play button in LINQPad, your query should run, assuming you have everything configured correctly. Here&rsquo;s the whole listing below, just in case:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">void</span> <span class="nf">Main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">Configuration</span> <span class="n">cfg</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Configuration</span><span class="p">()</span>
</span><span class='line'>        <span class="p">.</span><span class="n">DataBaseIntegration</span><span class="p">(</span><span class="n">db</span> <span class="p">=&gt;</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">db</span><span class="p">.</span><span class="n">ConnectionString</span> <span class="p">=</span> <span class="s">&quot;Server=127.0.0.1;Database=test;Uid=nhibernate;Pwd=nhibernate;&quot;</span><span class="p">;</span>
</span><span class='line'>            <span class="n">db</span><span class="p">.</span><span class="n">Dialect</span><span class="p">&lt;</span><span class="n">MySQLDialect</span><span class="p">&gt;();</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/* Add the mapping we defined: */</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">mapper</span> <span class="p">=</span> <span class="k">new</span> <span class="n">ModelMapper</span><span class="p">();</span>
</span><span class='line'>    <span class="n">mapper</span><span class="p">.</span><span class="n">AddMappings</span><span class="p">(</span><span class="n">Assembly</span><span class="p">.</span><span class="n">GetExecutingAssembly</span><span class="p">().</span><span class="n">GetExportedTypes</span><span class="p">());</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">HbmMapping</span> <span class="n">mapping</span> <span class="p">=</span> <span class="n">mapper</span><span class="p">.</span><span class="n">CompileMappingForAllExplicitlyAddedEntities</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">cfg</span><span class="p">.</span><span class="n">AddMapping</span><span class="p">(</span><span class="n">mapping</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/* Create a session and execute a query: */</span>
</span><span class='line'>    <span class="k">using</span> <span class="p">(</span><span class="n">ISessionFactory</span> <span class="n">factory</span> <span class="p">=</span> <span class="n">cfg</span><span class="p">.</span><span class="n">BuildSessionFactory</span><span class="p">())</span>
</span><span class='line'>    <span class="k">using</span> <span class="p">(</span><span class="n">ISession</span> <span class="n">session</span> <span class="p">=</span> <span class="n">factory</span><span class="p">.</span><span class="n">OpenSession</span><span class="p">())</span>
</span><span class='line'>    <span class="k">using</span> <span class="p">(</span><span class="n">ITransaction</span> <span class="n">tx</span> <span class="p">=</span> <span class="n">session</span><span class="p">.</span><span class="n">BeginTransaction</span><span class="p">())</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">session</span><span class="p">.</span><span class="n">Get</span><span class="p">&lt;</span><span class="n">Person</span><span class="p">&gt;(</span><span class="m">1</span><span class="p">).</span><span class="n">Dump</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">tx</span><span class="p">.</span><span class="n">Commit</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">PersonMap</span> <span class="p">:</span> <span class="n">ClassMapping</span><span class="p">&lt;</span><span class="n">Person</span><span class="p">&gt;</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="nf">PersonMap</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="n">Table</span><span class="p">(</span><span class="s">&quot;person&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="n">Id</span><span class="p">(</span><span class="n">p</span> <span class="p">=&gt;</span> <span class="n">p</span><span class="p">.</span><span class="n">Id</span><span class="p">);</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="n">Property</span><span class="p">(</span><span class="n">p</span> <span class="p">=&gt;</span> <span class="n">p</span><span class="p">.</span><span class="n">FirstName</span><span class="p">);</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="n">Property</span><span class="p">(</span><span class="n">p</span> <span class="p">=&gt;</span> <span class="n">p</span><span class="p">.</span><span class="n">LastName</span><span class="p">);</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="n">Property</span><span class="p">(</span><span class="n">p</span> <span class="p">=&gt;</span> <span class="n">p</span><span class="p">.</span><span class="n">BirthDate</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">Person</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">virtual</span> <span class="kt">int</span> <span class="n">Id</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">virtual</span> <span class="kt">string</span> <span class="n">FirstName</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">virtual</span> <span class="kt">string</span> <span class="n">LastName</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">virtual</span> <span class="n">DateTime</span> <span class="n">BirthDate</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Summary</h2>

<p>Hopefully this post will come in handy if you&rsquo;re looking to quickly get NHibernate up and running for some throwaway or experimental code. When you boil the setup down to the very basics it&rsquo;s actually not that bad at all. From here, you can make some configuration changes or enhancements. Two useful configuration options to turn on inside of the <code>.DatabaseIntegration</code> method are the <code>LogFormattedSql</code> property and the <code>LogSqlInConsole</code> property. These will allow you to actually see the SQL that NHibernate is generating.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[QueryOver Series - Part 7: Using SQL Functions]]></title>
    <link href="http://blog.andrewawhitaker.com/blog/2014/08/15/queryover-series-part-7-using-sql-functions/"/>
    <updated>2014-08-15T14:46:35-05:00</updated>
    <id>http://blog.andrewawhitaker.com/blog/2014/08/15/queryover-series-part-7-using-sql-functions</id>
    <content type="html"><![CDATA[<p>In this post, I&rsquo;ll go over how to use functions built into the database engine. This can be useful when you want to do some work inside of your SQL query rather than do post-processing on the result set you get back.</p>

<!-- more -->


<h2>Dialects in NHibernate</h2>

<p>To understand how to use and later build SQL functions, it&rsquo;s helpful to understand how the default SQL functions are registered with NHibernate to begin with.</p>

<p>NHibernate has the concept of a SQL <em>dialect</em>, a vendor-specific flavor of SQL. As you probably know, <a href="http://www.nhforge.org/doc/nh/en/#configuration-optional-dialects">many dialects are supported out of the box</a>. NHibernate represents dialects with a class per supported dialect.</p>

<p>The <code>Dialect</code> base class registers required functions for a dialect using ANSI-92 standards. If a dialect implements a function differently, that dialect must overwrite the base class&#8217; implementation with its own.</p>

<p>For example, SQL Server doesn&rsquo;t implement the ANSI-92 <code>TRIM</code> function, so the <code>MsSql2000</code> dialect class uses a different implementation than the base class (which ultimately calls <code>rtrim</code> and <code>ltrim</code> to simulate the ANSI standard).</p>

<p>It&rsquo;s worth looking over the <code>Dialect</code> base class and possibly the dialect class for the database engine you&rsquo;re using to see what functions are already available to you.</p>

<h2>Calling functions from your queries</h2>

<p>There are two ways to actually use SQL functions inside of your queries.</p>

<h3>Using <code>Projections.SqlFunction</code></h3>

<p>Using already registered SQL functions is fairly simple, using <code>Projections.SqlFunction</code>. For example, here&rsquo;s a query that gets every <code>Person</code>&rsquo;s middle name, or &ldquo;Not Applicable&rdquo; if <code>MiddleName</code> is <code>null</code>, using the <code>COALESCE</code> function:</p>

<p><strong>QueryOver</strong>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">IList</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="n">middleNames</span> <span class="p">=</span> <span class="n">session</span><span class="p">.</span><span class="n">QueryOver</span><span class="p">&lt;</span><span class="n">Person</span><span class="p">&gt;()</span>
</span><span class='line'>    <span class="p">.</span><span class="n">Select</span><span class="p">(</span>
</span><span class='line'>        <span class="n">Projections</span><span class="p">.</span><span class="n">SqlFunction</span><span class="p">(</span><span class="s">&quot;coalesce&quot;</span><span class="p">,</span> <span class="n">NHibernateUtil</span><span class="p">.</span><span class="n">String</span><span class="p">,</span>
</span><span class='line'>            <span class="n">Projections</span><span class="p">.</span><span class="n">Property</span><span class="p">&lt;</span><span class="n">Person</span><span class="p">&gt;(</span><span class="n">p</span> <span class="p">=&gt;</span> <span class="n">p</span><span class="p">.</span><span class="n">MiddleName</span><span class="p">),</span>
</span><span class='line'>            <span class="n">Projections</span><span class="p">.</span><span class="n">Constant</span><span class="p">(</span><span class="s">&quot;Not Applicable&quot;</span><span class="p">))</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="n">List</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;();</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>SQL</strong>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span>
</span><span class='line'>  <span class="n">COALESCE</span> <span class="p">(</span><span class="n">this_</span><span class="p">.</span><span class="n">MiddleName</span><span class="p">,</span> <span class="s1">&#39;Not Applicable&#39;</span><span class="p">)</span> <span class="k">AS</span> <span class="n">y0_</span>
</span><span class='line'><span class="k">FROM</span>
</span><span class='line'>  <span class="n">Person</span><span class="p">.</span><span class="n">Person</span> <span class="n">this_</span>
</span></code></pre></td></tr></table></div></figure>


<p>This same pattern applies to all SQL functions that you&rsquo;d like to call using <code>Projections.SqlFunction</code>.</p>

<h3>Using <code>ProjectionsExtensions</code></h3>

<p>Inside of a QueryOver query, there&rsquo;s actually a better way to call many of the most common SQL functions. The <code>ProjectionsExtensions</code> class inside of the <code>NHibernate.Criterion</code> namespace contains extension methods that are parsed into SQL function calls.</p>

<p>For example, here&rsquo;s a query using the <code>.Upper</code> extension method. Note that these extension methods are actually on the object&rsquo;s properties:</p>

<p><strong>QueryOver</strong>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">IList</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="n">middleNames</span> <span class="p">=</span> <span class="n">session</span><span class="p">.</span><span class="n">QueryOver</span><span class="p">&lt;</span><span class="n">Person</span><span class="p">&gt;()</span>
</span><span class='line'>    <span class="p">.</span><span class="n">Select</span><span class="p">(</span><span class="n">p</span> <span class="p">=&gt;</span> <span class="n">p</span><span class="p">.</span><span class="n">FirstName</span><span class="p">.</span><span class="n">Upper</span><span class="p">())</span>
</span><span class='line'>    <span class="p">.</span><span class="n">List</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;();</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>SQL</strong>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span>
</span><span class='line'>  <span class="k">UPPER</span> <span class="p">(</span><span class="n">this_</span><span class="p">.</span><span class="n">FirstName</span><span class="p">)</span> <span class="k">AS</span> <span class="n">y0_</span>
</span><span class='line'><span class="k">FROM</span>
</span><span class='line'>  <span class="n">Person</span><span class="p">.</span><span class="n">Person</span> <span class="n">this_</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is much cleaner than the alternative using <code>Projections.SqlFunction</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">IList</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="n">names</span> <span class="p">=</span> <span class="n">session</span><span class="p">.</span><span class="n">QueryOver</span><span class="p">&lt;</span><span class="n">Person</span><span class="p">&gt;()</span>
</span><span class='line'>    <span class="p">.</span><span class="n">Select</span><span class="p">(</span>
</span><span class='line'>        <span class="n">Projections</span><span class="p">.</span><span class="n">SqlFunction</span><span class="p">(</span>
</span><span class='line'>            <span class="s">&quot;upper&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="n">NHibernateUtil</span><span class="p">.</span><span class="n">String</span><span class="p">,</span>
</span><span class='line'>            <span class="n">Projections</span><span class="p">.</span><span class="n">Property</span><span class="p">&lt;</span><span class="n">Person</span><span class="p">&gt;(</span><span class="n">p</span> <span class="p">=&gt;</span> <span class="n">p</span><span class="p">.</span><span class="n">FirstName</span><span class="p">)))</span>
</span><span class='line'>    <span class="p">.</span><span class="n">List</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;();</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Using your own functions</h2>

<p>In most cases, functions you want to use will already be registered in the dialect you&rsquo;re using. In some cases, however, you&rsquo;ll want to add a function that&rsquo;s not been registered. In this section of the post, I&rsquo;ll go over how to add the <code>checksum</code> function in SQL Server. There are a few steps involved in using your own function, I&rsquo;ll go over each one in detail.</p>

<p>There are actually two ways to invoke a custom SQL function from your queries. You can either add the function &ldquo;statically&rdquo; to a custom dialect, or invoke a brand new function &ldquo;dynamically&rdquo; at runtime that&rsquo;s not registered with the dialect.</p>

<h3>Adding your own dialect</h3>

<p>As I discussed earlier, functions are registered in the dialect class representing the database flavor you&rsquo;re using. Since we can&rsquo;t modify those classes directly to register our function, we&rsquo;ll create a new dialect that&rsquo;s a subclass of the one we&rsquo;re using.</p>

<p>Since I&rsquo;m using SQL Server in this example, I&rsquo;ll create a custom dialect that&rsquo;s a subclass of <code>MsSql2012Dialect</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">using</span> <span class="nn">NHibernate</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">NHibernate.Dialect</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">NHibernate.Dialect.Function</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">AdventureWorksDialect</span> <span class="p">:</span> <span class="n">MsSql2012Dialect</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="nf">AdventureWorksDialect</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="n">RegisterFunction</span><span class="p">(</span><span class="s">&quot;checksum&quot;</span><span class="p">,</span> <span class="k">new</span> <span class="n">StandardSQLFunction</span><span class="p">(</span><span class="s">&quot;checksum&quot;</span><span class="p">,</span> <span class="n">NHibernateUtil</span><span class="p">.</span><span class="n">Int32</span><span class="p">));</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then, we need to make sure our application is using the new dialect. We can do this either in our configuration code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="kt">var</span> <span class="n">cfg</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Configuration</span><span class="p">()</span>
</span><span class='line'>    <span class="p">.</span><span class="n">Configure</span><span class="p">()</span>
</span><span class='line'>    <span class="p">.</span><span class="n">DataBaseIntegration</span><span class="p">(</span><span class="n">db</span> <span class="p">=&gt;</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">db</span><span class="p">.</span><span class="n">Dialect</span><span class="p">&lt;</span><span class="n">AdventureWorksDialect</span><span class="p">&gt;();</span>
</span><span class='line'>    <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Or, in our config file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;hibernate-configuration</span> <span class="na">xmlns=</span><span class="s">&quot;urn:nhibernate-configuration-2.2&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;session-factory&gt;</span>
</span><span class='line'>    <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;show_sql&quot;</span><span class="nt">&gt;</span>false<span class="nt">&lt;/property&gt;</span>
</span><span class='line'>    <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;connection.driver_class&quot;</span><span class="nt">&gt;</span>NHibernate.Driver.Sql2008ClientDriver<span class="nt">&lt;/property&gt;</span>
</span><span class='line'>    <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;dialect&quot;</span><span class="nt">&gt;</span>AdventureWorks.Database.AdventureWorksDialect<span class="nt">&lt;/property&gt;</span>
</span><span class='line'>    <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;connection.connection_string_name&quot;</span><span class="nt">&gt;</span>AdventureWorks<span class="nt">&lt;/property&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/session-factory&gt;</span>
</span><span class='line'><span class="nt">&lt;/hibernate-configuration&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Calling the function using <code>Projections.SqlFunction</code></h4>

<p>If all you want to do is call a function using <code>Projections.SqlFunction</code>, you&rsquo;re basically done. All you need to do is call the function:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">IList</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;</span> <span class="n">checksums</span> <span class="p">=</span> <span class="n">session</span><span class="p">.</span><span class="n">QueryOver</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;()</span>
</span><span class='line'>    <span class="p">.</span><span class="n">Select</span><span class="p">(</span><span class="n">Projections</span><span class="p">.</span><span class="n">SqlFunction</span><span class="p">(</span>
</span><span class='line'>        <span class="s">&quot;checksum&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="n">NHibernateUtil</span><span class="p">.</span><span class="n">Int32</span><span class="p">,</span>
</span><span class='line'>        <span class="n">Projections</span><span class="p">.</span><span class="n">Property</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;(</span><span class="n">p</span> <span class="p">=&gt;</span> <span class="n">p</span><span class="p">.</span><span class="n">Id</span><span class="p">),</span>
</span><span class='line'>        <span class="n">Projections</span><span class="p">.</span><span class="n">Property</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;(</span><span class="n">p</span> <span class="p">=&gt;</span> <span class="n">p</span><span class="p">.</span><span class="n">Name</span><span class="p">)))</span>
</span><span class='line'>    <span class="p">.</span><span class="n">List</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;();</span>
</span></code></pre></td></tr></table></div></figure>


<p>This will yield the following SQL:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span>
</span><span class='line'>  <span class="n">CHECKSUM</span> <span class="p">(</span><span class="n">this_</span><span class="p">.</span><span class="n">ProductID</span><span class="p">,</span> <span class="n">this_</span><span class="p">.</span><span class="n">Name</span><span class="p">)</span> <span class="k">AS</span> <span class="n">y0_</span>
</span><span class='line'><span class="k">FROM</span>
</span><span class='line'>  <span class="n">Production</span><span class="p">.</span><span class="n">Product</span> <span class="n">this_</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h4>Creating a custom projections class</h4>

<p>Using <code>Projections.SqlFunction</code> isn&rsquo;t quite satisfactory, especially after seeing the built-in <code>ProjectionExtensions</code>. We can easily create a <code>CustomProjections</code> class that provides some syntactic sugar for calling our custom function:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">static</span> <span class="k">class</span> <span class="nc">CustomProjections</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">static</span> <span class="n">IProjection</span> <span class="nf">Checksum</span><span class="p">(</span><span class="k">params</span> <span class="n">Expression</span><span class="p">&lt;</span><span class="n">Func</span><span class="p">&lt;</span><span class="kt">object</span><span class="p">&gt;&gt;[]</span> <span class="n">properties</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nf">Checksum</span><span class="p">(</span><span class="n">properties</span><span class="p">.</span><span class="n">Select</span><span class="p">(</span><span class="n">Projections</span><span class="p">.</span><span class="n">Property</span><span class="p">).</span><span class="n">ToArray</span><span class="p">());</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">static</span> <span class="n">IProjection</span> <span class="nf">Checksum</span><span class="p">(</span><span class="k">params</span> <span class="n">IProjection</span><span class="p">[]</span> <span class="n">projections</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">Projections</span><span class="p">.</span><span class="n">SqlFunction</span><span class="p">(</span><span class="s">&quot;checksum&quot;</span><span class="p">,</span> <span class="n">NHibernateUtil</span><span class="p">.</span><span class="n">Int32</span><span class="p">,</span> <span class="n">projections</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Notice that we have two overloads of <code>Checksum</code>, one that takes an array of <code>Expression&lt;Func&lt;object&gt;&gt;</code>s and another that takes an array of <code>IProjection</code>s.</p>

<p>Using the <code>Expression&lt;Func&lt;object&gt;&gt;[]</code> overload is convenient when we don&rsquo;t need to combine the use of <code>checksum</code> with other functions, for example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">IList</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;</span> <span class="n">checksums</span> <span class="p">=</span> <span class="n">session</span><span class="p">.</span><span class="n">QueryOver</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;(()</span> <span class="p">=&gt;</span> <span class="n">productAlias</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="n">Select</span><span class="p">(</span><span class="n">CustomProjections</span><span class="p">.</span><span class="n">Checksum</span><span class="p">(</span>
</span><span class='line'>        <span class="p">()</span> <span class="p">=&gt;</span> <span class="n">productAlias</span><span class="p">.</span><span class="n">Name</span><span class="p">,</span>
</span><span class='line'>        <span class="p">()</span> <span class="p">=&gt;</span> <span class="n">productAlias</span><span class="p">.</span><span class="n">Id</span><span class="p">))</span>
</span><span class='line'>    <span class="p">.</span><span class="n">List</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;();</span>
</span></code></pre></td></tr></table></div></figure>


<p>Using the <code>IProjection[]</code> overload is useful when we need to supply <code>checksum</code> with the result of calling <em>another</em> function, say <code>avg</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="c1">// Get the `checksum` of the average price for each sell start date.</span>
</span><span class='line'><span class="n">IList</span><span class="p">&lt;</span><span class="kt">object</span><span class="p">[]&gt;</span> <span class="n">checksums</span> <span class="p">=</span> <span class="n">session</span><span class="p">.</span><span class="n">QueryOver</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;(()</span> <span class="p">=&gt;</span> <span class="n">productAlias</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="n">SelectList</span><span class="p">(</span><span class="n">list</span> <span class="p">=&gt;</span> <span class="n">list</span>
</span><span class='line'>        <span class="p">.</span><span class="n">SelectGroup</span><span class="p">(</span><span class="n">p</span> <span class="p">=&gt;</span> <span class="n">p</span><span class="p">.</span><span class="n">SellStartDate</span><span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="n">Select</span><span class="p">(</span>
</span><span class='line'>            <span class="n">CustomProjections</span><span class="p">.</span><span class="n">Checksum</span><span class="p">(</span>
</span><span class='line'>                <span class="n">Projections</span><span class="p">.</span><span class="n">Avg</span><span class="p">(</span>
</span><span class='line'>                    <span class="n">Projections</span><span class="p">.</span><span class="n">Property</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="n">productAlias</span><span class="p">.</span><span class="n">ListPrice</span><span class="p">)))</span>
</span><span class='line'>        <span class="p">))</span>
</span><span class='line'>    <span class="p">.</span><span class="n">List</span><span class="p">&lt;</span><span class="kt">object</span><span class="p">[]&gt;();</span>
</span></code></pre></td></tr></table></div></figure>


<h4><code>StandardSQLFunction</code> and <code>SQLFunctionTemplate</code></h4>

<p>If you look through <a href="https://github.com/nhibernate/nhibernate-core/tree/master/src/NHibernate/Dialect/Function">NHibernate&rsquo;s implementations of various SQL functions</a>, you might notice that many use <code>StandardSQLFunction</code> and <code>SQLFunctionTemplate</code>. These should take care of most of your custom function needs. If not, you can always implement <code>ISQLFunction</code> and create your own implementation.</p>

<h5><code>StandardSQLFunction</code></h5>

<p>We used <code>StandardSQLFunction</code> to implement our <code>checksum</code> example. Basically, <code>StandardSQLFunction</code> allows you to implement a SQL function that takes an arbitrary number of arguments and returns a scalar value.</p>

<h5><code>SQLFunctionTemplate</code></h5>

<p><code>SQLFunctionTemplate</code> is a bit more sophisticated, and you can use it to implement SQL functions with a <em>template</em>, like the name implies. This is typically useful when you want to require a function to have a specific number of arguments.</p>

<p>An example of this would be the <code>stuff</code> <a href="http://msdn.microsoft.com/en-us/library/ms188043.aspx">function in SQL Server</a>. This function inserts one string into another string, deleting the specified number of characters from the first string at a start index, then inserts the second string.</p>

<p>For example, here&rsquo;s how you could use <code>stuff</code> to replace &ldquo;C++&rdquo; with &ldquo;C#&rdquo;:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">select</span> <span class="nf">stuff</span><span class="p">(</span><span class="err">&#39;</span><span class="n">C</span><span class="p">++</span><span class="err">&#39;</span><span class="p">,</span> <span class="m">2</span><span class="p">,</span> <span class="m">2</span><span class="p">,</span> <span class="sc">&#39;#&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Since <code>stuff</code> has a fixed number of parameters, it&rsquo;s a good candidate for <code>SQLFunctionTemplate</code>. All we have to do to register it in our dialect is add the following line:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">this</span><span class="p">.</span><span class="n">RegisterFunction</span><span class="p">(</span><span class="s">&quot;stuff&quot;</span><span class="p">,</span> <span class="k">new</span> <span class="n">SQLFunctionTemplate</span><span class="p">(</span><span class="n">NHibernateUtil</span><span class="p">.</span><span class="n">Int32</span><span class="p">,</span> <span class="s">&quot;stuff(?1, ?2, ?3, ?4)&quot;</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here, we&rsquo;re basically just saying that <code>stuff</code> is a function whose syntax is invoking the <code>stuff</code> function with exactly four parameters.</p>

<p>We&rsquo;ll add a few more static methods to our <code>CustomProjections</code> class, since there are several ways we might want to call this function, we&rsquo;ll provide several overloads:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="c1">// Usage: CustomProjections.Stuff(() =&gt; alias.Property, 1, 2, () =&gt; alias.OtherProperty)</span>
</span><span class='line'><span class="k">public</span> <span class="k">static</span> <span class="n">IProjection</span> <span class="nf">Stuff</span><span class="p">(</span><span class="n">Expression</span><span class="p">&lt;</span><span class="n">Func</span><span class="p">&lt;</span><span class="kt">object</span><span class="p">&gt;&gt;</span> <span class="n">characterExpression</span><span class="p">,</span> <span class="kt">int</span> <span class="n">start</span><span class="p">,</span> <span class="kt">int</span> <span class="n">length</span><span class="p">,</span> <span class="n">Expression</span><span class="p">&lt;</span><span class="n">Func</span><span class="p">&lt;</span><span class="kt">object</span><span class="p">&gt;&gt;</span> <span class="n">replaceWithExpression</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nf">Stuff</span><span class="p">(</span><span class="n">Projections</span><span class="p">.</span><span class="n">Property</span><span class="p">(</span><span class="n">characterExpression</span><span class="p">),</span> <span class="n">start</span><span class="p">,</span> <span class="n">length</span><span class="p">,</span> <span class="n">Projections</span><span class="p">.</span><span class="n">Property</span><span class="p">(</span><span class="n">replaceWithExpression</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Usage: CustomProjections.Stuff(Projections.Property(..), 1, 2, Projections.Constant(...))</span>
</span><span class='line'><span class="k">public</span> <span class="k">static</span> <span class="n">IProjection</span> <span class="nf">Stuff</span><span class="p">(</span><span class="n">IProjection</span> <span class="n">characterExpression</span><span class="p">,</span> <span class="kt">int</span> <span class="n">start</span><span class="p">,</span> <span class="kt">int</span> <span class="n">length</span><span class="p">,</span> <span class="n">IProjection</span> <span class="n">replaceWithExpression</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">Projections</span><span class="p">.</span><span class="n">SqlFunction</span><span class="p">(</span><span class="s">&quot;stuff&quot;</span><span class="p">,</span> <span class="n">NHibernateUtil</span><span class="p">.</span><span class="n">String</span><span class="p">,</span> <span class="n">characterExpression</span><span class="p">,</span> <span class="n">Projections</span><span class="p">.</span><span class="n">Constant</span><span class="p">(</span><span class="n">start</span><span class="p">),</span> <span class="n">Projections</span><span class="p">.</span><span class="n">Constant</span><span class="p">(</span><span class="n">length</span><span class="p">),</span> <span class="n">replaceWithExpression</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Usage: CustomProjections.Stuff(() =&gt; alias.Property, 1, 2, &quot;Replacement&quot;)</span>
</span><span class='line'><span class="k">public</span> <span class="k">static</span> <span class="n">IProjection</span> <span class="nf">Stuff</span><span class="p">(</span><span class="n">Expression</span><span class="p">&lt;</span><span class="n">Func</span><span class="p">&lt;</span><span class="kt">object</span><span class="p">&gt;&gt;</span> <span class="n">characterExpression</span><span class="p">,</span> <span class="kt">int</span> <span class="n">start</span><span class="p">,</span> <span class="kt">int</span> <span class="n">length</span><span class="p">,</span> <span class="kt">string</span> <span class="n">replaceWithExpression</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nf">Stuff</span><span class="p">(</span><span class="n">Projections</span><span class="p">.</span><span class="n">Property</span><span class="p">(</span><span class="n">characterExpression</span><span class="p">),</span> <span class="n">start</span><span class="p">,</span> <span class="n">length</span><span class="p">,</span> <span class="n">Projections</span><span class="p">.</span><span class="n">Constant</span><span class="p">(</span><span class="n">replaceWithExpression</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here&rsquo;s an example of how it would be used:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">IList</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="n">stuffResults</span> <span class="p">=</span> <span class="n">session</span><span class="p">.</span><span class="n">QueryOver</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;(()</span> <span class="p">=&gt;</span> <span class="n">productAlias</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="n">SelectList</span><span class="p">(</span><span class="n">list</span> <span class="p">=&gt;</span> <span class="n">list</span>
</span><span class='line'>        <span class="p">.</span><span class="n">Select</span><span class="p">(</span>
</span><span class='line'>            <span class="n">CustomProjections</span><span class="p">.</span><span class="n">Stuff</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="n">productAlias</span><span class="p">.</span><span class="n">Name</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">2</span><span class="p">,</span> <span class="s">&quot;PR&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">))</span>
</span><span class='line'>    <span class="p">.</span><span class="n">List</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;();</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Invoking new functions at runtime</h3>

<p>If, for some reason, you don&rsquo;t want to create a custom dialect and register functions there, you can still invoke an unregistered SQL function. There&rsquo;s an overload of <code>Projections.SqlFunction</code> that takes an <code>ISQLFunction</code> that you can define at runtime. For example, if we had not registered our <code>checksum</code> function, you could call it dynamically like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">Projections</span><span class="p">.</span><span class="n">SqlFunction</span><span class="p">(</span>
</span><span class='line'>    <span class="k">new</span> <span class="nf">StandardSQLFunction</span><span class="p">(</span><span class="s">&quot;checksum&quot;</span><span class="p">),</span>
</span><span class='line'>    <span class="n">NHibernateUtil</span><span class="p">.</span><span class="n">Int32</span><span class="p">,</span>
</span><span class='line'>    <span class="n">Projections</span><span class="p">.</span><span class="n">Property</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="n">productAlias</span><span class="p">.</span><span class="n">Name</span><span class="p">),</span>
</span><span class='line'>    <span class="n">Projections</span><span class="p">.</span><span class="n">Property</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="n">productAlias</span><span class="p">.</span><span class="n">Id</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here, we&rsquo;re defining and using the <code>checksum</code> function in one shot.</p>

<p>There <em>is</em> a disadvantage to using this method. When you register a function with the dialect instead, NHibernate adds the function to an internal cache and reuses the function definition whenever you access it by name.</p>

<p>Creating a new <code>checksum</code> function every time we needed to call the SQL Server <code>checksum</code> function would be wasteful&mdash;it would be better to define the function once and have NHibernate cache and reuse it.</p>

<p>However, we may want to leverage invoking a function dynamically to take care of special SQL functions, like SQL Server&rsquo;s <code>datediff</code> function.</p>

<h4>Implementing SQL Server&rsquo;s <code>datediff</code> function.</h4>

<p>SQL Server has a <a href="http://msdn.microsoft.com/en-us/library/ms189794%28SQL.90%29.aspx">function</a> called <code>datediff</code> that returns the number of &ldquo;date parts&rdquo; between a given start and end date.</p>

<p>At first glance, it seems like we could register <code>datediff</code> using <code>SQLFunctionTemplate</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">new</span> <span class="nf">SQLFunctionTemplate</span><span class="p">(</span><span class="s">&quot;datediff(?1, ?2, ?3)&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The problem here is that <code>datediff</code>&rsquo;s first parameter is a SQL server keyword and <em>cannot</em> be supplied as a variable. According to MSDN:</p>

<blockquote><p>These dateparts and abbreviations cannot be supplied as a user-declared variable.</p></blockquote>

<p>So that means we can&rsquo;t call <code>datediff</code> and supply the <code>datepart</code> dynamically. We could register a function for every possible version of <code>datediff</code> and name them all slightly differently:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">RegisterFunction</span><span class="p">(</span><span class="s">&quot;datediff-yr&quot;</span><span class="p">,</span> <span class="k">new</span> <span class="n">SQLFunctionTemplate</span><span class="p">(</span><span class="s">&quot;datediff(yy, ?1, ?2)&quot;</span><span class="p">));</span>
</span><span class='line'><span class="n">RegisterFunction</span><span class="p">(</span><span class="s">&quot;datediff-dd&quot;</span><span class="p">,</span> <span class="k">new</span> <span class="n">SQLFunctionTemplate</span><span class="p">(</span><span class="s">&quot;datediff(dd, ?1, ?2)&quot;</span><span class="p">));</span>
</span><span class='line'><span class="cm">/* etc, for each valid datepart */</span>
</span></code></pre></td></tr></table></div></figure>


<p>I&rsquo;m not sure about you but this makes me cringe. Luckily there&rsquo;s a better solution. We can use NHibernate&rsquo;s ability to run an arbitrary, unregistered SQL function to dynamically create and execute the various versions of <code>datediff</code>. Here&rsquo;s the code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">static</span> <span class="k">class</span> <span class="nc">DateProjections</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">private</span> <span class="k">const</span> <span class="kt">string</span> <span class="n">DateDiffFormat</span> <span class="p">=</span> <span class="s">&quot;datediff({0}, ?1, ?2)&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">static</span> <span class="n">IProjection</span> <span class="nf">DateDiff</span><span class="p">(</span>
</span><span class='line'>        <span class="kt">string</span> <span class="n">datepart</span><span class="p">,</span>
</span><span class='line'>        <span class="n">Expression</span><span class="p">&lt;</span><span class="n">Func</span><span class="p">&lt;</span><span class="kt">object</span><span class="p">&gt;&gt;</span> <span class="n">startDate</span><span class="p">,</span>
</span><span class='line'>        <span class="n">Expression</span><span class="p">&lt;</span><span class="n">Func</span><span class="p">&lt;</span><span class="kt">object</span><span class="p">&gt;&gt;</span> <span class="n">endDate</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="c1">// Build the function template based on the date part.</span>
</span><span class='line'>        <span class="kt">string</span> <span class="n">functionTemplate</span> <span class="p">=</span> <span class="kt">string</span><span class="p">.</span><span class="n">Format</span><span class="p">(</span><span class="n">DateDiffFormat</span><span class="p">,</span> <span class="n">datepart</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="n">Projections</span><span class="p">.</span><span class="n">SqlFunction</span><span class="p">(</span>
</span><span class='line'>            <span class="k">new</span> <span class="nf">SQLFunctionTemplate</span><span class="p">(</span><span class="n">NHibernateUtil</span><span class="p">.</span><span class="n">Int32</span><span class="p">,</span> <span class="n">functionTemplate</span><span class="p">),</span>
</span><span class='line'>            <span class="n">NHibernateUtil</span><span class="p">.</span><span class="n">Int32</span><span class="p">,</span>
</span><span class='line'>            <span class="n">Projections</span><span class="p">.</span><span class="n">Property</span><span class="p">(</span><span class="n">startDate</span><span class="p">),</span>
</span><span class='line'>            <span class="n">Projections</span><span class="p">.</span><span class="n">Property</span><span class="p">(</span><span class="n">endDate</span><span class="p">));</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, we&rsquo;re able to write queries using any date part we want without having to register a separate function for each date part. For example, here&rsquo;s a query that gets the <code>datediff</code> in days, quarters, and months:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">IList</span><span class="p">&lt;</span><span class="kt">object</span><span class="p">[]&gt;</span> <span class="n">checksums</span> <span class="p">=</span> <span class="n">session</span><span class="p">.</span><span class="n">QueryOver</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;(()</span> <span class="p">=&gt;</span> <span class="n">productAlias</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="n">SelectList</span><span class="p">(</span><span class="n">list</span> <span class="p">=&gt;</span> <span class="n">list</span>
</span><span class='line'>        <span class="p">.</span><span class="n">Select</span><span class="p">(</span><span class="n">DateProjections</span><span class="p">.</span><span class="n">DateDiff</span><span class="p">(</span><span class="s">&quot;dd&quot;</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="n">productAlias</span><span class="p">.</span><span class="n">SellStartDate</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="n">productAlias</span><span class="p">.</span><span class="n">SellEndDate</span><span class="p">))</span>
</span><span class='line'>        <span class="p">.</span><span class="n">Select</span><span class="p">(</span><span class="n">DateProjections</span><span class="p">.</span><span class="n">DateDiff</span><span class="p">(</span><span class="s">&quot;qq&quot;</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="n">productAlias</span><span class="p">.</span><span class="n">SellStartDate</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="n">productAlias</span><span class="p">.</span><span class="n">SellEndDate</span><span class="p">))</span>
</span><span class='line'>        <span class="p">.</span><span class="n">Select</span><span class="p">(</span><span class="n">DateProjections</span><span class="p">.</span><span class="n">DateDiff</span><span class="p">(</span><span class="s">&quot;mm&quot;</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="n">productAlias</span><span class="p">.</span><span class="n">SellStartDate</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="n">productAlias</span><span class="p">.</span><span class="n">SellEndDate</span><span class="p">)))</span>
</span><span class='line'>    <span class="p">.</span><span class="n">List</span><span class="p">&lt;</span><span class="kt">object</span><span class="p">[]&gt;();</span>
</span></code></pre></td></tr></table></div></figure>


<p>This still isn&rsquo;t perfect. You might have realized that we&rsquo;re still at a disadvantage since we&rsquo;re not using cached versions of our function definitions. One good solution to this is to use our own cache for the various <code>datediff</code> flavors. Here&rsquo;s what our class looks like with that modification:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">static</span> <span class="k">class</span> <span class="nc">DateProjections</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">private</span> <span class="k">const</span> <span class="kt">string</span> <span class="n">DateDiffFormat</span> <span class="p">=</span> <span class="s">&quot;datediff({0}, ?1, ?2)&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Maps datepart to an ISQLFunction</span>
</span><span class='line'>    <span class="k">private</span> <span class="k">static</span> <span class="n">Dictionary</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">,</span> <span class="n">ISQLFunction</span><span class="p">&gt;</span> <span class="n">DateDiffFunctionCache</span> <span class="p">=</span>
</span><span class='line'>        <span class="k">new</span> <span class="n">Dictionary</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">,</span> <span class="n">ISQLFunction</span><span class="p">&gt;();</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">static</span> <span class="n">IProjection</span> <span class="nf">DateDiff</span><span class="p">(</span>
</span><span class='line'>        <span class="kt">string</span> <span class="n">datepart</span><span class="p">,</span>
</span><span class='line'>        <span class="n">Expression</span><span class="p">&lt;</span><span class="n">Func</span><span class="p">&lt;</span><span class="kt">object</span><span class="p">&gt;&gt;</span> <span class="n">startDate</span><span class="p">,</span>
</span><span class='line'>        <span class="n">Expression</span><span class="p">&lt;</span><span class="n">Func</span><span class="p">&lt;</span><span class="kt">object</span><span class="p">&gt;&gt;</span> <span class="n">endDate</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">ISQLFunction</span> <span class="n">sqlFunction</span> <span class="p">=</span> <span class="n">GetDateDiffFunction</span><span class="p">(</span><span class="n">datepart</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="n">Projections</span><span class="p">.</span><span class="n">SqlFunction</span><span class="p">(</span>
</span><span class='line'>            <span class="n">sqlFunction</span><span class="p">,</span>
</span><span class='line'>            <span class="n">NHibernateUtil</span><span class="p">.</span><span class="n">Int32</span><span class="p">,</span>
</span><span class='line'>            <span class="n">Projections</span><span class="p">.</span><span class="n">Property</span><span class="p">(</span><span class="n">startDate</span><span class="p">),</span>
</span><span class='line'>            <span class="n">Projections</span><span class="p">.</span><span class="n">Property</span><span class="p">(</span><span class="n">endDate</span><span class="p">));</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span> <span class="k">static</span> <span class="n">ISQLFunction</span> <span class="nf">GetDateDiffFunction</span><span class="p">(</span><span class="kt">string</span> <span class="n">datepart</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">ISQLFunction</span> <span class="n">sqlFunction</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(!</span><span class="n">DateDiffFunctionCache</span><span class="p">.</span><span class="n">TryGetValue</span><span class="p">(</span><span class="n">datepart</span><span class="p">,</span> <span class="k">out</span> <span class="n">sqlFunction</span><span class="p">))</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="kt">string</span> <span class="n">functionTemplate</span> <span class="p">=</span> <span class="kt">string</span><span class="p">.</span><span class="n">Format</span><span class="p">(</span><span class="n">DateDiffFormat</span><span class="p">,</span> <span class="n">datepart</span><span class="p">);</span>
</span><span class='line'>            <span class="n">sqlFunction</span> <span class="p">=</span> <span class="k">new</span> <span class="n">SQLFunctionTemplate</span><span class="p">(</span><span class="n">NHibernateUtil</span><span class="p">.</span><span class="n">Int32</span><span class="p">,</span> <span class="n">functionTemplate</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">DateDiffFunctionCache</span><span class="p">[</span><span class="n">datepart</span><span class="p">]</span> <span class="p">=</span> <span class="n">sqlFunction</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="n">sqlFunction</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we&rsquo;re caching our function definitions so that we&rsquo;re not redefining versions of <code>datediff</code> unnecessarily.</p>

<p>Another enhancement that probably should be made is to make the <code>datepart</code> argument of <code>DateProjections.DateDiff</code> strongly typed. A good solution there would be to use an <code>enum</code> defining the possible <code>datepart</code> values. Then you could use a <code>Dictionary&lt;DatePart, string&gt;</code> to map from <code>enum</code> values to strings.</p>

<h2>Summary</h2>

<p>Calling built-in SQL functions from NHibernate queries has been written about many times before, but hopefully I was able to shed some light on how those functions are registered and invoked. In summary:</p>

<ul>
<li>You can either register a function by using a custom dialect and invoke it by name later, or define and invoke the function in one step.</li>
<li>Registering a function with a custom dialect is often the best option since the function definition is cached and reused automatically by NHibernate.</li>
<li><code>StandardSQLFunction</code> and <code>SQLFunctionTemplate</code> are implementations of <code>ISQLFunction</code> that enable easily defining SQL functions.</li>
<li>Using a custom projections class is a useful abstraction to lay on top of <code>Projections.SqlFunction</code> to make code easier to read and more robust.</li>
<li>You can use NHibernate&rsquo;s ability to call SQL functions at runtime to implement the <code>datediff</code> function in a clean way.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[QueryOver Series - Part 6: Query Building Techniques]]></title>
    <link href="http://blog.andrewawhitaker.com/blog/2014/08/07/queryover-series-part-6-query-building-techniques/"/>
    <updated>2014-08-07T16:05:37-05:00</updated>
    <id>http://blog.andrewawhitaker.com/blog/2014/08/07/queryover-series-part-6-query-building-techniques</id>
    <content type="html"><![CDATA[<p>In this post, I&rsquo;m going to explain some more advanced techniques for building queries with QueryOver. Practically, this means adding joins and where clauses dynamically. This is actually one of the most powerful abilities of QueryOver so it&rsquo;s worth understanding.</p>

<!-- more -->


<p>To make this easier to explain, I&rsquo;m going to use a simple example that I can build on throughout the post.</p>

<h2>The Problem</h2>

<p>Imagine your company is building a page that lists all of the company&rsquo;s available products. On the left hand side, there are a few different filters the user can use to narrow his or her search.</p>

<p>You&rsquo;re immediately faced with a problem: How do I conditionally add where clauses and joins depending on the user&rsquo;s filters? If you&rsquo;re using a pure SQL solution, you would most likely need to build up dynamic SQL and then execute that. This will work fine, but you&rsquo;re immediately faced with a few other problems:</p>

<ul>
<li><strong>You&rsquo;re more open to SQL injection</strong>. Instead of using a parameterized query, a programmer could modify your query to concatenate user-inputted data into the query.</li>
<li><strong>You have a big maintainability problem</strong>. You&rsquo;re going to have to deal with giant strings of SQL. This isn&rsquo;t fun to read or modify.</li>
</ul>


<p>Both of these problems apply whether you&rsquo;re building the SQL in a stored procedure or if you&rsquo;re building SQL outside of the database engine (say, in your application layer).</p>

<h2>Solutions with QueryOver</h2>

<p>Using QueryOver to dynamically build queries is an attractive solution because it solves both problems:</p>

<ul>
<li>NHibernate is building the SQL behind the scenes using parameterized queries, so we don&rsquo;t have to worry about SQL injection.</li>
<li>Instead of looking at huge amounts of string concatenation, we&rsquo;re looking at more expressive .NET code. As a bonus, this is compiled with our application making it much more maintainable.</li>
</ul>


<p>Lets take a look at how we can dynamically construct queries with QueryOver. Keeping with our example, we&rsquo;ll start with a base query that retrieves information about all products:</p>

<p>Here&rsquo;s the DTO we&rsquo;re projecting to with our queries:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">ProductDTO</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="kt">string</span> <span class="n">Name</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="kt">string</span> <span class="n">Color</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="kt">decimal</span> <span class="n">ListPrice</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And here&rsquo;s the basic query we&rsquo;ll be building on:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">IList</span><span class="p">&lt;</span><span class="n">ProductDTO</span><span class="p">&gt;</span> <span class="n">products</span> <span class="p">=</span> <span class="n">session</span><span class="p">.</span><span class="n">QueryOver</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;()</span>
</span><span class='line'>    <span class="p">.</span><span class="n">SelectList</span><span class="p">(</span><span class="n">list</span> <span class="p">=&gt;</span> <span class="n">list</span>
</span><span class='line'>        <span class="p">.</span><span class="n">Select</span><span class="p">(</span><span class="n">pr</span> <span class="p">=&gt;</span> <span class="n">pr</span><span class="p">.</span><span class="n">Name</span><span class="p">).</span><span class="n">WithAlias</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="n">result</span><span class="p">.</span><span class="n">Name</span><span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="n">Select</span><span class="p">(</span><span class="n">pr</span> <span class="p">=&gt;</span> <span class="n">pr</span><span class="p">.</span><span class="n">Color</span><span class="p">).</span><span class="n">WithAlias</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="n">result</span><span class="p">.</span><span class="n">Color</span><span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="n">Select</span><span class="p">(</span><span class="n">pr</span> <span class="p">=&gt;</span> <span class="n">pr</span><span class="p">.</span><span class="n">ListPrice</span><span class="p">).</span><span class="n">WithAlias</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="n">result</span><span class="p">.</span><span class="n">ListPrice</span><span class="p">))</span>
</span><span class='line'>    <span class="p">.</span><span class="n">TransformUsing</span><span class="p">(</span><span class="n">Transformers</span><span class="p">.</span><span class="n">AliasToBean</span><span class="p">&lt;</span><span class="n">ProductDTO</span><span class="p">&gt;())</span>
</span><span class='line'>    <span class="p">.</span><span class="n">List</span><span class="p">&lt;</span><span class="n">ProductDTO</span><span class="p">&gt;();</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Conditional Restrictions</h3>

<p>Continuing with our example, imagine we have a &ldquo;Color&rdquo; filter where the user can look for products only matching the colors they specify. Since <code>Product.Color</code> is a <code>string</code>, we&rsquo;ll introduce an <code>IEnumerable&lt;string&gt;</code> containing user-specified colors.</p>

<p>Adding this to our query gives us the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">ProductDTO</span> <span class="n">result</span> <span class="p">=</span> <span class="k">null</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">var</span> <span class="n">query</span> <span class="p">=</span> <span class="n">session</span><span class="p">.</span><span class="n">QueryOver</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;();</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">colors</span> <span class="p">!=</span> <span class="k">null</span> <span class="p">&amp;&amp;</span> <span class="n">colors</span><span class="p">.</span><span class="n">Any</span><span class="p">())</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">query</span><span class="p">.</span><span class="n">Where</span><span class="p">(</span><span class="n">pr</span> <span class="p">=&gt;</span> <span class="n">pr</span><span class="p">.</span><span class="n">Color</span><span class="p">.</span><span class="n">IsIn</span><span class="p">(</span><span class="n">colors</span><span class="p">.</span><span class="n">ToArray</span><span class="p">()));</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">IList</span><span class="p">&lt;</span><span class="n">ProductDTO</span><span class="p">&gt;</span> <span class="n">products</span> <span class="p">=</span> <span class="n">query</span>
</span><span class='line'>    <span class="p">.</span><span class="n">SelectList</span><span class="p">(</span><span class="n">list</span> <span class="p">=&gt;</span> <span class="n">list</span>
</span><span class='line'>        <span class="p">.</span><span class="n">Select</span><span class="p">(</span><span class="n">pr</span> <span class="p">=&gt;</span> <span class="n">pr</span><span class="p">.</span><span class="n">Name</span><span class="p">).</span><span class="n">WithAlias</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="n">result</span><span class="p">.</span><span class="n">Name</span><span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="n">Select</span><span class="p">(</span><span class="n">pr</span> <span class="p">=&gt;</span> <span class="n">pr</span><span class="p">.</span><span class="n">Color</span><span class="p">).</span><span class="n">WithAlias</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="n">result</span><span class="p">.</span><span class="n">Color</span><span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="n">Select</span><span class="p">(</span><span class="n">pr</span> <span class="p">=&gt;</span> <span class="n">pr</span><span class="p">.</span><span class="n">ListPrice</span><span class="p">).</span><span class="n">WithAlias</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="n">result</span><span class="p">.</span><span class="n">ListPrice</span><span class="p">))</span>
</span><span class='line'>    <span class="p">.</span><span class="n">TransformUsing</span><span class="p">(</span><span class="n">Transformers</span><span class="p">.</span><span class="n">AliasToBean</span><span class="p">&lt;</span><span class="n">ProductDTO</span><span class="p">&gt;())</span>
</span><span class='line'>    <span class="p">.</span><span class="n">List</span><span class="p">&lt;</span><span class="n">ProductDTO</span><span class="p">&gt;();</span>
</span></code></pre></td></tr></table></div></figure>


<p>Our query has gotten a little more complicated, but it&rsquo;s still readable. Later on in the post, I&rsquo;ll show one way you can make this a bit more readable.</p>

<h3>Conditional Joins</h3>

<p>Sometimes you&rsquo;ll need to conditionally perform a join. One reason for this would be that a query <em>without</em> the join performs much better and you don&rsquo;t want to join unless you have to.</p>

<p>Lets add another filter to our example. Each <code>Product</code> in our domain has 0 to many <code>ProductReview</code>s. Let&rsquo;s add a filter that allows the user to find only products with a minimum user rating. For example, this would let a user find only products that have at least one rating of 3 stars or higher.</p>

<p>We&rsquo;ll add a <code>minimumRating</code> (a <code>Nullable&lt;int&gt;</code> where <code>null</code> indicates that the filter is not being used) and incorporate that into our query:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">ProductDTO</span> <span class="n">result</span> <span class="p">=</span> <span class="k">null</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">var</span> <span class="n">query</span> <span class="p">=</span> <span class="n">session</span><span class="p">.</span><span class="n">QueryOver</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;();</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">colors</span> <span class="p">!=</span> <span class="k">null</span> <span class="p">&amp;&amp;</span> <span class="n">colors</span><span class="p">.</span><span class="n">Any</span><span class="p">())</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">query</span><span class="p">.</span><span class="n">Where</span><span class="p">(</span><span class="n">pr</span> <span class="p">=&gt;</span> <span class="n">pr</span><span class="p">.</span><span class="n">Color</span><span class="p">.</span><span class="n">IsIn</span><span class="p">(</span><span class="n">colors</span><span class="p">.</span><span class="n">ToArray</span><span class="p">()));</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">minimumRating</span><span class="p">.</span><span class="n">HasValue</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">ProductReview</span> <span class="n">reviewAlias</span> <span class="p">=</span> <span class="k">null</span><span class="p">;</span>
</span><span class='line'>    <span class="n">query</span><span class="p">.</span><span class="n">JoinAlias</span><span class="p">(</span><span class="n">pr</span> <span class="p">=&gt;</span> <span class="n">pr</span><span class="p">.</span><span class="n">Reviews</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="n">reviewAlias</span><span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="n">Where</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="n">reviewAlias</span><span class="p">.</span><span class="n">Rating</span> <span class="p">&gt;=</span> <span class="n">minimumRating</span><span class="p">.</span><span class="n">Value</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">IList</span><span class="p">&lt;</span><span class="n">ProductDTO</span><span class="p">&gt;</span> <span class="n">products</span> <span class="p">=</span> <span class="n">query</span>
</span><span class='line'>    <span class="p">.</span><span class="n">SelectList</span><span class="p">(</span><span class="n">list</span> <span class="p">=&gt;</span> <span class="n">list</span>
</span><span class='line'>        <span class="p">.</span><span class="n">Select</span><span class="p">(</span><span class="n">pr</span> <span class="p">=&gt;</span> <span class="n">pr</span><span class="p">.</span><span class="n">Name</span><span class="p">).</span><span class="n">WithAlias</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="n">result</span><span class="p">.</span><span class="n">Name</span><span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="n">Select</span><span class="p">(</span><span class="n">pr</span> <span class="p">=&gt;</span> <span class="n">pr</span><span class="p">.</span><span class="n">Color</span><span class="p">).</span><span class="n">WithAlias</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="n">result</span><span class="p">.</span><span class="n">Color</span><span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="n">Select</span><span class="p">(</span><span class="n">pr</span> <span class="p">=&gt;</span> <span class="n">pr</span><span class="p">.</span><span class="n">ListPrice</span><span class="p">).</span><span class="n">WithAlias</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="n">result</span><span class="p">.</span><span class="n">ListPrice</span><span class="p">))</span>
</span><span class='line'>    <span class="p">.</span><span class="n">TransformUsing</span><span class="p">(</span><span class="n">Transformers</span><span class="p">.</span><span class="n">AliasToBean</span><span class="p">&lt;</span><span class="n">ProductDTO</span><span class="p">&gt;())</span>
</span><span class='line'>    <span class="p">.</span><span class="n">List</span><span class="p">&lt;</span><span class="n">ProductDTO</span><span class="p">&gt;();</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is still more readable than dynamic SQL, but it&rsquo;s starting to look hairy. If we were to add a few more filters we&rsquo;d have a mess on our hands.</p>

<h3>Refactoring into Extension Methods</h3>

<p>One way to apply our filters conditionally is to use <a href="http://msdn.microsoft.com/en-us/library/bb383977.aspx">extension methods</a>. This will allow us to retain the flow of the QueryOver query so that it&rsquo;s a little easier to read.</p>

<p>Here&rsquo;s a static class containing our extension methods:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">static</span> <span class="k">class</span> <span class="nc">ProductQueryExtensions</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">static</span> <span class="n">IQueryOver</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">,</span> <span class="n">Product</span><span class="p">&gt;</span> <span class="n">ApplyColorFilter</span><span class="p">(</span>
</span><span class='line'>        <span class="k">this</span> <span class="n">IQueryOver</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">,</span> <span class="n">Product</span><span class="p">&gt;</span> <span class="n">query</span><span class="p">,</span>
</span><span class='line'>        <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="n">colors</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">colors</span> <span class="p">!=</span> <span class="k">null</span> <span class="p">&amp;&amp;</span> <span class="n">colors</span><span class="p">.</span><span class="n">Any</span><span class="p">())</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">query</span><span class="p">.</span><span class="n">Where</span><span class="p">(</span><span class="n">pr</span> <span class="p">=&gt;</span> <span class="n">pr</span><span class="p">.</span><span class="n">Color</span><span class="p">.</span><span class="n">IsIn</span><span class="p">(</span><span class="n">colors</span><span class="p">.</span><span class="n">ToArray</span><span class="p">()));</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="n">query</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">static</span> <span class="n">IQueryOver</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">,</span> <span class="n">Product</span><span class="p">&gt;</span> <span class="n">ApplyRatingFilter</span><span class="p">(</span>
</span><span class='line'>        <span class="k">this</span> <span class="n">IQueryOver</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">,</span> <span class="n">Product</span><span class="p">&gt;</span> <span class="n">query</span><span class="p">,</span>
</span><span class='line'>        <span class="kt">int?</span> <span class="n">minimumRating</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">minimumRating</span><span class="p">.</span><span class="n">HasValue</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">ProductReview</span> <span class="n">reviewAlias</span> <span class="p">=</span> <span class="k">null</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">query</span><span class="p">.</span><span class="n">JoinAlias</span><span class="p">(</span><span class="n">pr</span> <span class="p">=&gt;</span> <span class="n">pr</span><span class="p">.</span><span class="n">Reviews</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="n">reviewAlias</span><span class="p">)</span>
</span><span class='line'>                <span class="p">.</span><span class="n">Where</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="n">reviewAlias</span><span class="p">.</span><span class="n">Rating</span> <span class="p">&gt;=</span> <span class="n">minimumRating</span><span class="p">.</span><span class="n">Value</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="n">query</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And here&rsquo;s our updated query using those extension methods:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">IList</span><span class="p">&lt;</span><span class="n">ProductDTO</span><span class="p">&gt;</span> <span class="n">products</span> <span class="p">=</span> <span class="n">session</span><span class="p">.</span><span class="n">QueryOver</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;()</span>
</span><span class='line'>    <span class="p">.</span><span class="n">ApplyColorFilter</span><span class="p">(</span><span class="n">colors</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="n">ApplyRatingFilter</span><span class="p">(</span><span class="n">minimumRating</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="n">SelectList</span><span class="p">(</span><span class="n">list</span> <span class="p">=&gt;</span> <span class="n">list</span>
</span><span class='line'>        <span class="p">.</span><span class="n">Select</span><span class="p">(</span><span class="n">pr</span> <span class="p">=&gt;</span> <span class="n">pr</span><span class="p">.</span><span class="n">Name</span><span class="p">).</span><span class="n">WithAlias</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="n">result</span><span class="p">.</span><span class="n">Name</span><span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="n">Select</span><span class="p">(</span><span class="n">pr</span> <span class="p">=&gt;</span> <span class="n">pr</span><span class="p">.</span><span class="n">Color</span><span class="p">).</span><span class="n">WithAlias</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="n">result</span><span class="p">.</span><span class="n">Color</span><span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="n">Select</span><span class="p">(</span><span class="n">pr</span> <span class="p">=&gt;</span> <span class="n">pr</span><span class="p">.</span><span class="n">ListPrice</span><span class="p">).</span><span class="n">WithAlias</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="n">result</span><span class="p">.</span><span class="n">ListPrice</span><span class="p">))</span>
</span><span class='line'>    <span class="p">.</span><span class="n">TransformUsing</span><span class="p">(</span><span class="n">Transformers</span><span class="p">.</span><span class="n">AliasToBean</span><span class="p">&lt;</span><span class="n">ProductDTO</span><span class="p">&gt;())</span>
</span><span class='line'>    <span class="p">.</span><span class="n">List</span><span class="p">&lt;</span><span class="n">ProductDTO</span><span class="p">&gt;();</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="n">products</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is <em>much</em> easier to read and our filtering logic is in it&rsquo;s own class. As a bonus, it&rsquo;s reusable: we can reuse those same extension methods in another area of our application if we need to.</p>

<p>There are a few problems with this approach though&mdash;so let&rsquo;s address those.</p>

<h4>The extension methods only work on an <code>IQueryOver&lt;Product, Product&gt;</code></h4>

<p>This may not seem like a problem at first, but imagine we changed our query to start at another table. Say, for example, we wanted to start at <code>ProductReview</code> and <em>join</em> to <code>Product</code> instead of <em>starting</em> at <code>Product</code>. In that case, our extension methods would be useless since we aren&rsquo;t working with an <code>IQueryOver&lt;Product, Product&gt;</code> anymore, we&rsquo;re working with an <code>IQueryOver&lt;ProductReview, Product&gt;</code>.</p>

<p>The solution to this problem is to slightly change our extension methods to take advantage of the fact that when we&rsquo;re filtering we only care about <code>TSubType</code> (see <a href="../../../../2014/03/16/queryover-series-part-2-basics/">part 2, Basics and Joining</a> if you need a refresher on <code>TRoot</code> and <code>TSubType</code>):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">static</span> <span class="k">class</span> <span class="nc">ProductQueryExtensions</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">static</span> <span class="n">IQueryOver</span><span class="p">&lt;</span><span class="n">TRoot</span><span class="p">,</span> <span class="n">Product</span><span class="p">&gt;</span> <span class="n">ApplyColorFilter</span><span class="p">&lt;</span><span class="n">TRoot</span><span class="p">&gt;(</span>
</span><span class='line'>        <span class="k">this</span> <span class="n">IQueryOver</span><span class="p">&lt;</span><span class="n">TRoot</span><span class="p">,</span> <span class="n">Product</span><span class="p">&gt;</span> <span class="n">query</span><span class="p">,</span>
</span><span class='line'>        <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="n">colors</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">colors</span> <span class="p">!=</span> <span class="k">null</span> <span class="p">&amp;&amp;</span> <span class="n">colors</span><span class="p">.</span><span class="n">Any</span><span class="p">())</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">query</span><span class="p">.</span><span class="n">Where</span><span class="p">(</span><span class="n">pr</span> <span class="p">=&gt;</span> <span class="n">pr</span><span class="p">.</span><span class="n">Color</span><span class="p">.</span><span class="n">IsIn</span><span class="p">(</span><span class="n">colors</span><span class="p">.</span><span class="n">ToArray</span><span class="p">()));</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="n">query</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">static</span> <span class="n">IQueryOver</span><span class="p">&lt;</span><span class="n">TRoot</span><span class="p">,</span> <span class="n">Product</span><span class="p">&gt;</span> <span class="n">ApplyRatingFilter</span><span class="p">&lt;</span><span class="n">TRoot</span><span class="p">&gt;(</span>
</span><span class='line'>        <span class="k">this</span> <span class="n">IQueryOver</span><span class="p">&lt;</span><span class="n">TRoot</span><span class="p">,</span> <span class="n">Product</span><span class="p">&gt;</span> <span class="n">query</span><span class="p">,</span>
</span><span class='line'>        <span class="kt">int?</span> <span class="n">minimumRating</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">minimumRating</span><span class="p">.</span><span class="n">HasValue</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">ProductReview</span> <span class="n">reviewAlias</span> <span class="p">=</span> <span class="k">null</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">query</span><span class="p">.</span><span class="n">JoinAlias</span><span class="p">(</span><span class="n">pr</span> <span class="p">=&gt;</span> <span class="n">pr</span><span class="p">.</span><span class="n">Reviews</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="n">reviewAlias</span><span class="p">)</span>
</span><span class='line'>                <span class="p">.</span><span class="n">Where</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="n">reviewAlias</span><span class="p">.</span><span class="n">Rating</span> <span class="p">&gt;=</span> <span class="n">minimumRating</span><span class="p">.</span><span class="n">Value</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="n">query</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now our extension methods will work on any QueryOver query whose <code>TSubType</code> is <code>Product</code>.</p>

<h4>Aliases may need to be passed around</h4>

<p>This is a more subtle problem and requires some understanding of how NHibernate generates SQL from QueryOver code.</p>

<p>Remember that QueryOver is built on top of the Criteria API for querying, and is really just a strongly-typed wrapper for that API using <a href="http://msdn.microsoft.com/en-us/library/bb397951.aspx">expression trees</a>.</p>

<p>What this means for aliases is that NHibernate is using the name of the variable you&rsquo;re using as an alias&mdash;parsing the expression you pass <code>.JoinAlias</code> or <code>.JoinQueryOver</code> into a <code>string</code> that&rsquo;s used with the QueryOver query&rsquo;s underlying criteria query.</p>

<p>This is easiest to see with an example.</p>

<p>Here&rsquo;s an example QueryOver query and its underlying Criteria query, as well as the SQL that&rsquo;s ultimately generated:</p>

<p><strong>QueryOver</strong>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">session</span><span class="p">.</span><span class="n">QueryOver</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;()</span>
</span><span class='line'>    <span class="p">.</span><span class="n">JoinQueryOver</span><span class="p">(</span><span class="n">pr</span> <span class="p">=&gt;</span> <span class="n">pr</span><span class="p">.</span><span class="n">Reviews</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="n">reviewAlias</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="n">SelectList</span><span class="p">(</span><span class="n">list</span> <span class="p">=&gt;</span> <span class="n">list</span>
</span><span class='line'>        <span class="p">.</span><span class="n">SelectGroup</span><span class="p">(</span><span class="n">pr</span> <span class="p">=&gt;</span> <span class="n">pr</span><span class="p">.</span><span class="n">Id</span><span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="n">SelectMax</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="n">reviewAlias</span><span class="p">.</span><span class="n">Rating</span><span class="p">))</span>
</span><span class='line'>    <span class="p">.</span><span class="n">List</span><span class="p">&lt;</span><span class="kt">object</span><span class="p">[]&gt;();</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Criteria</strong>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">session</span><span class="p">.</span><span class="n">CreateCriteria</span><span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="n">Product</span><span class="p">))</span>
</span><span class='line'>    <span class="p">.</span><span class="n">CreateCriteria</span><span class="p">(</span><span class="s">&quot;Reviews&quot;</span><span class="p">,</span> <span class="s">&quot;reviewAlias&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="n">SetProjection</span><span class="p">(</span><span class="n">Projections</span><span class="p">.</span><span class="n">ProjectionList</span><span class="p">()</span>
</span><span class='line'>        <span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="n">Projections</span><span class="p">.</span><span class="n">GroupProperty</span><span class="p">(</span><span class="s">&quot;Id&quot;</span><span class="p">))</span>
</span><span class='line'>        <span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="n">Projections</span><span class="p">.</span><span class="n">Max</span><span class="p">(</span><span class="s">&quot;reviewAlias.Rating&quot;</span><span class="p">)))</span>
</span><span class='line'>    <span class="p">.</span><span class="n">List</span><span class="p">&lt;</span><span class="kt">object</span><span class="p">[]&gt;();</span>
</span></code></pre></td></tr></table></div></figure>


<p>These generate <em>identical</em> SQL:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span>
</span><span class='line'>  <span class="n">this_</span><span class="p">.</span><span class="n">ProductID</span> <span class="k">AS</span> <span class="n">y0_</span><span class="p">,</span>
</span><span class='line'>  <span class="k">MAX</span> <span class="p">(</span><span class="n">reviewalia1_</span><span class="p">.</span><span class="n">Rating</span><span class="p">)</span> <span class="k">AS</span> <span class="n">y1_</span>
</span><span class='line'><span class="k">FROM</span>
</span><span class='line'>  <span class="n">Production</span><span class="p">.</span><span class="n">Product</span> <span class="n">this_</span>
</span><span class='line'>  <span class="k">INNER</span> <span class="k">JOIN</span> <span class="n">Production</span><span class="p">.</span><span class="n">ProductReview</span> <span class="n">reviewalia1_</span> <span class="k">ON</span>
</span><span class='line'>        <span class="n">this_</span><span class="p">.</span><span class="n">ProductID</span> <span class="o">=</span> <span class="n">reviewalia1_</span><span class="p">.</span><span class="n">ProductID</span>
</span><span class='line'><span class="k">GROUP</span> <span class="k">BY</span>
</span><span class='line'>  <span class="n">this_</span><span class="p">.</span><span class="n">ProductID</span>
</span></code></pre></td></tr></table></div></figure>


<p>The main thing to notice here is that the <em>name</em> of the alias (<code>reviewAlias</code>) we used in the QueryOver query is turned into a <code>string</code> which is ultimately used in the SQL query (<code>reviewalia1_</code>).</p>

<p>What this means is that you <strong>cannot</strong> write code like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="kt">var</span> <span class="n">query</span> <span class="p">=</span> <span class="n">session</span><span class="p">.</span><span class="n">QueryOver</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;()</span>
</span><span class='line'>    <span class="p">.</span><span class="n">JoinAlias</span><span class="p">(</span><span class="n">pr</span> <span class="p">=&gt;</span> <span class="n">pr</span><span class="p">.</span><span class="n">Reviews</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="n">reviewAlias</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">FilterQueryByRating</span><span class="p">(</span><span class="n">query</span><span class="p">,</span> <span class="n">reviewAlias</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">query</span>
</span><span class='line'>    <span class="p">.</span><span class="n">SelectList</span><span class="p">(</span><span class="n">list</span> <span class="p">=&gt;</span> <span class="n">list</span>
</span><span class='line'>        <span class="p">.</span><span class="n">SelectGroup</span><span class="p">(</span><span class="n">pr</span> <span class="p">=&gt;</span> <span class="n">pr</span><span class="p">.</span><span class="n">Id</span><span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="n">SelectMax</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="n">reviewAlias</span><span class="p">.</span><span class="n">Rating</span><span class="p">))</span>
</span><span class='line'>    <span class="p">.</span><span class="n">List</span><span class="p">&lt;</span><span class="kt">object</span><span class="p">[]&gt;();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Include only products with a rating &gt; 2   </span>
</span><span class='line'><span class="k">public</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">FilterQueryByRating</span><span class="p">(</span>
</span><span class='line'>    <span class="n">IQueryOver</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">,</span> <span class="n">Product</span><span class="p">&gt;</span> <span class="n">query</span><span class="p">,</span>
</span><span class='line'>    <span class="n">ProductReview</span> <span class="n">reviewAlias</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">query</span><span class="p">.</span><span class="n">Where</span><span class="p">(</span><span class="n">Restrictions</span><span class="p">.</span><span class="n">Gt</span><span class="p">(</span><span class="n">Projections</span><span class="p">.</span><span class="n">Property</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="n">reviewAlias</span><span class="p">.</span><span class="n">Rating</span><span class="p">),</span> <span class="m">2</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Do you see the problem? If we were to rename either <code>FilterQueryByRating</code>&rsquo;s <code>reviewAlias</code> parameter <em>or</em> the <code>reviewAlias</code> that the query is using, our query would not work. In other words, this will not work:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="c1">// Will explode:</span>
</span><span class='line'><span class="k">public</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">FilterQueryByRating</span><span class="p">(</span>
</span><span class='line'>    <span class="n">IQueryOver</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">,</span> <span class="n">Product</span><span class="p">&gt;</span> <span class="n">query</span><span class="p">,</span>
</span><span class='line'>    <span class="n">ProductReview</span> <span class="n">productReviewAlias</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">query</span><span class="p">.</span><span class="n">Where</span><span class="p">(</span><span class="n">Restrictions</span><span class="p">.</span><span class="n">Gt</span><span class="p">(</span>
</span><span class='line'>        <span class="n">Projections</span><span class="p">.</span><span class="n">Property</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="n">productReviewAlias</span><span class="p">.</span><span class="n">Rating</span><span class="p">),</span> <span class="m">2</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>You&rsquo;ll get an error stating &ldquo;could not resolve property: productReviewAlias&hellip;&rdquo;. This is because the alias we&rsquo;re using in the <code>Where</code> clause does not match the one we created when we joined to <code>ProductReview</code>.</p>

<p>This may not seem like a big deal, but you really don&rsquo;t want simply renaming an alias to cause queries to blow up. This is especially true if you&rsquo;re trying to reuse query building methods and you can&rsquo;t guarantee what variable name the user of your method will choose.</p>

<p>To solve this problem, we can create a helper method that will do something similar to what NHibernate is doing under the hood for us&mdash;combine expressions and create a projection from the resulting <code>string</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">static</span> <span class="n">PropertyProjection</span> <span class="n">BuildProjection</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;(</span>
</span><span class='line'>    <span class="n">Expression</span><span class="p">&lt;</span><span class="n">Func</span><span class="p">&lt;</span><span class="kt">object</span><span class="p">&gt;&gt;</span> <span class="n">aliasExpression</span><span class="p">,</span>
</span><span class='line'>    <span class="n">Expression</span><span class="p">&lt;</span><span class="n">Func</span><span class="p">&lt;</span><span class="n">T</span><span class="p">,</span> <span class="kt">object</span><span class="p">&gt;&gt;</span> <span class="n">propertyExpression</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">string</span> <span class="k">alias</span> <span class="p">=</span> <span class="n">ExpressionProcessor</span><span class="p">.</span><span class="n">FindMemberExpression</span><span class="p">(</span><span class="n">aliasExpression</span><span class="p">.</span><span class="n">Body</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">string</span> <span class="n">property</span> <span class="p">=</span> <span class="n">ExpressionProcessor</span><span class="p">.</span><span class="n">FindMemberExpression</span><span class="p">(</span><span class="n">propertyExpression</span><span class="p">.</span><span class="n">Body</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">Projections</span><span class="p">.</span><span class="n">Property</span><span class="p">(</span><span class="kt">string</span><span class="p">.</span><span class="n">Format</span><span class="p">(</span><span class="s">&quot;{0}.{1}&quot;</span><span class="p">,</span> <span class="k">alias</span><span class="p">,</span> <span class="n">property</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>(<code>ExpressionProcessor</code> is a class under the <code>NHibernate.Impl</code> namespace)</p>

<p>We&rsquo;ll then update our filtering function to use it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">FilterQueryByRating</span><span class="p">(</span>
</span><span class='line'>    <span class="n">IQueryOver</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">,</span> <span class="n">Product</span><span class="p">&gt;</span> <span class="n">query</span><span class="p">,</span>
</span><span class='line'>    <span class="n">Expression</span><span class="p">&lt;</span><span class="n">Func</span><span class="p">&lt;</span><span class="kt">object</span><span class="p">&gt;&gt;</span> <span class="n">productReviewAlias</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">PropertyProjection</span> <span class="n">prop</span> <span class="p">=</span> <span class="n">BuildProjection</span><span class="p">&lt;</span><span class="n">ProductReview</span><span class="p">&gt;(</span>
</span><span class='line'>        <span class="n">productReviewAlias</span><span class="p">,</span> <span class="n">pr</span> <span class="p">=&gt;</span> <span class="n">pr</span><span class="p">.</span><span class="n">Rating</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">query</span><span class="p">.</span><span class="n">Where</span><span class="p">(</span><span class="n">Restrictions</span><span class="p">.</span><span class="n">Gt</span><span class="p">(</span><span class="n">prop</span><span class="p">,</span> <span class="m">2</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally, we need to make a small tweak to our main query:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">ProductReview</span> <span class="n">reviewAlias</span> <span class="p">=</span> <span class="k">null</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">var</span> <span class="n">query</span> <span class="p">=</span> <span class="n">session</span><span class="p">.</span><span class="n">QueryOver</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;()</span>
</span><span class='line'>    <span class="p">.</span><span class="n">JoinAlias</span><span class="p">(</span><span class="n">pr</span> <span class="p">=&gt;</span> <span class="n">pr</span><span class="p">.</span><span class="n">Reviews</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="n">reviewAlias</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">FilterQueryByRating</span><span class="p">(</span><span class="n">query</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="n">reviewAlias</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">query</span>
</span><span class='line'>    <span class="p">.</span><span class="n">SelectList</span><span class="p">(</span><span class="n">list</span> <span class="p">=&gt;</span> <span class="n">list</span>
</span><span class='line'>        <span class="p">.</span><span class="n">SelectGroup</span><span class="p">(</span><span class="n">pr</span> <span class="p">=&gt;</span> <span class="n">pr</span><span class="p">.</span><span class="n">Id</span><span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="n">SelectMax</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="n">reviewAlias</span><span class="p">.</span><span class="n">Rating</span><span class="p">))</span>
</span><span class='line'>    <span class="p">.</span><span class="n">List</span><span class="p">&lt;</span><span class="kt">object</span><span class="p">[]&gt;();</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is much more robust: our filtering method doesn&rsquo;t even know what alias the query is using, and if that alias changes or someone decides to use our method in the future, everything will work fine.</p>

<h2>Summary</h2>

<p>I covered a lot in this post, but hopefully it will help you take advantage of QueryOver&rsquo;s most powerful features&mdash;building queries dynamically.</p>

<ul>
<li>Building queries with dynamic SQL can be a pain, but using QueryOver to dynamically build queries can be much easier and more maintainable.</li>
<li>Refactoring conditional restrictions and joins into extension methods can keep queries readable and refactor logic into reusable pieces.</li>
<li>To make those extension methods as robust as possible, we can make the methods generic and therefore more flexible.</li>
<li>Passing around aliases between methods when building QueryOver queries has some pitfalls and needs some special attention.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[QueryOver Series - Part 5: Materializing Results]]></title>
    <link href="http://blog.andrewawhitaker.com/blog/2014/06/28/queryover-series-part-5-materializing-results/"/>
    <updated>2014-06-28T09:47:22-05:00</updated>
    <id>http://blog.andrewawhitaker.com/blog/2014/06/28/queryover-series-part-5-materializing-results</id>
    <content type="html"><![CDATA[<p>So far I&rsquo;ve been using the <code>.List</code> or <code>.SingleOrDefault</code> methods to actually get results from a query. In this post I&rsquo;ll go into a little more detail about those methods. I&rsquo;ll also cover other ways you can materialize a query&rsquo;s results.</p>

<!-- more -->


<h3><code>SingleOrDefault&lt;T&gt;</code> and <code>List&lt;T&gt;</code></h3>

<p>These two are pretty self-explanatory. Calling <code>.List&lt;T&gt;</code> at the end of your query will immediately yield an <code>IList&lt;T&gt;</code>. For example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">IList</span><span class="p">&lt;</span><span class="n">Employee</span><span class="p">&gt;</span> <span class="n">empl</span> <span class="p">=</span> <span class="n">session</span><span class="p">.</span><span class="n">QueryOver</span><span class="p">&lt;</span><span class="n">Employee</span><span class="p">&gt;()</span>
</span><span class='line'>    <span class="p">.</span><span class="n">List</span><span class="p">&lt;</span><span class="n">Employee</span><span class="p">&gt;();</span>
</span></code></pre></td></tr></table></div></figure>


<p>Similarly, <code>SingleOrDefault&lt;T&gt;</code> will immediately give you a single item of type <code>T</code>, provided the query only returns one row. Otherwise, NHibernate will throw an exception telling you that the query did not return a unique result.</p>

<h3><code>Future&lt;T&gt;</code> and <code>FutureValue&lt;T&gt;</code></h3>

<p>These two are more interesting. <a href="http://ayende.com/blog/3979/nhibernate-futures">Ayende has discussed these in detail</a> with the Criteria API, but I don&rsquo;t think a blog series on QueryOver is really complete without mentioning them again. In NHibernate using these creates a &ldquo;MultiQuery&rdquo; or &ldquo;MultiCriteria&rdquo;, which just means that NHibernate is batching your queries into one round trip and deferring populating the results.</p>

<h4><code>Future&lt;T&gt;</code></h4>

<p>Calling <code>.Future&lt;T&gt;</code> on your query will return an <code>IEnumerable&lt;T&gt;</code> that will not be populated with results until one of the results or resultsets is needed. NHibernate will build up queries using <code>.Future&lt;T&gt;</code> or <code>.FutureValue&lt;T&gt;</code> until one of the &ldquo;future&rdquo; results are accessed.</p>

<p>When the results are processed, NHibernate will send one request to the database containing the SQL for all of the &ldquo;future&rdquo; queries and populate the results accordingly. For example, lets say we were trying to display all <code>Employee</code>s and all <code>Product</code>s on the same page. We could just write two separate queries:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="c1">// Get the list of employees first</span>
</span><span class='line'><span class="n">IList</span><span class="p">&lt;</span><span class="n">Employee</span><span class="p">&gt;</span> <span class="n">employees</span> <span class="p">=</span> <span class="n">session</span><span class="p">.</span><span class="n">QueryOver</span><span class="p">&lt;</span><span class="n">Employee</span><span class="p">&gt;()</span>
</span><span class='line'>    <span class="p">.</span><span class="n">List</span><span class="p">&lt;</span><span class="n">Employee</span><span class="p">&gt;();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Then the list of products</span>
</span><span class='line'><span class="n">IList</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;</span> <span class="n">products</span> <span class="p">=</span> <span class="n">session</span><span class="p">.</span><span class="n">QueryOver</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;()</span>
</span><span class='line'>    <span class="p">.</span><span class="n">List</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;();</span>
</span></code></pre></td></tr></table></div></figure>


<p>Which yields the following SQL:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span>
</span><span class='line'>    <span class="n">this_</span><span class="p">.</span><span class="n">BusinessEntityID</span> <span class="k">as</span> <span class="n">Business1_0_1_</span><span class="p">,</span>
</span><span class='line'>    <span class="c1">-- More employee fields</span>
</span><span class='line'><span class="k">FROM</span>
</span><span class='line'>    <span class="n">HumanResources</span><span class="p">.</span><span class="n">Employee</span> <span class="n">this_</span>
</span></code></pre></td></tr></table></div></figure>


<p>&hellip; And then a second query for the <code>Product</code>s:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span>
</span><span class='line'>    <span class="n">this_</span><span class="p">.</span><span class="n">ProductID</span> <span class="k">as</span> <span class="n">ProductID7_0_</span>
</span><span class='line'>    <span class="c1">-- More product fields</span>
</span><span class='line'><span class="k">FROM</span>
</span><span class='line'>    <span class="n">Production</span><span class="p">.</span><span class="n">Product</span> <span class="n">this_</span>
</span></code></pre></td></tr></table></div></figure>


<p>This would work fine, but NHibernate is sending two separate queries to the database when we can accomplish getting those results with only one using <code>.Future&lt;T&gt;</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="c1">// Batch the two queries together</span>
</span><span class='line'><span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">Employee</span><span class="p">&gt;</span> <span class="n">employees</span> <span class="p">=</span> <span class="n">session</span><span class="p">.</span><span class="n">QueryOver</span><span class="p">&lt;</span><span class="n">Employee</span><span class="p">&gt;()</span>
</span><span class='line'>    <span class="p">.</span><span class="n">Future</span><span class="p">&lt;</span><span class="n">Employee</span><span class="p">&gt;();</span>
</span><span class='line'>
</span><span class='line'><span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;</span> <span class="n">products</span> <span class="p">=</span> <span class="n">session</span><span class="p">.</span><span class="n">QueryOver</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;()</span>
</span><span class='line'>    <span class="p">.</span><span class="n">Future</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// A single round trip to the database is made here containing both queries</span>
</span><span class='line'><span class="kt">int</span> <span class="n">numProducts</span> <span class="p">=</span> <span class="n">products</span><span class="p">.</span><span class="n">Count</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>This generates a single database round trip with both queries when the <code>products.Count()</code> call forces NHibernate to process the <code>Product</code>s query:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="c1">-- First query:</span>
</span><span class='line'><span class="k">SELECT</span>
</span><span class='line'>    <span class="n">this_</span><span class="p">.</span><span class="n">BusinessEntityID</span> <span class="k">as</span> <span class="n">Business1_0_1_</span><span class="p">,</span>
</span><span class='line'>    <span class="c1">-- More Employee columns</span>
</span><span class='line'><span class="k">FROM</span>
</span><span class='line'>    <span class="n">HumanResources</span><span class="p">.</span><span class="n">Employee</span> <span class="n">this_</span><span class="p">;</span>
</span><span class='line'><span class="c1">-- Second query:</span>
</span><span class='line'><span class="k">SELECT</span>
</span><span class='line'>    <span class="n">this_</span><span class="p">.</span><span class="n">ProductID</span> <span class="k">as</span> <span class="n">ProductID7_0_</span><span class="p">,</span>
</span><span class='line'>    <span class="c1">-- More product columns</span>
</span><span class='line'><span class="k">FROM</span>
</span><span class='line'>    <span class="n">Production</span><span class="p">.</span><span class="n">Product</span> <span class="n">this_</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This can be hugely helpful when querying from multiple sources that don&rsquo;t depend on each other.</p>

<h4><code>FutureValue&lt;T&gt;</code></h4>

<p>The same applies for <code>.FutureValue</code>, which is a deferred version of <code>.SingleOrDefault</code>.</p>

<p>Lets say we wanted a list of all employees and the total number of products. Again, we could write two separate queries:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">IList</span><span class="p">&lt;</span><span class="n">Employee</span><span class="p">&gt;</span> <span class="n">employees</span> <span class="p">=</span> <span class="n">session</span><span class="p">.</span><span class="n">QueryOver</span><span class="p">&lt;</span><span class="n">Employee</span><span class="p">&gt;()</span>
</span><span class='line'>    <span class="p">.</span><span class="n">List</span><span class="p">&lt;</span><span class="n">Employee</span><span class="p">&gt;();</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">productsCount</span> <span class="p">=</span> <span class="n">session</span><span class="p">.</span><span class="n">QueryOver</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;()</span>
</span><span class='line'>    <span class="p">.</span><span class="n">SelectList</span><span class="p">(</span><span class="n">list</span> <span class="p">=&gt;</span> <span class="n">list</span>
</span><span class='line'>        <span class="p">.</span><span class="n">SelectCount</span><span class="p">(</span><span class="n">pr</span> <span class="p">=&gt;</span> <span class="n">pr</span><span class="p">.</span><span class="n">Id</span><span class="p">))</span>
</span><span class='line'>    <span class="p">.</span><span class="n">SingleOrDefault</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;();</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you&rsquo;d expect, this will create two queries and two round-trips to the database:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span>
</span><span class='line'>    <span class="n">this_</span><span class="p">.</span><span class="n">BusinessEntityID</span> <span class="k">as</span> <span class="n">Business1_0_1_</span><span class="p">,</span>
</span><span class='line'>    <span class="c1">-- More Employee columns</span>
</span><span class='line'><span class="k">FROM</span>
</span><span class='line'>    <span class="n">HumanResources</span><span class="p">.</span><span class="n">Employee</span> <span class="n">this_</span>
</span></code></pre></td></tr></table></div></figure>


<p>&hellip; And then the <code>Product</code>s count query:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span>
</span><span class='line'>    <span class="k">count</span><span class="p">(</span><span class="n">this_</span><span class="p">.</span><span class="n">ProductID</span><span class="p">)</span> <span class="k">as</span> <span class="n">y0_</span>
</span><span class='line'><span class="k">FROM</span>
</span><span class='line'>    <span class="n">Production</span><span class="p">.</span><span class="n">Product</span> <span class="n">this_</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can turn this into one query by using <code>Future</code> and <code>FutureValue</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="c1">// Batch the two queries together</span>
</span><span class='line'><span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">Employee</span><span class="p">&gt;</span> <span class="n">employees</span> <span class="p">=</span> <span class="n">session</span><span class="p">.</span><span class="n">QueryOver</span><span class="p">&lt;</span><span class="n">Employee</span><span class="p">&gt;()</span>
</span><span class='line'>    <span class="p">.</span><span class="n">Future</span><span class="p">&lt;</span><span class="n">Employee</span><span class="p">&gt;();</span>
</span><span class='line'>
</span><span class='line'><span class="n">IFutureValue</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;</span> <span class="n">productsCount</span> <span class="p">=</span> <span class="n">session</span><span class="p">.</span><span class="n">QueryOver</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;()</span>
</span><span class='line'>    <span class="p">.</span><span class="n">SelectList</span><span class="p">(</span><span class="n">list</span> <span class="p">=&gt;</span> <span class="n">list</span>
</span><span class='line'>        <span class="p">.</span><span class="n">SelectCount</span><span class="p">(</span><span class="n">pr</span> <span class="p">=&gt;</span> <span class="n">pr</span><span class="p">.</span><span class="n">Id</span><span class="p">))</span>
</span><span class='line'>    <span class="p">.</span><span class="n">FutureValue</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Access the &quot;Value&quot; property of IFutureValue, which will execute both queries in one round-trip</span>
</span><span class='line'><span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">productsCount</span><span class="p">.</span><span class="n">Value</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Like our previous example with <code>.Future</code>, this will generate one round-trip to the database with two queries:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="c1">-- First query:</span>
</span><span class='line'><span class="k">SELECT</span>
</span><span class='line'>    <span class="n">this_</span><span class="p">.</span><span class="n">BusinessEntityID</span> <span class="k">as</span> <span class="n">Business1_0_1_</span><span class="p">,</span>
</span><span class='line'>    <span class="c1">-- More Employee Columns</span>
</span><span class='line'><span class="k">FROM</span>
</span><span class='line'>    <span class="n">HumanResources</span><span class="p">.</span><span class="n">Employee</span> <span class="n">this_</span><span class="p">;</span>
</span><span class='line'><span class="c1">-- Second query:</span>
</span><span class='line'><span class="k">SELECT</span>
</span><span class='line'>    <span class="k">count</span><span class="p">(</span><span class="n">this_</span><span class="p">.</span><span class="n">ProductID</span><span class="p">)</span> <span class="k">as</span> <span class="n">y0_</span>
</span><span class='line'><span class="k">FROM</span>
</span><span class='line'>    <span class="n">Production</span><span class="p">.</span><span class="n">Product</span> <span class="n">this_</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note the return type of the count query. <code>IFutureValue&lt;T&gt;</code> is simply a type that allows NHibernate to give you a deferred <code>SingleOrDefault</code> result. Accessing <code>.Value</code> (just like causing the <code>IEnumerable&lt;T&gt;</code> returned by <code>.Future</code>) will cause the batched queries to execute.</p>

<p>I&rsquo;d highly recommend using <code>.Future</code> and <code>.FutureValue</code> where possible when you need to execute multiple queries at once. You&rsquo;ll save round trips to the database and therefore get results to your users faster.</p>

<h3>Summary</h3>

<p>This post covered different ways to materialize resultsets with NHibernate QueryOver.</p>

<ul>
<li><code>.SingleOrDefault</code> and <code>.List</code> immediately give you the results</li>
<li><code>.FutureValue</code> and <code>.Future</code> batch queries and defer execution until one of the results in the batch is needed</li>
<li><code>.FutureValue</code> and <code>.Future</code> use one round trip to the database instead of several, which is more efficient.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[QueryOver Series - Part 4: Transforming]]></title>
    <link href="http://blog.andrewawhitaker.com/blog/2014/06/19/queryover-series-part-4-transforming/"/>
    <updated>2014-06-19T17:51:00-05:00</updated>
    <id>http://blog.andrewawhitaker.com/blog/2014/06/19/queryover-series-part-4-transforming</id>
    <content type="html"><![CDATA[<p>You might have noticed that the last post in the series always projects each result row into an <code>object[]</code>. This might have made you wonder if there&rsquo;s a better way to get results from a QueryOver query. Well there is! It&rsquo;s called transforming.</p>

<p>In the context of an NHibernate query, a <em>transformer</em> is simply a class that transforms each row from a query into an instance of an object. NHibernate comes with several and allows you to easily create a custom transformer if you&rsquo;d like.</p>

<!-- more -->


<p>Transformers are supplied to the <code>TransformUsing</code> function on an instance of <code>IQueryOver&lt;TRoot, TSubtype&gt;</code>. For example, here&rsquo;s how you would use <code>Transformers.DistinctRootEntity</code> (which I&rsquo;ll go into more detail later about):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="kt">var</span> <span class="n">results</span> <span class="p">=</span>
</span><span class='line'>    <span class="n">session</span><span class="p">.</span><span class="n">QueryOver</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;()</span>
</span><span class='line'>        <span class="p">.</span><span class="n">TransformUsing</span><span class="p">(</span><span class="n">Transformers</span><span class="p">.</span><span class="n">DistinctRootEntity</span><span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="n">List</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;();</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Using the built-in transformers</h3>

<p>NHibernate supplies several built-in transformers in the <code>NHibernate.Transform</code> namespace. These may be all you need in your application since they cover most use cases. I&rsquo;ll go over each built-in transformer and how to use it.</p>

<h4><code>DistinctRootEntity</code></h4>

<p>This transformer works the way you&rsquo;d think it would: it transforms the query results into a list of <em>distinct</em> entities of the <em>root</em> type. What&rsquo;s the <em>root</em> type? Well if you read <a href="../../../../2014/03/12/queryover-series-part-1-why-queryover/">part 1</a>, you&rsquo;ll remember that a QueryOver query deals with two types, <code>TRoot</code> and <code>TSubType</code>. the root type is simply <code>TRoot</code>.</p>

<p>For example, here&rsquo;s a query that returns a list of all <code>Product</code>s:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="c1">// TRoot is Product</span>
</span><span class='line'><span class="n">IList</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;</span> <span class="n">results</span> <span class="p">=</span> <span class="n">session</span><span class="p">.</span><span class="n">QueryOver</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;()</span>
</span><span class='line'>    <span class="p">.</span><span class="n">TransformUsing</span><span class="p">(</span><span class="n">Transformers</span><span class="p">.</span><span class="n">DistinctRootEntity</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="n">List</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;();</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see, using <code>DistinctRootEntity</code> allows us to get a list of entities easily. This example doesn&rsquo;t address the <em>distinct</em> part of <code>DistinctRootEntity</code>. Here&rsquo;s another, more interesting example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">IList</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;</span> <span class="n">results</span> <span class="p">=</span> <span class="n">session</span><span class="p">.</span><span class="n">QueryOver</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;()</span>
</span><span class='line'>    <span class="p">.</span><span class="n">JoinQueryOver</span><span class="p">(</span><span class="n">pr</span> <span class="p">=&gt;</span> <span class="n">pr</span><span class="p">.</span><span class="n">TransactionHistory</span><span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="n">Where</span><span class="p">(</span><span class="n">th</span> <span class="p">=&gt;</span> <span class="n">th</span><span class="p">.</span><span class="n">ActualCost</span> <span class="p">&gt;</span> <span class="m">2.0</span><span class="n">M</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="n">TransformUsing</span><span class="p">(</span><span class="n">Transformers</span><span class="p">.</span><span class="n">DistinctRootEntity</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="n">List</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;();</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is more interesting because a <code>Product</code> might have many related rows in <code>TransactionHistory</code>. The join would cause each <code>Product</code> to appear as many times as it has <code>TransactionHistory</code> records, which we probably don&rsquo;t want if we&rsquo;re just trying to find all <code>Product</code>s that were ever priced over $2.00.</p>

<p>Here&rsquo;s the SQL the above query generates:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span>
</span><span class='line'>    <span class="n">this_</span><span class="p">.</span><span class="n">ProductID</span> <span class="k">as</span> <span class="n">ProductID7_1_</span><span class="p">,</span>
</span><span class='line'>    <span class="c1">-- All product columns</span>
</span><span class='line'>    <span class="n">transactio1_</span><span class="p">.</span><span class="n">TransactionID</span> <span class="k">as</span> <span class="n">Transact1_13_0_</span><span class="p">,</span>
</span><span class='line'>    <span class="c1">-- All TransactionHistory columns</span>
</span><span class='line'><span class="k">FROM</span>
</span><span class='line'>    <span class="n">Production</span><span class="p">.</span><span class="n">Product</span> <span class="n">this_</span>
</span><span class='line'><span class="k">inner</span> <span class="k">join</span>
</span><span class='line'>    <span class="n">Production</span><span class="p">.</span><span class="n">TransactionHistory</span> <span class="n">transactio1_</span>
</span><span class='line'>        <span class="k">on</span> <span class="n">this_</span><span class="p">.</span><span class="n">ProductID</span><span class="o">=</span><span class="n">transactio1_</span><span class="p">.</span><span class="n">ProductID</span>
</span><span class='line'><span class="k">WHERE</span>
</span><span class='line'>    <span class="n">transactio1_</span><span class="p">.</span><span class="n">ActualCost</span> <span class="o">&gt;</span> <span class="mi">2</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The result we  get back is a list of distinct <code>Product</code>s.</p>

<p><code>DistinctRootEntity</code> is most useful if you have a simple query in which you need instances of an entity and may or may not want to do filtering on some related entities.</p>

<h4><code>AliasToEntityMap</code></h4>

<p>This transformer allows you to transform each row of the result set into an <code>IDictionary</code> (hash table). Unfortunately it&rsquo;s not a generic <code>IDictionary</code>. The keys are strings containing the aliases you defined in the query, and the values are entities. This is best explained with an example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">TransactionHistory</span> <span class="n">historyAlias</span> <span class="p">=</span> <span class="k">null</span><span class="p">;</span>
</span><span class='line'><span class="n">Product</span> <span class="n">productAlias</span> <span class="p">=</span> <span class="k">null</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">IList</span><span class="p">&lt;</span><span class="n">IDictionary</span><span class="p">&gt;</span> <span class="n">results</span> <span class="p">=</span> <span class="n">session</span><span class="p">.</span><span class="n">QueryOver</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;(()</span> <span class="p">=&gt;</span> <span class="n">productAlias</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="n">JoinQueryOver</span><span class="p">(</span><span class="n">pr</span> <span class="p">=&gt;</span> <span class="n">pr</span><span class="p">.</span><span class="n">TransactionHistory</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="n">historyAlias</span><span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="n">Where</span><span class="p">(</span><span class="n">th</span> <span class="p">=&gt;</span> <span class="n">th</span><span class="p">.</span><span class="n">ActualCost</span> <span class="p">&gt;</span> <span class="m">2.0</span><span class="n">M</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="n">TransformUsing</span><span class="p">(</span><span class="n">Transformers</span><span class="p">.</span><span class="n">AliasToEntityMap</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="n">Take</span><span class="p">(</span><span class="m">10</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="n">List</span><span class="p">&lt;</span><span class="n">IDictionary</span><span class="p">&gt;();</span>
</span></code></pre></td></tr></table></div></figure>


<p>Each item in <code>results</code> is an <code>IDictionary</code>. This <code>IDictionary</code>&rsquo;s keys are the <em>aliases</em> we assigned while building our query. For example, if you wanted to get the first row&rsquo;s <code>TransactionHistory</code> entity, you would write:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">TransactionHistory</span> <span class="n">history</span> <span class="p">=</span> <span class="p">(</span><span class="n">TransactionHistory</span><span class="p">)</span><span class="n">results</span><span class="p">[</span><span class="m">0</span><span class="p">][</span><span class="s">&quot;historyAlias&quot;</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>This might seem a bit odd at first, but using <code>AliasToEntityMap</code> can prove useful if you need to retrieve multiple entities in a single query.</p>

<h4><code>PassThrough</code></h4>

<p>This transformer appears to be quite similar to <code>AliasToEntityMap</code> in that it generates a collection of entities for each row in the resultset. I say &ldquo;appears&rdquo; because I haven&rsquo;t had much experience with it and I cannot find much about it online. I&rsquo;ll add to this post if I come across anything interesting.</p>

<p>Anyway for a simple example it seems to place an instance of an entity from the query in a slot in an <code>object</code> array in <em>reverse</em> order from when it was added to the query. For example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">IList</span><span class="p">&lt;</span><span class="kt">object</span><span class="p">[]&gt;</span> <span class="n">results</span> <span class="p">=</span> <span class="n">session</span><span class="p">.</span><span class="n">QueryOver</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;()</span>
</span><span class='line'>    <span class="p">.</span><span class="n">JoinAlias</span><span class="p">(</span><span class="n">pr</span> <span class="p">=&gt;</span> <span class="n">pr</span><span class="p">.</span><span class="n">Reviews</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="n">reviewAlias</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="n">JoinQueryOver</span><span class="p">(</span><span class="n">pr</span> <span class="p">=&gt;</span> <span class="n">pr</span><span class="p">.</span><span class="n">TransactionHistory</span><span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="n">Where</span><span class="p">(</span><span class="n">th</span> <span class="p">=&gt;</span> <span class="n">th</span><span class="p">.</span><span class="n">ActualCost</span> <span class="p">&gt;</span> <span class="m">2.0</span><span class="n">M</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="n">TransformUsing</span><span class="p">(</span><span class="n">Transformers</span><span class="p">.</span><span class="n">PassThrough</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="n">Take</span><span class="p">(</span><span class="m">10</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="n">List</span><span class="p">&lt;</span><span class="kt">object</span><span class="p">[]&gt;();</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">foreach</span> <span class="p">(</span><span class="kt">object</span><span class="p">[]</span> <span class="n">result</span> <span class="k">in</span> <span class="n">results</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">ProductReview</span> <span class="n">review</span> <span class="p">=</span> <span class="p">(</span><span class="n">ProductReview</span><span class="p">)</span><span class="n">result</span><span class="p">[</span><span class="m">0</span><span class="p">];</span>
</span><span class='line'>    <span class="n">TransactionHistory</span> <span class="n">t</span> <span class="p">=</span> <span class="p">(</span><span class="n">TransactionHistory</span><span class="p">)</span><span class="n">result</span><span class="p">[</span><span class="m">1</span><span class="p">];</span>
</span><span class='line'>    <span class="n">Product</span> <span class="n">p</span> <span class="p">=</span> <span class="p">(</span><span class="n">Product</span><span class="p">)</span><span class="n">result</span><span class="p">[</span><span class="m">2</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see, <code>result[0]</code> is a <code>ProductReview</code>, <code>result[1]</code> is a <code>TransactionHistory</code> and <code>result[2]</code> is the <code>Product</code> itself.</p>

<h4><code>RootEntity</code></h4>

<p><code>RootEntity</code> is similar to <code>DistinctRootEntity</code> in that it projects a list of <code>TRoot</code>. The difference is that the results are <em>not</em> distinct. Therefore if you join on a related table that multiplies the root entity, you&rsquo;ll get back that entity many times for each related row. Here&rsquo;s the example from <code>DistinctRootEntity</code> again, except using <code>RootEntity</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">IList</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;</span> <span class="n">results</span> <span class="p">=</span> <span class="n">session</span><span class="p">.</span><span class="n">QueryOver</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;()</span>
</span><span class='line'>    <span class="p">.</span><span class="n">JoinQueryOver</span><span class="p">(</span><span class="n">pr</span> <span class="p">=&gt;</span> <span class="n">pr</span><span class="p">.</span><span class="n">TransactionHistory</span><span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="n">Where</span><span class="p">(</span><span class="n">th</span> <span class="p">=&gt;</span> <span class="n">th</span><span class="p">.</span><span class="n">ActualCost</span> <span class="p">&gt;</span> <span class="m">2.0</span><span class="n">M</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="n">TransformUsing</span><span class="p">(</span><span class="n">Transformers</span><span class="p">.</span><span class="n">RootEntity</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="n">List</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;();</span>
</span></code></pre></td></tr></table></div></figure>


<p>This will return any <code>Products</code> with a <code>TransactionHistory</code> that has an <code>ActualCost</code> over $2.00, but will not remove duplicate <code>Product</code> records.</p>

<h4><code>ToList</code></h4>

<p>This transformer works very similarly to not specifying a transformer at all and getting back an <code>IList&lt;object[]&gt;</code>. The difference here is that you&rsquo;ll get back an <code>IList&lt;IList&gt;</code> instead.</p>

<p>For example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">Product</span> <span class="n">productAlias</span> <span class="p">=</span> <span class="k">null</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">IList</span><span class="p">&lt;</span><span class="n">IList</span><span class="p">&gt;</span> <span class="n">results</span> <span class="p">=</span> <span class="n">session</span><span class="p">.</span><span class="n">QueryOver</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;(()</span> <span class="p">=&gt;</span> <span class="n">productAlias</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="n">JoinQueryOver</span><span class="p">(</span><span class="n">pr</span> <span class="p">=&gt;</span> <span class="n">pr</span><span class="p">.</span><span class="n">TransactionHistory</span><span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="n">Where</span><span class="p">(</span><span class="n">th</span> <span class="p">=&gt;</span> <span class="n">th</span><span class="p">.</span><span class="n">ActualCost</span> <span class="p">&gt;</span> <span class="m">2.0</span><span class="n">M</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="n">TransformUsing</span><span class="p">(</span><span class="n">Transformers</span><span class="p">.</span><span class="n">ToList</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="n">SelectList</span><span class="p">(</span><span class="n">list</span> <span class="p">=&gt;</span> <span class="n">list</span>
</span><span class='line'>        <span class="p">.</span><span class="n">Select</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="n">productAlias</span><span class="p">.</span><span class="n">Id</span><span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="n">Select</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="n">productAlias</span><span class="p">.</span><span class="n">Name</span><span class="p">)</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="n">List</span><span class="p">&lt;</span><span class="n">IList</span><span class="p">&gt;();</span>
</span><span class='line'>
</span><span class='line'><span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">results</span><span class="p">[</span><span class="m">0</span><span class="p">][</span><span class="m">0</span><span class="p">]);</span> <span class="c1">// product Id</span>
</span><span class='line'><span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">results</span><span class="p">[</span><span class="m">0</span><span class="p">][</span><span class="m">1</span><span class="p">]);</span> <span class="c1">// product Name</span>
</span></code></pre></td></tr></table></div></figure>


<h4><code>AliasToBean</code></h4>

<p>In my experience, this transformer is by far the most useful. It allows you to transform each row into an instance of a type you specify. You can project columns from different entities into properties on each instance.</p>

<p>Lets use <code>AliasToBean</code> to get a list of <code>HighestProductReviewDTO</code>s. Here&rsquo;s the definition for <code>HighestProductReviewDTO</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">HighestProductReviewDTO</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="kt">int</span> <span class="n">ProductID</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="kt">string</span> <span class="n">ProductName</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="kt">int</span> <span class="n">Rating</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="kt">string</span> <span class="n">Comments</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>NHibernate requires that the DTO have a parameterless constructor so that it can create an instance of your class for each row it retrieves.</p>

<p>We&rsquo;re going to get a list of <code>Product</code>s that have reviews, followed by some information from that <code>Product</code>&rsquo;s highest review. Here&rsquo;s what our query looks like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">IList</span><span class="p">&lt;</span><span class="n">HighestProductReviewDTO</span><span class="p">&gt;</span> <span class="n">highestReviews</span> <span class="p">=</span>
</span><span class='line'>    <span class="n">session</span><span class="p">.</span><span class="n">QueryOver</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;(()</span> <span class="p">=&gt;</span> <span class="n">productAlias</span><span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="n">JoinQueryOver</span><span class="p">(</span><span class="n">pr</span> <span class="p">=&gt;</span> <span class="n">pr</span><span class="p">.</span><span class="n">Reviews</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="n">productReviewAlias</span><span class="p">)</span>
</span><span class='line'>            <span class="p">.</span><span class="n">WithSubquery</span><span class="p">.</span><span class="n">Where</span><span class="p">(</span><span class="n">pr</span> <span class="p">=&gt;</span> <span class="n">pr</span><span class="p">.</span><span class="n">Id</span> <span class="p">==</span> <span class="n">QueryOver</span><span class="p">.</span><span class="n">Of</span><span class="p">&lt;</span><span class="n">ProductReview</span><span class="p">&gt;()</span>
</span><span class='line'>                <span class="p">.</span><span class="n">Where</span><span class="p">(</span><span class="n">rev</span> <span class="p">=&gt;</span> <span class="n">rev</span><span class="p">.</span><span class="n">Product</span><span class="p">.</span><span class="n">Id</span> <span class="p">==</span> <span class="n">productAlias</span><span class="p">.</span><span class="n">Id</span><span class="p">)</span>
</span><span class='line'>                <span class="p">.</span><span class="n">OrderBy</span><span class="p">(</span><span class="n">rev</span> <span class="p">=&gt;</span> <span class="n">rev</span><span class="p">.</span><span class="n">Rating</span><span class="p">).</span><span class="n">Desc</span><span class="p">()</span>
</span><span class='line'>                <span class="p">.</span><span class="n">Select</span><span class="p">(</span><span class="n">rev</span> <span class="p">=&gt;</span> <span class="n">rev</span><span class="p">.</span><span class="n">Id</span><span class="p">)</span>
</span><span class='line'>                <span class="p">.</span><span class="n">Take</span><span class="p">(</span><span class="m">1</span><span class="p">)</span>
</span><span class='line'>                <span class="p">.</span><span class="n">As</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;())</span>
</span><span class='line'>        <span class="p">.</span><span class="n">SelectList</span><span class="p">(</span><span class="n">list</span> <span class="p">=&gt;</span> <span class="n">list</span>
</span><span class='line'>            <span class="p">.</span><span class="n">Select</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="n">productAlias</span><span class="p">.</span><span class="n">Id</span><span class="p">).</span><span class="n">WithAlias</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="n">result</span><span class="p">.</span><span class="n">ProductID</span><span class="p">)</span>
</span><span class='line'>            <span class="p">.</span><span class="n">Select</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="n">productAlias</span><span class="p">.</span><span class="n">Name</span><span class="p">).</span><span class="n">WithAlias</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="n">result</span><span class="p">.</span><span class="n">ProductName</span><span class="p">)</span>
</span><span class='line'>            <span class="p">.</span><span class="n">Select</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="n">productReviewAlias</span><span class="p">.</span><span class="n">Rating</span><span class="p">).</span><span class="n">WithAlias</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="n">result</span><span class="p">.</span><span class="n">Rating</span><span class="p">)</span>
</span><span class='line'>            <span class="p">.</span><span class="n">Select</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="n">productReviewAlias</span><span class="p">.</span><span class="n">Comments</span><span class="p">).</span><span class="n">WithAlias</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="n">result</span><span class="p">.</span><span class="n">Comments</span><span class="p">)</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="n">TransformUsing</span><span class="p">(</span><span class="n">Transformers</span><span class="p">.</span><span class="n">AliasToBean</span><span class="p">&lt;</span><span class="n">HighestProductReviewDTO</span><span class="p">&gt;())</span>
</span><span class='line'>        <span class="p">.</span><span class="n">List</span><span class="p">&lt;</span><span class="n">HighestProductReviewDTO</span><span class="p">&gt;();</span>
</span></code></pre></td></tr></table></div></figure>


<p>Pay particular attention to the <code>.WithAlias</code> calls at the end of the <code>.Select</code> calls inside of <code>SelectList</code>. These are what tell NHibernate to associate particular column values in each row retrieved with the correct property in our DTO class.</p>

<p>In case you&rsquo;re curious, here&rsquo;s the SQL that NHibernate generated:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span>
</span><span class='line'>    <span class="n">this_</span><span class="p">.</span><span class="n">ProductID</span> <span class="k">as</span> <span class="n">y0_</span><span class="p">,</span>
</span><span class='line'>    <span class="n">this_</span><span class="p">.</span><span class="n">Name</span> <span class="k">as</span> <span class="n">y1_</span><span class="p">,</span>
</span><span class='line'>    <span class="n">productrev1_</span><span class="p">.</span><span class="n">Rating</span> <span class="k">as</span> <span class="n">y2_</span><span class="p">,</span>
</span><span class='line'>    <span class="n">productrev1_</span><span class="p">.</span><span class="n">Comments</span> <span class="k">as</span> <span class="n">y3_</span>
</span><span class='line'><span class="k">FROM</span>
</span><span class='line'>    <span class="n">Production</span><span class="p">.</span><span class="n">Product</span> <span class="n">this_</span>
</span><span class='line'><span class="k">inner</span> <span class="k">join</span>
</span><span class='line'>    <span class="n">Production</span><span class="p">.</span><span class="n">ProductReview</span> <span class="n">productrev1_</span>
</span><span class='line'>        <span class="k">on</span> <span class="n">this_</span><span class="p">.</span><span class="n">ProductID</span><span class="o">=</span><span class="n">productrev1_</span><span class="p">.</span><span class="n">ProductID</span>
</span><span class='line'><span class="k">WHERE</span>
</span><span class='line'>    <span class="n">productrev1_</span><span class="p">.</span><span class="n">ProductReviewID</span> <span class="o">=</span> <span class="p">(</span>
</span><span class='line'>        <span class="k">SELECT</span>
</span><span class='line'>            <span class="n">TOP</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span>  <span class="n">this_0_</span><span class="p">.</span><span class="n">ProductReviewID</span> <span class="k">as</span> <span class="n">y0_</span>
</span><span class='line'>        <span class="k">FROM</span>
</span><span class='line'>            <span class="n">Production</span><span class="p">.</span><span class="n">ProductReview</span> <span class="n">this_0_</span>
</span><span class='line'>        <span class="k">WHERE</span>
</span><span class='line'>            <span class="n">this_0_</span><span class="p">.</span><span class="n">ProductID</span> <span class="o">=</span> <span class="n">this_</span><span class="p">.</span><span class="n">ProductID</span>
</span><span class='line'>        <span class="k">ORDER</span> <span class="k">BY</span>
</span><span class='line'>            <span class="n">this_0_</span><span class="p">.</span><span class="n">Rating</span> <span class="k">desc</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>AliasToBean</code> is extremely useful. It allows us to specify exactly what columns we need and transform the resulting rows into instances of simple types. However it does have some limitations:</p>

<ul>
<li>The class you&rsquo;re projecting to must have a parameterless constructor</li>
<li>You cannot populate collections (e.g., if you had a class with <code>ProductID</code> and a collection of <code>ProductReviews</code> you could not do that in one step using <code>AliasToBean</code>)</li>
<li>You cannot populate full entities (e.g., <code>.Select(() =&gt; productReview.Product).WithAlias(() =&gt; result.Product)</code>)</li>
</ul>


<p>While the second limitation is unfortunate, you <em>can</em> specify a collection type in your result class and write a separate query to populate it. You can possibly even do this in one database round trip using the <code>.Future</code> method, which I&rsquo;ll talk about in a later post.</p>

<h4><code>AliasToBeanConstructor</code></h4>

<p><code>AliasToBeanConstructor</code> is similar to <code>AliasToBean</code>, except that it uses a result type&rsquo;s constructor to create new objects from result rows. Here&rsquo;s our example from above slightly modified to use <code>AliasToBeanConstructor</code> instead.</p>

<p>Here&rsquo;s our modified result class:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">HighestProductReviewDTO</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="nf">HighestProductReviewDTO</span><span class="p">(</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">productId</span><span class="p">,</span> <span class="kt">string</span> <span class="n">productName</span><span class="p">,</span> <span class="kt">int</span> <span class="n">rating</span><span class="p">,</span> <span class="kt">string</span> <span class="n">comments</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="n">ProductID</span> <span class="p">=</span> <span class="n">productId</span><span class="p">;</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="n">ProductName</span> <span class="p">=</span> <span class="n">productName</span><span class="p">;</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="n">Rating</span> <span class="p">=</span> <span class="n">rating</span><span class="p">;</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="n">Comments</span> <span class="p">=</span> <span class="n">comments</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="kt">int</span> <span class="n">ProductID</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="kt">string</span> <span class="n">ProductName</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="kt">int</span> <span class="n">Rating</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="kt">string</span> <span class="n">Comments</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And here&rsquo;s our new QueryOver query:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">IList</span><span class="p">&lt;</span><span class="n">HighestProductReviewDTO</span><span class="p">&gt;</span> <span class="n">highestReviews</span> <span class="p">=</span>
</span><span class='line'>    <span class="n">session</span><span class="p">.</span><span class="n">QueryOver</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;(()</span> <span class="p">=&gt;</span> <span class="n">productAlias</span><span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="n">JoinQueryOver</span><span class="p">(</span><span class="n">pr</span> <span class="p">=&gt;</span> <span class="n">pr</span><span class="p">.</span><span class="n">Reviews</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="n">productReviewAlias</span><span class="p">)</span>
</span><span class='line'>            <span class="p">.</span><span class="n">WithSubquery</span><span class="p">.</span><span class="n">Where</span><span class="p">(</span><span class="n">pr</span> <span class="p">=&gt;</span> <span class="n">pr</span><span class="p">.</span><span class="n">Id</span> <span class="p">==</span> <span class="n">QueryOver</span><span class="p">.</span><span class="n">Of</span><span class="p">&lt;</span><span class="n">ProductReview</span><span class="p">&gt;()</span>
</span><span class='line'>                <span class="p">.</span><span class="n">Where</span><span class="p">(</span><span class="n">rev</span> <span class="p">=&gt;</span> <span class="n">rev</span><span class="p">.</span><span class="n">Product</span><span class="p">.</span><span class="n">Id</span> <span class="p">==</span> <span class="n">productAlias</span><span class="p">.</span><span class="n">Id</span><span class="p">)</span>
</span><span class='line'>                <span class="p">.</span><span class="n">OrderBy</span><span class="p">(</span><span class="n">rev</span> <span class="p">=&gt;</span> <span class="n">rev</span><span class="p">.</span><span class="n">Rating</span><span class="p">).</span><span class="n">Desc</span><span class="p">()</span>
</span><span class='line'>                <span class="p">.</span><span class="n">Select</span><span class="p">(</span><span class="n">rev</span> <span class="p">=&gt;</span> <span class="n">rev</span><span class="p">.</span><span class="n">Id</span><span class="p">)</span>
</span><span class='line'>                <span class="p">.</span><span class="n">Take</span><span class="p">(</span><span class="m">1</span><span class="p">)</span>
</span><span class='line'>                <span class="p">.</span><span class="n">As</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;())</span>
</span><span class='line'>        <span class="p">.</span><span class="n">SelectList</span><span class="p">(</span><span class="n">list</span> <span class="p">=&gt;</span> <span class="n">list</span>
</span><span class='line'>            <span class="p">.</span><span class="n">Select</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="n">productAlias</span><span class="p">.</span><span class="n">Id</span><span class="p">)</span>
</span><span class='line'>            <span class="p">.</span><span class="n">Select</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="n">productAlias</span><span class="p">.</span><span class="n">Name</span><span class="p">)</span>
</span><span class='line'>            <span class="p">.</span><span class="n">Select</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="n">productReviewAlias</span><span class="p">.</span><span class="n">Rating</span><span class="p">)</span>
</span><span class='line'>            <span class="p">.</span><span class="n">Select</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="n">productReviewAlias</span><span class="p">.</span><span class="n">Comments</span><span class="p">)</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="n">TransformUsing</span><span class="p">(</span><span class="n">Transformers</span><span class="p">.</span><span class="n">AliasToBeanConstructor</span><span class="p">(</span>
</span><span class='line'>            <span class="k">typeof</span><span class="p">(</span><span class="n">HighestProductReviewDTO</span><span class="p">).</span><span class="n">GetConstructors</span><span class="p">().</span><span class="n">First</span><span class="p">()))</span>
</span><span class='line'>        <span class="p">.</span><span class="n">List</span><span class="p">&lt;</span><span class="n">HighestProductReviewDTO</span><span class="p">&gt;();</span>
</span></code></pre></td></tr></table></div></figure>


<p>We&rsquo;re passing <a href="http://msdn.microsoft.com/en-us/library/system.reflection.constructorinfo(v=vs.110).aspx"><code>ConstructorInfo</code></a> to <code>AliasToBeanConstructor</code> which we get using <code>GetConstructors</code>. NHibernate calls our constructor with the column values we&rsquo;re retrieving with our <code>SelectList</code>. Note that <em>all</em> items in the <code>SelectList</code> are passed to the constructor in the order you add them.</p>

<h3>Creating your own transformer</h3>

<p>The built in transformers are great, but if you need your own result transformer, that&rsquo;s possible too.</p>

<p>For example, let&rsquo;s say we want to call a callback function every time a row is transformed. We could also iterate over our results after retrieving them, but this gives us a way to apply any modifications we might want while we&rsquo;re transforming the row. Here&rsquo;s our new transformer class:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="c1">/// &lt;summary&gt;</span>
</span><span class='line'><span class="c1">/// A result transformer that calls a callback after successfully transforming a result row </span>
</span><span class='line'><span class="c1">/// into an instance of T</span>
</span><span class='line'><span class="c1">/// &lt;/summary&gt;</span>
</span><span class='line'><span class="c1">/// &lt;typeparam name=&quot;T&quot;&gt;The result type&lt;/typeparam&gt;</span>
</span><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">AliasToBeanWithCallbackTransformer</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="p">:</span> <span class="n">IResultTransformer</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">private</span> <span class="k">readonly</span> <span class="n">AliasToBeanResultTransformer</span> <span class="n">aliasToBeanTransformer</span><span class="p">;</span>
</span><span class='line'>    <span class="k">private</span> <span class="k">readonly</span> <span class="n">Action</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="n">callback</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="nf">AliasToBeanWithCallbackTransformer</span><span class="p">(</span><span class="n">Action</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="n">callback</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="n">aliasToBeanTransformer</span> <span class="p">=</span> <span class="k">new</span> <span class="n">AliasToBeanResultTransformer</span><span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="n">T</span><span class="p">));</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="n">callback</span> <span class="p">=</span> <span class="n">callback</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="n">IList</span> <span class="nf">TransformList</span><span class="p">(</span><span class="n">IList</span> <span class="n">collection</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="n">aliasToBeanTransformer</span><span class="p">.</span><span class="n">TransformList</span><span class="p">(</span><span class="n">collection</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="kt">object</span> <span class="nf">TransformTuple</span><span class="p">(</span><span class="kt">object</span><span class="p">[]</span> <span class="n">tuple</span><span class="p">,</span> <span class="kt">string</span><span class="p">[]</span> <span class="n">aliases</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="kt">object</span> <span class="n">result</span> <span class="p">=</span> <span class="k">this</span><span class="p">.</span><span class="n">aliasToBeanTransformer</span><span class="p">.</span><span class="n">TransformTuple</span><span class="p">(</span><span class="n">tuple</span><span class="p">,</span> <span class="n">aliases</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Call the callback before returning the result.</span>
</span><span class='line'>        <span class="n">callback</span><span class="p">((</span><span class="n">T</span><span class="p">)</span><span class="n">result</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this example, all I&rsquo;ve done is wrap <code>AliasToBeanResultTransformer</code> in a class that calls the callback the user specifies after calling <code>AliasToBeanResultTransformer</code>&rsquo;s <code>TransformTuple</code> method. I&rsquo;ll use this transformer in an example that retrieves product review information but with an added property, <code>DateRetrieved</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">ProductReviewDTO</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="kt">int</span> <span class="n">ProductReviewID</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="kt">int</span> <span class="n">Rating</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="kt">string</span> <span class="n">Comments</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="n">DateTime</span> <span class="n">DateRetrieved</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can use the transformer to assign <code>DateRetrieved</code> after creating a new <code>ProductReviewDTO</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">DateTime</span> <span class="n">dateRetrieved</span> <span class="p">=</span> <span class="n">DateTime</span><span class="p">.</span><span class="n">Now</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">IList</span><span class="p">&lt;</span><span class="n">ProductReviewDTO</span><span class="p">&gt;</span> <span class="n">highestReviews</span> <span class="p">=</span>
</span><span class='line'>    <span class="n">session</span><span class="p">.</span><span class="n">QueryOver</span><span class="p">&lt;</span><span class="n">ProductReview</span><span class="p">&gt;()</span>
</span><span class='line'>        <span class="p">.</span><span class="n">SelectList</span><span class="p">(</span><span class="n">list</span> <span class="p">=&gt;</span> <span class="n">list</span>
</span><span class='line'>            <span class="p">.</span><span class="n">Select</span><span class="p">(</span><span class="n">pr</span> <span class="p">=&gt;</span> <span class="n">pr</span><span class="p">.</span><span class="n">Comments</span><span class="p">).</span><span class="n">WithAlias</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="n">result</span><span class="p">.</span><span class="n">Comments</span><span class="p">)</span>
</span><span class='line'>            <span class="p">.</span><span class="n">Select</span><span class="p">(</span><span class="n">pr</span> <span class="p">=&gt;</span> <span class="n">pr</span><span class="p">.</span><span class="n">Id</span><span class="p">).</span><span class="n">WithAlias</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="n">result</span><span class="p">.</span><span class="n">ProductReviewID</span><span class="p">)</span>
</span><span class='line'>            <span class="p">.</span><span class="n">Select</span><span class="p">(</span><span class="n">pr</span> <span class="p">=&gt;</span> <span class="n">pr</span><span class="p">.</span><span class="n">Rating</span><span class="p">).</span><span class="n">WithAlias</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="n">result</span><span class="p">.</span><span class="n">Rating</span><span class="p">)</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>        <span class="c1">// Assign &quot;DateRetrieved correctly:</span>
</span><span class='line'>        <span class="p">.</span><span class="n">TransformUsing</span><span class="p">(</span><span class="k">new</span> <span class="n">AliasToBeanWithCallbackTransformer</span><span class="p">&lt;</span><span class="n">ProductReviewDTO</span><span class="p">&gt;(</span>
</span><span class='line'>            <span class="n">hp</span> <span class="p">=&gt;</span> <span class="n">hp</span><span class="p">.</span><span class="n">DateRetrieved</span> <span class="p">=</span> <span class="n">dateRetrieved</span><span class="p">))</span>
</span><span class='line'>        <span class="p">.</span><span class="n">Take</span><span class="p">(</span><span class="m">10</span><span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="n">List</span><span class="p">&lt;</span><span class="n">ProductReviewDTO</span><span class="p">&gt;();</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is a simple example, but it should demonstrate how easy it is to extend the built in transformers. It would be nice if we could subclass the built in transformers, but unfortunately the methods we would need to override are not marked <code>virtual</code>.</p>

<p>A good place to look for how to write a transformer is the <a href="https://github.com/nhibernate/nhibernate-core/tree/master/src/NHibernate/Transform">NHibernate source code itself</a>.</p>

<h3>Summary</h3>

<p>I covered a lot in this post, but I was aiming to be comprehensive with each transformer type. This should enable you to effectively use the built in transformers and create your own if you need to.</p>

<ul>
<li>There are several built in result transformers in the <code>NHibernate.Transform</code> namespace.</li>
<li><code>DistinctRootEntity</code> and <code>RootEntity</code> retrieve a list of the &ldquo;root&rdquo; of the QueryOver query</li>
<li><code>AliasToEntityMap</code> and <code>PassThrough</code> retrieve the entities present in the QueryOver query in an <code>IDictionary</code> and <code>object[]</code>, respectively.</li>
<li><code>AliasToBean</code> and <code>AliasToBeanConstructor</code> are powerful transformers that allow you to create a list of instances of a type you specify.</li>
<li>You can create your own result transformer pretty easily to suit your needs.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[QueryOver Series - Part 3: Selecting]]></title>
    <link href="http://blog.andrewawhitaker.com/blog/2014/03/22/queryover-series-part-3-selecting-and-transforming/"/>
    <updated>2014-03-22T10:01:46-05:00</updated>
    <id>http://blog.andrewawhitaker.com/blog/2014/03/22/queryover-series-part-3-selecting-and-transforming</id>
    <content type="html"><![CDATA[<p>In this post I&rsquo;ll go over building the <code>SELECT</code> statement with NHibernate QueryOver. I&rsquo;ll also cover the different ways you can actually get a result back from your query.</p>

<!-- more -->


<h3>Selecting a single property</h3>

<p>In the simplest case, you&rsquo;ll want to select a single column from a single row. For example, if you wanted to retrieve a single <code>Product</code>&rsquo;s <code>Name</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="kt">string</span> <span class="n">name</span> <span class="p">=</span> <span class="n">session</span><span class="p">.</span><span class="n">QueryOver</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;()</span>
</span><span class='line'>    <span class="p">.</span><span class="n">Where</span><span class="p">(</span><span class="n">p</span> <span class="p">=&gt;</span> <span class="n">p</span><span class="p">.</span><span class="n">Id</span> <span class="p">==</span> <span class="m">1</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="n">Select</span><span class="p">(</span><span class="n">p</span> <span class="p">=&gt;</span> <span class="n">p</span><span class="p">.</span><span class="n">Name</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="n">SingleOrDefault</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;();</span>
</span></code></pre></td></tr></table></div></figure>


<p>Which yields the following SQL:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span>
</span><span class='line'>    <span class="n">this_</span><span class="p">.</span><span class="n">Name</span> <span class="k">as</span> <span class="n">y0_</span>
</span><span class='line'><span class="k">FROM</span>
</span><span class='line'>    <span class="n">Production</span><span class="p">.</span><span class="n">Product</span> <span class="n">this_</span>
</span><span class='line'><span class="k">WHERE</span>
</span><span class='line'>    <span class="n">this_</span><span class="p">.</span><span class="n">ProductID</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that if your query actually returns more than one result, NHibernate will throw an exception, letting you know that the query did not return a unique result.</p>

<p>Similarly, if you want to select a list of single properties, say the <code>Name</code> of every <code>Product</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">IList</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="n">names</span> <span class="p">=</span> <span class="n">session</span><span class="p">.</span><span class="n">QueryOver</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;()</span>
</span><span class='line'>    <span class="p">.</span><span class="n">Select</span><span class="p">(</span><span class="n">p</span> <span class="p">=&gt;</span> <span class="n">p</span><span class="p">.</span><span class="n">Name</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="n">List</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;();</span>
</span></code></pre></td></tr></table></div></figure>


<p>Generates:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span>
</span><span class='line'>    <span class="n">this_</span><span class="p">.</span><span class="n">Name</span> <span class="k">as</span> <span class="n">y0_</span>
</span><span class='line'><span class="k">FROM</span>
</span><span class='line'>    <span class="n">Production</span><span class="p">.</span><span class="n">Product</span> <span class="n">this_</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Selecting multiple properties</h3>

<p>Most of the time you won&rsquo;t want to select just one column, you&rsquo;ll want to build a whole result set. You have a few options in this area:</p>

<h4>Using <code>SelectList</code></h4>

<p><code>SelectList</code> is one way to specify a list of properties you&rsquo;d like to select. Here&rsquo;s a simple example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">IList</span><span class="p">&lt;</span><span class="kt">object</span><span class="p">[]&gt;</span> <span class="n">productInformation</span> <span class="p">=</span> <span class="n">session</span><span class="p">.</span><span class="n">QueryOver</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;()</span>
</span><span class='line'>    <span class="p">.</span><span class="n">SelectList</span><span class="p">(</span><span class="n">list</span> <span class="p">=&gt;</span> <span class="n">list</span>
</span><span class='line'>        <span class="p">.</span><span class="n">Select</span><span class="p">(</span><span class="n">p</span> <span class="p">=&gt;</span> <span class="n">p</span><span class="p">.</span><span class="n">Id</span><span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="n">Select</span><span class="p">(</span><span class="n">p</span> <span class="p">=&gt;</span> <span class="n">p</span><span class="p">.</span><span class="n">Name</span><span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="n">Select</span><span class="p">(</span><span class="n">p</span> <span class="p">=&gt;</span> <span class="n">p</span><span class="p">.</span><span class="n">StandardCost</span><span class="p">)</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="n">List</span><span class="p">&lt;</span><span class="kt">object</span><span class="p">[]&gt;();</span>
</span></code></pre></td></tr></table></div></figure>


<p>This generates the SQL you&rsquo;d expect:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span>
</span><span class='line'>    <span class="n">this_</span><span class="p">.</span><span class="n">ProductID</span> <span class="k">as</span> <span class="n">y0_</span><span class="p">,</span>
</span><span class='line'>    <span class="n">this_</span><span class="p">.</span><span class="n">Name</span> <span class="k">as</span> <span class="n">y1_</span><span class="p">,</span>
</span><span class='line'>    <span class="n">this_</span><span class="p">.</span><span class="n">StandardCost</span> <span class="k">as</span> <span class="n">y2_</span>
</span><span class='line'><span class="k">FROM</span>
</span><span class='line'>    <span class="n">Production</span><span class="p">.</span><span class="n">Product</span> <span class="n">this_</span>
</span></code></pre></td></tr></table></div></figure>


<p>Those are the basics of using <code>SelectList</code>. There are some cool things you can do with <code>SelectList</code> to build <code>SELECT</code> clauses dynamically.</p>

<p><code>SelectList</code> accepts a <code>QueryOverProjectionBuilder&lt;TRoot&gt;</code>. We can take advantage of QueryOver&rsquo;s dynamic nature to dynamically build a select list.</p>

<p>One way to do this is to create a method that accepts a <code>QueryOverProjectionBuilder&lt;TRoot&gt;</code> and has the same return type. To expand on the <code>Product</code> example above:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">static</span> <span class="n">QueryOverProjectionBuilder</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;</span> <span class="n">BuildSelectList</span><span class="p">(</span>
</span><span class='line'>    <span class="n">QueryOverProjectionBuilder</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;</span> <span class="n">list</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">bool</span> <span class="n">getName</span> <span class="p">=</span> <span class="cm">/* some condition */</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">getName</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">list</span><span class="p">.</span><span class="n">Select</span><span class="p">(</span><span class="n">p</span> <span class="p">=&gt;</span> <span class="n">p</span><span class="p">.</span><span class="n">Name</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">list</span>
</span><span class='line'>        <span class="p">.</span><span class="n">Select</span><span class="p">(</span><span class="n">p</span> <span class="p">=&gt;</span> <span class="n">p</span><span class="p">.</span><span class="n">Id</span><span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="n">Select</span><span class="p">(</span><span class="n">p</span> <span class="p">=&gt;</span> <span class="n">p</span><span class="p">.</span><span class="n">StandardCost</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">list</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can then call the method directly from <code>SelectList</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">IList</span><span class="p">&lt;</span><span class="kt">object</span><span class="p">[]&gt;</span> <span class="n">names</span> <span class="p">=</span> <span class="n">session</span><span class="p">.</span><span class="n">QueryOver</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;()</span>
</span><span class='line'>    <span class="p">.</span><span class="n">SelectList</span><span class="p">(</span><span class="n">BuildSelectList</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="n">List</span><span class="p">&lt;</span><span class="kt">object</span><span class="p">[]&gt;();</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Using <code>Projections.ProjectionList()</code></h4>

<p>Another way to build a <code>SELECT</code> clause is using <code>Projections.ProjectionList()</code>. You can pass a <code>ProjectionList</code> to the <code>.Select</code> method:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">Product</span> <span class="n">productAlias</span> <span class="p">=</span> <span class="k">null</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">session</span><span class="p">.</span><span class="n">QueryOver</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;(()</span> <span class="p">=&gt;</span> <span class="n">productAlias</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="n">Select</span><span class="p">(</span><span class="n">Projections</span><span class="p">.</span><span class="n">ProjectionList</span><span class="p">()</span>
</span><span class='line'>        <span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="n">Projections</span><span class="p">.</span><span class="n">Property</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="n">productAlias</span><span class="p">.</span><span class="n">Id</span><span class="p">))</span>
</span><span class='line'>        <span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="n">Projections</span><span class="p">.</span><span class="n">Property</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="n">productAlias</span><span class="p">.</span><span class="n">Name</span><span class="p">))</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="n">List</span><span class="p">&lt;</span><span class="kt">object</span><span class="p">[]&gt;();</span>
</span></code></pre></td></tr></table></div></figure>


<p>This generates the following SQL:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span>
</span><span class='line'>    <span class="n">this_</span><span class="p">.</span><span class="n">ProductID</span> <span class="k">as</span> <span class="n">y0_</span><span class="p">,</span>
</span><span class='line'>    <span class="n">this_</span><span class="p">.</span><span class="n">Name</span> <span class="k">as</span> <span class="n">y1_</span>
</span><span class='line'><span class="k">FROM</span>
</span><span class='line'>    <span class="n">Production</span><span class="p">.</span><span class="n">Product</span> <span class="n">this_</span>
</span></code></pre></td></tr></table></div></figure>


<p>It&rsquo;s also easy to generate dynamic <code>SELECT</code> clauses with <code>ProjectionList</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">Product</span> <span class="n">productAlias</span> <span class="p">=</span> <span class="k">null</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">ProjectionList</span> <span class="n">projectionList</span> <span class="p">=</span> <span class="n">Projections</span><span class="p">.</span><span class="n">ProjectionList</span><span class="p">()</span>
</span><span class='line'>    <span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="n">Projections</span><span class="p">.</span><span class="n">Property</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="n">productAlias</span><span class="p">.</span><span class="n">Id</span><span class="p">))</span>
</span><span class='line'>    <span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="n">Projections</span><span class="p">.</span><span class="n">Property</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="n">productAlias</span><span class="p">.</span><span class="n">StandardCost</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'><span class="kt">bool</span> <span class="n">getName</span> <span class="p">=</span> <span class="k">true</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">getName</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">projectionList</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="n">Projections</span><span class="p">.</span><span class="n">Property</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="n">productAlias</span><span class="p">.</span><span class="n">Name</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">session</span><span class="p">.</span><span class="n">QueryOver</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;(()</span> <span class="p">=&gt;</span> <span class="n">productAlias</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="n">Select</span><span class="p">(</span><span class="n">projectionList</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="n">List</span><span class="p">&lt;</span><span class="kt">object</span><span class="p">[]&gt;();</span>
</span></code></pre></td></tr></table></div></figure>


<p>I think if you&rsquo;re dynamically building the <code>SELECT</code> clause, <code>Projections.ProjectionList</code> is actually cleaner, due to the way you can easily build it outside of the query itself.</p>

<h3>Aggregates</h3>

<p>So far I&rsquo;ve looked at building simple <code>SELECT</code>s. Now I&rsquo;ll look at using aggregate functions.</p>

<p>In the simplest cases, using <code>SelectList</code> along with <code>SelectGroup</code> and the aggregate function you want will get the job done.</p>

<p>For example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">session</span><span class="p">.</span><span class="n">QueryOver</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;()</span>
</span><span class='line'>    <span class="p">.</span><span class="n">JoinQueryOver</span><span class="p">(</span><span class="n">pr</span> <span class="p">=&gt;</span> <span class="n">pr</span><span class="p">.</span><span class="n">TransactionHistory</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="n">transactionHistoryAlias</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="n">SelectList</span><span class="p">(</span><span class="n">list</span> <span class="p">=&gt;</span> <span class="n">list</span>
</span><span class='line'>        <span class="p">.</span><span class="n">SelectGroup</span><span class="p">(</span><span class="n">pr</span> <span class="p">=&gt;</span> <span class="n">pr</span><span class="p">.</span><span class="n">Id</span><span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="n">SelectCount</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="n">transactionHistoryAlias</span><span class="p">.</span><span class="n">Id</span><span class="p">)</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="n">List</span><span class="p">&lt;</span><span class="kt">object</span><span class="p">[]&gt;();</span>
</span></code></pre></td></tr></table></div></figure>


<p>Will generate:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span>
</span><span class='line'>    <span class="n">this_</span><span class="p">.</span><span class="n">ProductID</span> <span class="k">as</span> <span class="n">y0_</span><span class="p">,</span>
</span><span class='line'>    <span class="k">count</span><span class="p">(</span><span class="n">transactio1_</span><span class="p">.</span><span class="n">TransactionID</span><span class="p">)</span> <span class="k">as</span> <span class="n">y1_</span>
</span><span class='line'><span class="k">FROM</span>
</span><span class='line'>    <span class="n">Production</span><span class="p">.</span><span class="n">Product</span> <span class="n">this_</span>
</span><span class='line'><span class="k">inner</span> <span class="k">join</span>
</span><span class='line'>    <span class="n">Production</span><span class="p">.</span><span class="n">TransactionHistory</span> <span class="n">transactio1_</span>
</span><span class='line'>        <span class="k">on</span> <span class="n">this_</span><span class="p">.</span><span class="n">ProductID</span><span class="o">=</span><span class="n">transactio1_</span><span class="p">.</span><span class="n">ProductID</span>
</span><span class='line'><span class="k">GROUP</span> <span class="k">BY</span>
</span><span class='line'>    <span class="n">this_</span><span class="p">.</span><span class="n">ProductID</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can call <code>SelectGroup</code> multiple times to add more columns to group on. You&rsquo;ll notice that <code>.SelectGroup</code> adds a column to the <code>GROUP BY</code> clause as well as the <code>SELECT</code> clause.</p>

<p>You can also add a <code>HAVING</code> clause, although it is <em>not</em> intuitive at all:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="kt">var</span> <span class="n">results</span> <span class="p">=</span> <span class="n">session</span><span class="p">.</span><span class="n">QueryOver</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;()</span>
</span><span class='line'>    <span class="p">.</span><span class="n">JoinQueryOver</span><span class="p">(</span><span class="n">pr</span> <span class="p">=&gt;</span> <span class="n">pr</span><span class="p">.</span><span class="n">TransactionHistory</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="n">transactionHistoryAlias</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="n">SelectList</span><span class="p">(</span><span class="n">list</span> <span class="p">=&gt;</span> <span class="n">list</span>
</span><span class='line'>        <span class="p">.</span><span class="n">SelectGroup</span><span class="p">(</span><span class="n">pr</span> <span class="p">=&gt;</span> <span class="n">pr</span><span class="p">.</span><span class="n">Id</span><span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="n">SelectGroup</span><span class="p">(</span><span class="n">pr</span> <span class="p">=&gt;</span> <span class="n">pr</span><span class="p">.</span><span class="n">Name</span><span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="n">SelectCount</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="n">transactionHistoryAlias</span><span class="p">.</span><span class="n">Id</span><span class="p">)</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>    <span class="cm">/* Generates a HAVING clause: */</span>
</span><span class='line'>    <span class="p">.</span><span class="n">Where</span><span class="p">(</span><span class="n">Restrictions</span><span class="p">.</span><span class="n">Gt</span><span class="p">(</span>
</span><span class='line'>        <span class="n">Projections</span><span class="p">.</span><span class="n">Count</span><span class="p">(</span>
</span><span class='line'>            <span class="n">Projections</span><span class="p">.</span><span class="n">Property</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="n">transactionHistoryAlias</span><span class="p">.</span><span class="n">Id</span><span class="p">)),</span> <span class="m">5</span><span class="p">))</span>
</span><span class='line'>    <span class="p">.</span><span class="n">List</span><span class="p">&lt;</span><span class="kt">object</span><span class="p">[]&gt;();</span>
</span></code></pre></td></tr></table></div></figure>


<p>This generates the following SQL:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span>
</span><span class='line'>    <span class="n">this_</span><span class="p">.</span><span class="n">ProductID</span> <span class="k">as</span> <span class="n">y0_</span><span class="p">,</span>
</span><span class='line'>    <span class="n">this_</span><span class="p">.</span><span class="n">Name</span> <span class="k">as</span> <span class="n">y1_</span><span class="p">,</span>
</span><span class='line'>    <span class="k">count</span><span class="p">(</span><span class="n">transactio1_</span><span class="p">.</span><span class="n">TransactionID</span><span class="p">)</span> <span class="k">as</span> <span class="n">y2_</span>
</span><span class='line'><span class="k">FROM</span>
</span><span class='line'>    <span class="n">Production</span><span class="p">.</span><span class="n">Product</span> <span class="n">this_</span>
</span><span class='line'><span class="k">inner</span> <span class="k">join</span>
</span><span class='line'>    <span class="n">Production</span><span class="p">.</span><span class="n">TransactionHistory</span> <span class="n">transactio1_</span>
</span><span class='line'>        <span class="k">on</span> <span class="n">this_</span><span class="p">.</span><span class="n">ProductID</span><span class="o">=</span><span class="n">transactio1_</span><span class="p">.</span><span class="n">ProductID</span>
</span><span class='line'><span class="k">GROUP</span> <span class="k">BY</span>
</span><span class='line'>    <span class="n">this_</span><span class="p">.</span><span class="n">ProductID</span><span class="p">,</span>
</span><span class='line'>    <span class="n">this_</span><span class="p">.</span><span class="n">Name</span>
</span><span class='line'><span class="k">HAVING</span>
</span><span class='line'>    <span class="k">count</span><span class="p">(</span><span class="n">transactio1_</span><span class="p">.</span><span class="n">TransactionID</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">5</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Subqueries</h3>

<p>There are several ways to create subqueries. You can create a correlated subquery by creating an alias in the outer query and referencing it in the other query. Here&rsquo;s an example using <code>SelectList</code> and <code>SelectSubQuery</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="kt">var</span> <span class="n">results</span> <span class="p">=</span> <span class="n">session</span><span class="p">.</span><span class="n">QueryOver</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;(()</span> <span class="p">=&gt;</span> <span class="n">productAlias</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="n">SelectList</span><span class="p">(</span><span class="n">list</span> <span class="p">=&gt;</span> <span class="n">list</span>
</span><span class='line'>        <span class="p">.</span><span class="n">Select</span><span class="p">(</span><span class="n">pr</span> <span class="p">=&gt;</span> <span class="n">pr</span><span class="p">.</span><span class="n">Id</span><span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="n">SelectSubQuery</span><span class="p">(</span>
</span><span class='line'>            <span class="n">QueryOver</span><span class="p">.</span><span class="n">Of</span><span class="p">&lt;</span><span class="n">TransactionHistory</span><span class="p">&gt;()</span>
</span><span class='line'>                <span class="c1">// Creates a correlated subquery</span>
</span><span class='line'>                <span class="p">.</span><span class="n">Where</span><span class="p">(</span><span class="n">tx</span> <span class="p">=&gt;</span> <span class="n">tx</span><span class="p">.</span><span class="n">Product</span><span class="p">.</span><span class="n">Id</span> <span class="p">==</span> <span class="n">productAlias</span><span class="p">.</span><span class="n">Id</span><span class="p">)</span>
</span><span class='line'>                <span class="p">.</span><span class="n">OrderBy</span><span class="p">(</span><span class="n">tx</span> <span class="p">=&gt;</span> <span class="n">tx</span><span class="p">.</span><span class="n">TransactionDate</span><span class="p">).</span><span class="n">Asc</span>
</span><span class='line'>                <span class="p">.</span><span class="n">Select</span><span class="p">(</span><span class="n">tx</span> <span class="p">=&gt;</span> <span class="n">tx</span><span class="p">.</span><span class="n">TransactionDate</span><span class="p">)</span>
</span><span class='line'>                <span class="p">.</span><span class="n">Take</span><span class="p">(</span><span class="m">1</span><span class="p">)</span>
</span><span class='line'>            <span class="p">)</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="n">List</span><span class="p">&lt;</span><span class="kt">object</span><span class="p">[]&gt;();</span>
</span></code></pre></td></tr></table></div></figure>


<p>Which generates:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span>
</span><span class='line'>   <span class="n">this_</span><span class="p">.</span><span class="n">ProductID</span> <span class="k">as</span> <span class="n">y0_</span><span class="p">,</span>
</span><span class='line'>   <span class="p">(</span><span class="k">SELECT</span>
</span><span class='line'>       <span class="n">TOP</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span>  <span class="n">this_0_</span><span class="p">.</span><span class="n">TransactionDate</span> <span class="k">as</span> <span class="n">y0_</span>
</span><span class='line'>   <span class="k">FROM</span>
</span><span class='line'>       <span class="n">Production</span><span class="p">.</span><span class="n">TransactionHistory</span> <span class="n">this_0_</span>
</span><span class='line'>   <span class="k">WHERE</span>
</span><span class='line'>       <span class="n">this_0_</span><span class="p">.</span><span class="n">ProductID</span> <span class="o">=</span> <span class="n">this_</span><span class="p">.</span><span class="n">ProductID</span>
</span><span class='line'>   <span class="k">ORDER</span> <span class="k">BY</span>
</span><span class='line'>       <span class="n">this_0_</span><span class="p">.</span><span class="n">TransactionDate</span> <span class="k">asc</span><span class="p">)</span> <span class="k">as</span> <span class="n">y1_</span>
</span><span class='line'><span class="k">FROM</span>
</span><span class='line'>   <span class="n">Production</span><span class="p">.</span><span class="n">Product</span> <span class="n">this_</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>In general, if you can&rsquo;t find a method on <code>QueryOverProjectionBuilder&lt;TRoot&gt;</code> using <code>.SelectList</code>, you can drop back into criteria methods on the <code>Projections</code> class. For example, say you want to use a case statement in your <code>SELECT</code> clause. You can use <code>Projections.Conditional</code> for that:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="kt">var</span> <span class="n">results</span> <span class="p">=</span> <span class="n">session</span><span class="p">.</span><span class="n">QueryOver</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;(()</span> <span class="p">=&gt;</span> <span class="n">productAlias</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="n">JoinQueryOver</span><span class="p">(</span><span class="n">pr</span> <span class="p">=&gt;</span> <span class="n">pr</span><span class="p">.</span><span class="n">TransactionHistory</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="n">transactionHistoryAlias</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="n">SelectList</span><span class="p">(</span><span class="n">list</span> <span class="p">=&gt;</span> <span class="n">list</span>
</span><span class='line'>        <span class="p">.</span><span class="n">Select</span><span class="p">(</span><span class="n">pr</span> <span class="p">=&gt;</span> <span class="n">pr</span><span class="p">.</span><span class="n">Id</span><span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="n">Select</span><span class="p">(</span><span class="n">Projections</span><span class="p">.</span><span class="n">Conditional</span><span class="p">(</span>
</span><span class='line'>            <span class="n">Restrictions</span><span class="p">.</span><span class="n">Gt</span><span class="p">(</span>
</span><span class='line'>                <span class="n">Projections</span><span class="p">.</span><span class="n">Property</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="n">transactionHistoryAlias</span><span class="p">.</span><span class="n">Quantity</span><span class="p">),</span> <span class="m">5</span><span class="p">),</span>
</span><span class='line'>            <span class="n">Projections</span><span class="p">.</span><span class="n">Constant</span><span class="p">(</span><span class="k">true</span><span class="p">),</span>
</span><span class='line'>            <span class="n">Projections</span><span class="p">.</span><span class="n">Constant</span><span class="p">(</span><span class="k">false</span><span class="p">)</span>
</span><span class='line'>    <span class="p">)))</span>
</span><span class='line'>    <span class="p">.</span><span class="n">List</span><span class="p">&lt;</span><span class="kt">object</span><span class="p">[]&gt;();</span>
</span></code></pre></td></tr></table></div></figure>


<p>Which generates:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span>
</span><span class='line'>    <span class="n">this_</span><span class="p">.</span><span class="n">ProductID</span> <span class="k">as</span> <span class="n">y0_</span><span class="p">,</span>
</span><span class='line'>    <span class="p">(</span><span class="k">case</span>
</span><span class='line'>        <span class="k">when</span> <span class="n">transactio1_</span><span class="p">.</span><span class="n">Quantity</span> <span class="o">&gt;</span> <span class="mi">5</span> <span class="k">then</span> <span class="s1">&#39;True&#39;</span>
</span><span class='line'>        <span class="k">else</span> <span class="s1">&#39;False&#39;</span>
</span><span class='line'>    <span class="k">end</span><span class="p">)</span> <span class="k">as</span> <span class="n">y1_</span>
</span><span class='line'><span class="k">FROM</span>
</span><span class='line'>    <span class="n">Production</span><span class="p">.</span><span class="n">Product</span> <span class="n">this_</span>
</span><span class='line'><span class="k">inner</span> <span class="k">join</span>
</span><span class='line'>    <span class="n">Production</span><span class="p">.</span><span class="n">TransactionHistory</span> <span class="n">transactio1_</span>
</span><span class='line'>        <span class="k">on</span> <span class="n">this_</span><span class="p">.</span><span class="n">ProductID</span><span class="o">=</span><span class="n">transactio1_</span><span class="p">.</span><span class="n">ProductID</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Summary</h3>

<p>This post covered a lot, but that&rsquo;s because there are many ways to build a <code>SELECT</code> clause with QueryOver. In summary:</p>

<ul>
<li><code>Select</code> can be used to build a <code>SELECT</code> clause with single columns</li>
<li><code>SelectList</code> and <code>Projections.ProjectionList</code> can be used to create more complex <code>SELECT</code> clauses.</li>
<li>When aggregating values, use <code>SelectGroup</code> (or <code>Projections.GroupProperty</code>).</li>
<li>For more complex scenarios, you can drop back in to Criteria methods on the <code>Projections</code> class. These support lambda expressions and can be used with QueryOver.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[QueryOver Series - Part 2: Basics and Joining]]></title>
    <link href="http://blog.andrewawhitaker.com/blog/2014/03/16/queryover-series-part-2-basics/"/>
    <updated>2014-03-16T11:05:33-05:00</updated>
    <id>http://blog.andrewawhitaker.com/blog/2014/03/16/queryover-series-part-2-basics</id>
    <content type="html"><![CDATA[<p>In this post, I&rsquo;ll outline some basics on QueryOver, including the NHibernate types involved and basic query structure. I&rsquo;ll also talk about joining using <code>JoinAlias</code> and <code>JoinQueryOver</code></p>

<!-- more -->


<h4><code>IQueryOver&lt;TRoot, TSubType&gt;</code></h4>

<p>If you look closely at the types involved when writing QueryOver queries, you&rsquo;ll notice that there are two generic type parameters: <code>TRoot</code> and <code>TSubType</code>. Why would the API need two type parameters?</p>

<p>When you create a QueryOver object using <code>session.QueryOver&lt;TRoot&gt;</code>, <code>TRoot</code> and <code>TSubType</code> are the same. <code>TRoot</code> stays the same as you build the query, and <code>TSubType</code> changes as you use <code>JoinQueryOver</code> to join to other tables. This is worth mentioning before we go into more depth on building queries.</p>

<p>In general:</p>

<ul>
<li>Operations <em>except</em> for <code>.Select</code> use <code>TSubType</code> as the type parameter for lambda expressions you pass to QueryOver methods</li>
<li><code>TRoot</code> is the type parameter for lambda expressions you use in the <code>.Select</code> step of the query.</li>
</ul>


<p>Here&rsquo;s an example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">session</span><span class="p">.</span><span class="n">QueryOver</span><span class="p">&lt;</span><span class="n">Person</span><span class="p">&gt;()</span>
</span><span class='line'><span class="c1">// TRoot and TSubType are Person                         </span>
</span><span class='line'>    <span class="p">.</span><span class="n">JoinQueryOver</span><span class="p">(</span><span class="n">p</span> <span class="p">=&gt;</span> <span class="n">p</span><span class="p">.</span><span class="n">Addresses</span><span class="p">)</span>
</span><span class='line'>    <span class="c1">// TRoot is Person, TSubtype is Address</span>
</span><span class='line'>        <span class="p">.</span><span class="n">Where</span><span class="p">(</span><span class="n">a</span> <span class="p">=&gt;</span> <span class="n">a</span><span class="p">.</span><span class="n">ModifiedDate</span> <span class="p">==</span> <span class="n">DateTime</span><span class="p">.</span><span class="n">Now</span><span class="p">)</span>
</span><span class='line'>        <span class="c1">// Where accepts an Expression&lt;Func&lt;TSubtype, bool&gt;&gt;</span>
</span><span class='line'>        <span class="p">.</span><span class="n">Select</span><span class="p">(</span><span class="n">p</span> <span class="p">=&gt;</span> <span class="n">p</span><span class="p">.</span><span class="n">Id</span><span class="p">);</span>
</span><span class='line'>        <span class="c1">// Select accepts an Expression&lt;Func&lt;TRoot, object&gt;&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h4><code>JoinAlias</code> and <code>JoinQueryOver</code></h4>

<p>Since we&rsquo;re on the subject of <code>TRoot</code> and <code>TSubType</code>, now is a good opportunity to talk about <code>JoinAlias</code> and <code>JoinQueryOver</code></p>

<h5><code>JoinAlias</code></h5>

<p><code>JoinAlias</code> adds a join to your query without changing <code>TSubType</code>. This is useful if you&rsquo;re joining to more than one table from a source table:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">BusinessEntityAddress</span> <span class="n">addressAlias</span> <span class="p">=</span> <span class="k">null</span><span class="p">;</span>
</span><span class='line'><span class="n">BusinessEntityContact</span> <span class="n">contactAlias</span> <span class="p">=</span> <span class="k">null</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">session</span><span class="p">.</span><span class="n">QueryOver</span><span class="p">&lt;</span><span class="n">Person</span><span class="p">&gt;()</span>
</span><span class='line'>    <span class="p">.</span><span class="n">JoinAlias</span><span class="p">(</span><span class="n">p</span> <span class="p">=&gt;</span> <span class="n">p</span><span class="p">.</span><span class="n">Addresses</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="n">addressAlias</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="n">JoinAlias</span><span class="p">(</span><span class="n">p</span> <span class="p">=&gt;</span> <span class="n">p</span><span class="p">.</span><span class="n">Contacts</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="n">contactAlias</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="n">Where</span><span class="p">(</span><span class="n">p</span> <span class="p">=&gt;</span> <span class="n">p</span><span class="p">.</span><span class="n">FirstName</span> <span class="p">==</span> <span class="s">&quot;Andrew&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="cm">/* etc */</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this example, since we want to join to <code>Address</code> and <code>Contact</code>, we can use <code>JoinAlias</code> twice, since <code>TSubType</code> doesn&rsquo;t change.</p>

<p>The second parameter (in this particular overload) to <code>.JoinAlias</code> is a lambda expression that creates an alias. You can use the alias throughout the query in other lambda expressions when you don&rsquo;t want to use either <code>TRoot</code> or <code>TSubType</code>.</p>

<h5><code>JoinQueryOver</code></h5>

<p><code>JoinQueryOver</code> adds a join to your query and <em>changes</em> <code>TSubType</code>. You can also use an alias with <code>JoinQueryOver</code>, but with simpler queries it&rsquo;s often not necessary:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">session</span><span class="p">.</span><span class="n">QueryOver</span><span class="p">&lt;</span><span class="n">Person</span><span class="p">&gt;()</span>
</span><span class='line'>    <span class="p">.</span><span class="n">JoinQueryOver</span><span class="p">(</span><span class="n">p</span> <span class="p">=&gt;</span> <span class="n">p</span><span class="p">.</span><span class="n">Addresses</span><span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="n">Where</span><span class="p">(</span><span class="n">a</span> <span class="p">=&gt;</span> <span class="n">a</span><span class="p">.</span><span class="n">ModifiedDate</span> <span class="p">==</span> <span class="n">DateTime</span><span class="p">.</span><span class="n">Now</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="n">Select</span><span class="p">(</span><span class="n">p</span> <span class="p">=&gt;</span> <span class="n">p</span><span class="p">.</span><span class="n">FirstName</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Notice that the lambda expression passed to the <code>.Where</code> method has the signature <code>Expression&lt;Func&lt;Address, bool&gt;&gt;</code>. The call to <code>JoinQueryOver</code> changed <code>TSubType</code>. This can make for more concise, easier to read code, since you don&rsquo;t need to declare aliases for every join you do.</p>

<p><code>JoinAlias</code> and <code>JoinQueryOver</code> are interchangeable, as far as I know. You can write the same query using either one, it&rsquo;s just that the number of aliases you declare changes based on which you use. Typically I choose whichever one avoids creating and managing more aliases. This means using <code>JoinQueryOver</code> when possible, but that&rsquo;s personal preference.</p>

<h4>Summary:</h4>

<ul>
<li><code>IQueryOver</code> is a generic type with two type parameters <code>TRoot</code> and <code>TSubType</code></li>
<li><code>.Select</code> operates on <code>TRoot</code> while other QueryOver methods operate on <code>TSubType</code>.</li>
<li><code>TRoot</code> stays the same as you&rsquo;re building a query, but <code>TSubType</code> changes when you join using <code>JoinQueryOver</code></li>
<li><code>JoinQueryOver</code> and <code>JoinAlias</code> add joins to your query. <code>JoinAlias</code> doesn&rsquo;t change <code>TSubType</code>, but <code>JoinQueryOver</code> does.</li>
<li>You can use aliases when building a query to refer to properties that don&rsquo;t belong to <code>TRoot</code> or <code>TSubType</code></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[QueryOver Series - Part 1: Why QueryOver?]]></title>
    <link href="http://blog.andrewawhitaker.com/blog/2014/03/12/queryover-series-part-1-why-queryover/"/>
    <updated>2014-03-12T21:50:58-05:00</updated>
    <id>http://blog.andrewawhitaker.com/blog/2014/03/12/queryover-series-part-1-why-queryover</id>
    <content type="html"><![CDATA[<p>QueryOver is a strongly-typed querying technology built on top of NHibernate&rsquo;s Criteria API. It was introduced in NHibernate 3.0. QueryOver is actually quite powerful and flexible, as I aim to demonstrate in this series of blog posts.</p>

<p>There is not much in the way of official documentation for NHibernate in general, and even less for QueryOver. The only article on NHForge that I can find is <a href="http://nhforge.org/blogs/nhibernate/archive/2009/12/17/queryover-in-nh-3-0.aspx">here</a>. While this is a good read for an introduction, it really doesn&rsquo;t do QueryOver justice. There&rsquo;s a lot of capability that&rsquo;s not demonstrated there.</p>

<!-- more -->


<h3>Overview of available querying technologies</h3>

<p>If you&rsquo;re using NHibernate, you&rsquo;re probably aware that you have several options when you go to write a query:</p>

<ul>
<li>SQL (via <code>CreateSQLQuery</code>)</li>
<li>HQL</li>
<li>LINQ to NHibernate</li>
<li>Criteria</li>
<li>QueryOver</li>
</ul>


<p>Now, in some cases you <em>must</em> use SQL or HQL because of the type of query you&rsquo;re writing. For the vast majority of simple to intermediate queries though, LINQ to NHibernate, QueryOver, and Criteria all seem like viable options.</p>

<h3>Why use QueryOver?</h3>

<p>Let&rsquo;s assume that you&rsquo;re working on a large project and using magic strings everywhere to write queries makes you a bit nervous. People are changing property and class names every day, potentially breaking queries across your application. In this case, your better-looking options are LINQ to NHibernate and QueryOver.</p>

<p>If you&rsquo;ve tried to use LINQ to NHibernate for anything remotely complex, you know you&rsquo;ll run into problems quickly. Currently you <a href="http://stackoverflow.com/q/15590021/497356">can&rsquo;t</a> <a href="http://stackoverflow.com/q/13624959/497356">even</a> <a href="https://nhibernate.jira.com/browse/NH-2379">do a left join</a>. What this means is if you have a left join in your query, or even if you think you&rsquo;ll need one one day, you can&rsquo;t currently use LINQ to NHibernate.</p>

<p>I&rsquo;m not trying to pick on NHibernate&rsquo;s LINQ provider or minimize the amount of work contributors have done towards it; I&rsquo;m just pointing out that it&rsquo;s incomplete and not a great option for querying right now. With this in mind, QueryOver is really your <em>only</em> viable option for writing queries with NHibernate. I&rsquo;m sure the LINQ provider will only get better, but until then QueryOver is a good option.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jQueryUI Autocomplete 1.9]]></title>
    <link href="http://blog.andrewawhitaker.com/blog/2012/10/08/jqueryui-autocomplete-1-9/"/>
    <updated>2012-10-08T20:37:33-05:00</updated>
    <id>http://blog.andrewawhitaker.com/blog/2012/10/08/jqueryui-autocomplete-1-9</id>
    <content type="html"><![CDATA[<p>As you might have realized from my previous post, I have an affinity for the jQueryUI autocomplete widget. With 1.9, which was <a href="http://jqueryui.com/changelog/1.9.0/">recently released</a>, autocomplete <a href="http://jqueryui.com/upgrade-guide/1.9/#autocomplete">got a little love</a>, which is what I&rsquo;ll focus on in this post. I&rsquo;ll go over each change and what practical implications it has.</p>

<!-- more -->


<h2>The <code>response</code> event</h2>

<p>Previously, it wasn&rsquo;t possible to determine when a search had completed unless results were returned (in which case the <code>open</code> event was triggered). There are <a href="http://stackoverflow.com/a/4719848/497356">several ways to get around this limitation</a>, but none of them use autocomplete&rsquo;s API. This limitation made it hard to perform actions if the search returned zero results.</p>

<p><strong>Here&rsquo;s what you would have had to do in jQueryUI 1.8:</strong></p>

<figure class='code'><figcaption><span>Detecting no results in jQueryUI 1.8</span><a href='http://jsfiddle.net/qz29K/'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">availableTags</span> <span class="o">=</span> <span class="p">[</span><span class="cm">/* array of items */</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#auto&quot;</span><span class="p">).</span><span class="nx">autocomplete</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">source</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">request</span><span class="p">,</span> <span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">results</span> <span class="o">=</span> <span class="nx">$</span><span class="p">.</span><span class="nx">ui</span><span class="p">.</span><span class="nx">autocomplete</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="nx">availableTags</span><span class="p">,</span> <span class="nx">request</span><span class="p">.</span><span class="nx">term</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">results</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#no-results&quot;</span><span class="p">).</span><span class="nx">text</span><span class="p">(</span><span class="s2">&quot;No results found!&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#no-results&quot;</span><span class="p">).</span><span class="nx">empty</span><span class="p">();</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">response</span><span class="p">(</span><span class="nx">results</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Here&rsquo;s what you can do in 1.9:</strong></p>

<figure class='code'><figcaption><span>Detecting no results in jQueryUI 1.9</span><a href='http://jsfiddle.net/andrewwhitaker/AYRhE/'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">availableTags</span> <span class="o">=</span> <span class="p">[</span><span class="cm">/* array of items*/</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#auto&quot;</span><span class="p">).</span><span class="nx">autocomplete</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">source</span><span class="o">:</span> <span class="nx">availableTags</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">response</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">event</span><span class="p">,</span> <span class="nx">ui</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">ui</span><span class="p">.</span><span class="nx">content</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#no-results&quot;</span><span class="p">).</span><span class="nx">text</span><span class="p">(</span><span class="s2">&quot;No results found!&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#no-results&quot;</span><span class="p">).</span><span class="nx">empty</span><span class="p">();</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Much cleaner. This works for an autocomplete-enabled input with a remote source as well:</p>

<figure class='code'><figcaption><span>Detecting no results with a remote source</span><a href='http://jsfiddle.net/andrewwhitaker/J5rVP/1/'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s2">&quot;input&quot;</span><span class="p">).</span><span class="nx">autocomplete</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">source</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">request</span><span class="p">,</span> <span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span><span class="p">({</span>
</span><span class='line'>            <span class="nx">url</span><span class="o">:</span> <span class="s2">&quot;http://api.stackexchange.com/2.1/users&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">data</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">pagesize</span><span class="o">:</span> <span class="mi">10</span><span class="p">,</span>
</span><span class='line'>                <span class="nx">order</span><span class="o">:</span> <span class="s1">&#39;desc&#39;</span><span class="p">,</span>
</span><span class='line'>                <span class="nx">sort</span><span class="o">:</span> <span class="s1">&#39;reputation&#39;</span><span class="p">,</span>
</span><span class='line'>                <span class="nx">site</span><span class="o">:</span> <span class="s1">&#39;stackoverflow&#39;</span><span class="p">,</span>
</span><span class='line'>                <span class="nx">inname</span><span class="o">:</span> <span class="nx">request</span><span class="p">.</span><span class="nx">term</span>
</span><span class='line'>            <span class="p">},</span>
</span><span class='line'>            <span class="nx">dataType</span><span class="o">:</span> <span class="s1">&#39;jsonp&#39;</span>
</span><span class='line'>        <span class="p">}).</span><span class="nx">done</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nx">data</span><span class="p">.</span><span class="nx">items</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">response</span><span class="p">(</span><span class="nx">$</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">data</span><span class="p">.</span><span class="nx">items</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">item</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="k">return</span> <span class="nx">item</span><span class="p">.</span><span class="nx">display_name</span><span class="p">;</span>
</span><span class='line'>                <span class="p">}));</span>
</span><span class='line'>            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">response</span><span class="p">([]);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nx">delay</span><span class="o">:</span> <span class="mi">500</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">minLength</span><span class="o">:</span> <span class="mi">3</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">response</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">event</span><span class="p">,</span> <span class="nx">ui</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">ui</span><span class="p">.</span><span class="nx">content</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#message&quot;</span><span class="p">).</span><span class="nx">text</span><span class="p">(</span><span class="s2">&quot;No results found&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#message&quot;</span><span class="p">).</span><span class="nx">empty</span><span class="p">();</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Synchronous <code>change</code> event</h2>

<p>This is fixing a subtle, but important, limitation in 1.8&rsquo;s autocomplete implementation. The <code>change</code> event used a small timeout right after the <code>blur</code> occurred. Most of the time this didn&rsquo;t cause a problem, but if you wanted to validate that the user selected an item from the suggestion menu, the user could actually submit the form before the <code>change</code> event fired. This is best seen with an example (click the <strong>result</strong> tab inside the fiddle):</p>

<iframe style="width: 100%; height: 300px" src="http://jsfiddle.net/andrewwhitaker/qz29K/83/embedded/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>


<p>If you select an item from the menu after searching, then click out of the field (enabling the submit button), then focus the input field again and change the input&rsquo;s value to something <em>not</em> in the suggestion list, you can submit the form.</p>

<p>In 1.9, this works much better and you can prevent the user from submitting the form entirely:</p>

<iframe style="width: 100%; height: 300px" src="http://jsfiddle.net/andrewwhitaker/AYRhE/1/embedded/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>


<p>Try following the steps for the 1.8 example, and you should not be able to submit the form.</p>

<h2>Support for <code>contentEditable</code></h2>

<p>This enhancement allows you to attach autocomplete to a <code>contentEditable</code> element. This functionality was not possible in 1.8. This has some very cool applications that I&rsquo;ll explore in a later blog post, but here&rsquo;s a simple example:</p>

<iframe style="width: 100%; height: 300px" src="http://jsfiddle.net/andrewwhitaker/J5rVP/2/embedded/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>


<p></p>

<h2>Blurring a suggestion no longer changes the input&rsquo;s value</h2>

<p>This one is hard to explain, but follow the steps outlined in the 1.8 fiddle below to see the problem:</p>

<iframe style="width: 100%; height: 300px" src="http://jsfiddle.net/andrewwhitaker/qz29K/84/embedded/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>


<p>Now, follow the same instructions in 1.9:</p>

<iframe style="width: 100%; height: 300px" src="http://jsfiddle.net/andrewwhitaker/AYRhE/2/embedded/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>


<p>See the difference? In 1.9, the input&rsquo;s value is not reset when the menu item is hovered over.</p>

<h2>Added experimental <code>messages</code> option for accessibility</h2>

<p>The jQueryUI folks explain this one better than I can show with an example:</p>

<blockquote><p>We now use ARIA live regions to announce when results become available and how to navigate through the list of suggestions. The announcements can be configured via the messages option, which has two properties: noResults for when no items are returned and results for when at least one item is returned. In general, you would only need to change these options if you want the string to be written in a different language. The messages option is subject to change in future versions while we work on a full solution for string manipulation and internationalization across all plugins. If you&rsquo;re interested in the messages option, we encourage you to just read the source; the relevant code is at the very bottom of the autocomplete plugin and is only a few lines.</p></blockquote>

<p>I&rsquo;m not an accessibility expert, so I had to look up what <em>ARIA live regions are</em>. <a href="https://developer.mozilla.org/en-US/docs/Accessibility/ARIA/ARIA_Live_Regions">MDN has a great explanation</a>:</p>

<blockquote><p>In the past, a web page change could only be spoken in entirety which often annoyed a user, or by speaking very little to nothing, making some or all information inaccessible. Until recently, screen readers have not been able to improve this because no standardized markup existed to alert the screen reader to a change. ARIA live regions fill this gap and provide suggestions to screen readers regarding whether and how to interrupt users with a change.</p></blockquote>

<p>So how does this apply to the autocomplete widget? Well, now when you search for an item, if you have a screen reader installed it will read you something like <em>&ldquo;1 result is available, use up and down arrow keys to navigate.&rdquo;</em>. Pretty cool, huh?</p>

<p>I&rsquo;ve outlined each enhancement to jQueryUI autocomplete in the 1.9 release. There are some exciting possibilities, specifically with the <code>contentEditable</code> support and the exposure of the Menu widget as a first-class widget. I&rsquo;ll be sure to follow up on those topics in a subsequent post.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jQueryUI Autocomplete: Top 5 sources of confusion]]></title>
    <link href="http://blog.andrewawhitaker.com/blog/2012/09/29/jqueryui-autocomplete-top-5-sources-of-confusion/"/>
    <updated>2012-09-29T13:31:58-05:00</updated>
    <id>http://blog.andrewawhitaker.com/blog/2012/09/29/jqueryui-autocomplete-top-5-sources-of-confusion</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve been answering <a href="http://www.jqueryui.com/demos/autocomplete">jQueryUI autocomplete</a> questions on StackOverflow now for over two and a half years and I&rsquo;ve noticed that there are a few things that are <em>always</em> coming up. This post will attempt to clear up those sources of confusion.</p>

<!-- more -->


<h2>jQuery Autocomplete vs. jQueryUI autocomplete</h2>

<p><a href="http://bassistance.de/jquery-plugins/jquery-plugin-autocomplete/">jQuery autocomplete</a> is jQueryUI autocomplete&rsquo;s predecessor. Despite the multiple messages and disclaimers on the legacy plugin&rsquo;s page, there is <em>still</em> confusion about the documentation, functionality, and status of this plugin. For some reason, some folks do not notice the following message on Jörn Zaefferer&rsquo;s documentation page for the plugin:</p>

<blockquote><p>This plugin is deprecated and not developed anymore. Its <a href="http://jqueryui.com/demos/autocomplete/">successor is part of jQuery UI</a>, and <a href="http://www.learningjquery.com/2010/06/autocomplete-migration-guide">this migration guide</a> explains how to get from this plugin to the new one. This page will remain as it is for reference, but won’t be updated anymore.</p></blockquote>

<p>The link to the migration guide explains how to migrate your old code using the original, deprecated plugin with the new one provided by jQueryUI.</p>

<h2>What format does my data need to be in?</h2>

<p>Another source of confusion is exactly <em>what</em> format does the widget&rsquo;s data source need to take? This is easy to see after viewing a few examples and reading the overview tab on the documentation page.</p>

<p>To summarize, the data that you send to the widget needs to be:</p>

<ol>
<li>An array of strings</li>
<li>An array of objects. Each object should have a either a <code>label</code> property, a <code>value</code> property, or both.</li>
</ol>


<p>An important point on #2 is that the object can contain other properties (besides <code>label</code> or <code>value</code>). This comes in handy when doing custom things with data.</p>

<h2>I am using a server-side source and my data isn&rsquo;t being filtered!</h2>

<p>When you use a server-side resource, <em>you</em> are responsible for doing the filtering. Usually this occurs by building up a database query based on the term that the user searched for.</p>

<p>If you don&rsquo;t want to filter your data with server-side code (which I highly recommend), you could retrieve all of the possible results via AJAX and then let the widget do the filtering. Here&rsquo;s an example using StackOverflow&rsquo;s API:</p>

<figure class='code'><figcaption><span>Letting jQueryUI do the filtering</span><a href='http://jsfiddle.net/andrewwhitaker/ZBmM8/light/'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">url</span><span class="o">:</span> <span class="s2">&quot;http://api.stackexchange.com/2.1/users&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">data</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">pagesize</span><span class="o">:</span> <span class="mi">100</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">order</span><span class="o">:</span> <span class="s1">&#39;desc&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">sort</span><span class="o">:</span> <span class="s1">&#39;reputation&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">site</span><span class="o">:</span> <span class="s1">&#39;stackoverflow&#39;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nx">dataType</span><span class="o">:</span> <span class="s2">&quot;jsonp&quot;</span>
</span><span class='line'><span class="p">}).</span><span class="nx">success</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">dir</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">source</span> <span class="o">=</span> <span class="nx">$</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">data</span><span class="p">.</span><span class="nx">items</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">user</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">user</span><span class="p">.</span><span class="nx">display_name</span><span class="p">;</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;input&quot;</span><span class="p">).</span><span class="nx">autocomplete</span><span class="p">({</span>
</span><span class='line'>        <span class="nx">source</span><span class="o">:</span> <span class="nx">source</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>This may not be ideal depending on the size of the data you are processing. You may want to handle the filtering on the server rather than bogging the browser down with filtering through thousands of results.</p>

<h2>I&rsquo;m using a server-side resource that isn&rsquo;t returning data in the format that autocomplete is expecting. What should I do?</h2>

<p>You can supply a callback function to the <code>source</code> parameter of autocomplete. This allows you to use virtually any source as long as you format it correctly before passing it to the <code>response</code> function that autocomplete uses to populate the results. Here&rsquo;s another example using the StackOverflow API:</p>

<figure class='code'><figcaption><span>Using a function with the &#8220;source&#8221; option</span><a href='http://jsfiddle.net/andrewwhitaker/MGTKm/'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s2">&quot;input&quot;</span><span class="p">).</span><span class="nx">autocomplete</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">source</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">request</span><span class="p">,</span> <span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span><span class="p">({</span>
</span><span class='line'>            <span class="nx">url</span><span class="o">:</span> <span class="s2">&quot;http://api.stackexchange.com/2.1/users&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">data</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">pagesize</span><span class="o">:</span> <span class="mi">10</span><span class="p">,</span>
</span><span class='line'>                <span class="nx">order</span><span class="o">:</span> <span class="s1">&#39;desc&#39;</span><span class="p">,</span>
</span><span class='line'>                <span class="nx">sort</span><span class="o">:</span> <span class="s1">&#39;reputation&#39;</span><span class="p">,</span>
</span><span class='line'>                <span class="nx">site</span><span class="o">:</span> <span class="s1">&#39;stackoverflow&#39;</span><span class="p">,</span>
</span><span class='line'>                <span class="nx">inname</span><span class="o">:</span> <span class="nx">request</span><span class="p">.</span><span class="nx">term</span>
</span><span class='line'>            <span class="p">},</span>
</span><span class='line'>            <span class="nx">dataType</span><span class="o">:</span> <span class="s1">&#39;jsonp&#39;</span>
</span><span class='line'>        <span class="p">}).</span><span class="nx">success</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">results</span> <span class="o">=</span> <span class="nx">$</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">data</span><span class="p">.</span><span class="nx">items</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">user</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="nx">user</span><span class="p">.</span><span class="nx">display_name</span><span class="p">;</span>
</span><span class='line'>            <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>            <span class="nx">response</span><span class="p">(</span><span class="nx">results</span><span class="p">);</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>The key here is to use <code>$.map</code> to transform the results into the format that the widget expects (described above).</p>

<h2>I want to implement tagging functionality. How can I go about that?</h2>

<p>This is the most complex of the 5, but it is doable. Check out the <a href="http://jqueryui.com/demos/autocomplete/#multiple">multiple values demo</a> for one way to do this.</p>

<p>I&rsquo;ve demonstrated a more complex Google-plus like functionality in the answer to <a href="http://stackoverflow.com/q/7089406/497356">this question</a>. Here&rsquo;s an updated fiddle using the 2.1 version of the API.</p>

<figure class='code'><figcaption><span>Tagging functionality</span><a href='http://jsfiddle.net/andrewwhitaker/LHNky/41/light/'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">split</span><span class="p">(</span><span class="nx">val</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">val</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="sr">/@\s*/</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">extractLast</span><span class="p">(</span><span class="nx">term</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">split</span><span class="p">(</span><span class="nx">term</span><span class="p">).</span><span class="nx">pop</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">getTags</span><span class="p">(</span><span class="nx">term</span><span class="p">,</span> <span class="nx">callback</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span><span class="p">({</span>
</span><span class='line'>        <span class="nx">url</span><span class="o">:</span> <span class="s2">&quot;http://api.stackexchange.com/2.1/tags&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">data</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">inname</span><span class="o">:</span> <span class="nx">term</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">pagesize</span><span class="o">:</span> <span class="mi">5</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">order</span><span class="o">:</span> <span class="s1">&#39;desc&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">sort</span><span class="o">:</span> <span class="s1">&#39;popular&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">site</span><span class="o">:</span> <span class="s1">&#39;stackoverflow&#39;</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="nx">success</span><span class="o">:</span> <span class="nx">callback</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">dataType</span><span class="o">:</span> <span class="s2">&quot;jsonp&quot;</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">ready</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#tags&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="c1">// don&#39;t navigate away from the field on tab when selecting an item</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="s2">&quot;keydown&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">event</span><span class="p">.</span><span class="nx">keyCode</span> <span class="o">===</span> <span class="nx">$</span><span class="p">.</span><span class="nx">ui</span><span class="p">.</span><span class="nx">keyCode</span><span class="p">.</span><span class="nx">TAB</span> <span class="o">&amp;&amp;</span> <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">data</span><span class="p">(</span><span class="s2">&quot;autocomplete&quot;</span><span class="p">).</span><span class="nx">menu</span><span class="p">.</span><span class="nx">active</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>            <span class="nx">event</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">();</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}).</span><span class="nx">autocomplete</span><span class="p">({</span>
</span><span class='line'>        <span class="nx">source</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">request</span><span class="p">,</span> <span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nx">request</span><span class="p">.</span><span class="nx">term</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s2">&quot;@&quot;</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#loading&quot;</span><span class="p">).</span><span class="nx">show</span><span class="p">();</span>
</span><span class='line'>                <span class="nx">getTags</span><span class="p">(</span><span class="nx">extractLast</span><span class="p">(</span><span class="nx">request</span><span class="p">.</span><span class="nx">term</span><span class="p">),</span> <span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="nx">response</span><span class="p">(</span><span class="nx">$</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">data</span><span class="p">.</span><span class="nx">items</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">el</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                        <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>                            <span class="nx">value</span><span class="o">:</span> <span class="nx">el</span><span class="p">.</span><span class="nx">name</span><span class="p">,</span>
</span><span class='line'>                            <span class="nx">count</span><span class="o">:</span> <span class="nx">el</span><span class="p">.</span><span class="nx">count</span>
</span><span class='line'>                        <span class="p">};</span>
</span><span class='line'>                    <span class="p">}));</span>
</span><span class='line'>                    <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#loading&quot;</span><span class="p">).</span><span class="nx">hide</span><span class="p">();</span>
</span><span class='line'>                <span class="p">});</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="nx">focus</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">// prevent value inserted on focus</span>
</span><span class='line'>            <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="nx">select</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">event</span><span class="p">,</span> <span class="nx">ui</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">terms</span> <span class="o">=</span> <span class="nx">split</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">value</span><span class="p">);</span>
</span><span class='line'>            <span class="c1">// remove the current input</span>
</span><span class='line'>            <span class="nx">terms</span><span class="p">.</span><span class="nx">pop</span><span class="p">();</span>
</span><span class='line'>            <span class="c1">// add the selected item</span>
</span><span class='line'>            <span class="nx">terms</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">ui</span><span class="p">.</span><span class="nx">item</span><span class="p">.</span><span class="nx">value</span><span class="p">);</span>
</span><span class='line'>            <span class="c1">// add placeholder to get the comma-and-space at the end</span>
</span><span class='line'>            <span class="nx">terms</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="nx">value</span> <span class="o">=</span> <span class="nx">terms</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}).</span><span class="nx">data</span><span class="p">(</span><span class="s2">&quot;autocomplete&quot;</span><span class="p">).</span><span class="nx">_renderItem</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">ul</span><span class="p">,</span> <span class="nx">item</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;&lt;li&gt;&quot;</span><span class="p">)</span>
</span><span class='line'>            <span class="p">.</span><span class="nx">data</span><span class="p">(</span><span class="s2">&quot;item.autocomplete&quot;</span><span class="p">,</span> <span class="nx">item</span><span class="p">)</span>
</span><span class='line'>            <span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="s2">&quot;&lt;a&gt;&quot;</span> <span class="o">+</span> <span class="nx">item</span><span class="p">.</span><span class="nx">label</span> <span class="o">+</span> <span class="s2">&quot;&amp;nbsp;&lt;span class=&#39;count&#39;&gt;(&quot;</span> <span class="o">+</span> <span class="nx">item</span><span class="p">.</span><span class="nx">count</span> <span class="o">+</span> <span class="s2">&quot;)&lt;/span&gt;&lt;/a&gt;&quot;</span><span class="p">)</span>
</span><span class='line'>            <span class="p">.</span><span class="nx">appendTo</span><span class="p">(</span><span class="nx">ul</span><span class="p">);</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>This demo is also useful because it shows a custom display of each tag including the count. Type @j to see tags starting with &ldquo;j&rdquo;.</p>

<p>jQueryUI autocomplete&rsquo;s API may look simple at first glance, but this is a very extensible and capable plugin. Most people&rsquo;s questions revolve around the <code>source</code> parameter for the plugin. Remember to look at your AJAX requests in Firebug or similar just to make sure the data you&rsquo;re supplying to the widget is what you expect.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jQuery.aggregate: A simple jQuery aggregation plugin]]></title>
    <link href="http://blog.andrewawhitaker.com/blog/2011/12/22/jquery-aggregate-a-simple-jquery-aggregation-plugin/"/>
    <updated>2011-12-22T17:39:02-06:00</updated>
    <id>http://blog.andrewawhitaker.com/blog/2011/12/22/jquery-aggregate-a-simple-jquery-aggregation-plugin</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve found myself needing to apply an aggregate function over a jQuery object several times. I decided to wrap the functionality in a plugin. I attempted to make <code>$.aggregate</code> and its little brother <code>$.sum</code> as close to LINQ&rsquo;s <a href="http://msdn.microsoft.com/en-us/library/system.linq.enumerable.aggregate.aspx">aggregate</a> and <a href="http://msdn.microsoft.com/en-us/library/bb345537.aspx">sum</a> as possible. This goal obviously couldn&rsquo;t be completely realized because of the dynamic nature of JavaScript. The biggest roadblock there is that you can&rsquo;t really imply a &ldquo;seed&rdquo; value for an aggregating operation, since arrays can contain elements of various types in JavaScript.</p>

<!-- more -->


<p>Let&rsquo;s take a look with an example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">letters</span> <span class="o">=</span> <span class="s2">&quot;abcdefghijklmnopqrstuvwxyz&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">message</span> <span class="o">=</span> <span class="nx">$</span><span class="p">.</span><span class="nx">aggregate</span><span class="p">([</span><span class="mi">0</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">17</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">19</span><span class="p">,</span> <span class="mi">4</span><span class="p">],</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">working</span><span class="p">,</span> <span class="nx">element</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">working</span> <span class="o">?</span> <span class="nx">working</span> <span class="o">+</span> <span class="nx">letters</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="nx">element</span><span class="p">)</span> <span class="o">:</span> <span class="nx">letters</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="nx">element</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#message&quot;</span><span class="p">).</span><span class="nx">text</span><span class="p">(</span><span class="nx">message</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here, we&rsquo;re building up a message from an array of numbers that correspond to letters of the alphabet. We supplied the aggregate function with a source and a function describing how we wanted to build the aggregate, based on the current value we&rsquo;re iterating over and the &ldquo;working&rdquo; aggregate (what we&rsquo;ve built up so far).</p>

<p>The conditional operator inside the aggregate function is kind of awkward, so lets supply an initial &ldquo;seed&rdquo; value to the aggregate:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">letters</span> <span class="o">=</span> <span class="s2">&quot;abcdefghijklmnopqrstuvwxyz&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">message</span> <span class="o">=</span> <span class="nx">$</span><span class="p">.</span><span class="nx">aggregate</span><span class="p">([</span><span class="mi">0</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">17</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">19</span><span class="p">,</span> <span class="mi">4</span><span class="p">],</span> <span class="s1">&#39;&#39;</span><span class="p">,</span>  <span class="kd">function</span> <span class="p">(</span><span class="nx">working</span><span class="p">,</span> <span class="nx">element</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">working</span> <span class="o">+</span> <span class="nx">letters</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="nx">element</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#message&quot;</span><span class="p">).</span><span class="nx">text</span><span class="p">(</span><span class="nx">message</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally, we may want to supply some sort of final transformation function to our aggregated value. With the aggregate plugin, you can supply a function that will transform the aggregated value before returning it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">letters</span> <span class="o">=</span> <span class="s2">&quot;abcdefghijklmnopqrstuvwxyz&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">message</span> <span class="o">=</span> <span class="nx">$</span><span class="p">.</span><span class="nx">aggregate</span><span class="p">([</span><span class="mi">0</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">17</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">19</span><span class="p">,</span> <span class="mi">4</span><span class="p">],</span> <span class="s1">&#39;&#39;</span><span class="p">,</span>  <span class="kd">function</span> <span class="p">(</span><span class="nx">working</span><span class="p">,</span> <span class="nx">element</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">working</span> <span class="o">+</span> <span class="nx">letters</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="nx">element</span><span class="p">);</span>
</span><span class='line'><span class="p">},</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">value</span><span class="p">.</span><span class="nx">toUpperCase</span><span class="p">();</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#message&quot;</span><span class="p">).</span><span class="nx">text</span><span class="p">(</span><span class="nx">message</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>That&rsquo;s pretty much it for <code>$.aggregate</code>. You should be able to get pretty creative with it.</p>

<p><code>$.sum</code> is just a convenient way to call <code>$.aggregate</code>. After implementing <code>$.aggregate</code>, <code>$.sum</code> was pretty easy. <code>$.sum</code> sheds some parameters, but is much more readable if all you&rsquo;re doing is adding some values up:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">total</span> <span class="o">=</span> <span class="nx">$</span><span class="p">.</span><span class="nx">sum</span><span class="p">([</span><span class="mi">0</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">17</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">19</span><span class="p">,</span> <span class="mi">4</span><span class="p">]);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#total&quot;</span><span class="p">).</span><span class="nx">text</span><span class="p">(</span><span class="nx">total</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Much neater right? You can also supply a transformation function that should return the item to be &ldquo;summed&rdquo;:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">groceries</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>    <span class="p">{</span> <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;bread&#39;</span><span class="p">,</span> <span class="nx">price</span><span class="o">:</span> <span class="mf">2.50</span> <span class="p">},</span>
</span><span class='line'>    <span class="p">{</span> <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;bologna&#39;</span><span class="p">,</span> <span class="nx">price</span><span class="o">:</span> <span class="mf">4.00</span> <span class="p">},</span>
</span><span class='line'>    <span class="p">{</span> <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;cheddar cheese&#39;</span><span class="p">,</span> <span class="nx">price</span><span class="o">:</span> <span class="mf">3.50</span> <span class="p">},</span>
</span><span class='line'>    <span class="p">{</span> <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;potato chips&#39;</span><span class="p">,</span> <span class="nx">price</span><span class="o">:</span> <span class="mf">3.00</span> <span class="p">}</span>
</span><span class='line'><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">total</span> <span class="o">=</span> <span class="nx">$</span><span class="p">.</span><span class="nx">sum</span><span class="p">(</span><span class="nx">groceries</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">price</span><span class="p">;</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#total&quot;</span><span class="p">).</span><span class="nx">text</span><span class="p">(</span><span class="s2">&quot;$&quot;</span> <span class="o">+</span> <span class="nx">total</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>That&rsquo;s pretty much it for the &ldquo;static&rdquo; functions. Both <code>$.sum</code> and <code>$.aggregate</code> can take an object <em>or</em> an array of values to aggregate.</p>

<p>There are also &ldquo;instance&rdquo; methods on jQuery objects. These methods operate on jQuery objects:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">ready</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;td input:text&quot;</span><span class="p">).</span><span class="nx">on</span><span class="p">(</span><span class="s2">&quot;change&quot;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">total</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;td input:text&quot;</span><span class="p">).</span><span class="nx">sum</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">quantity</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">value</span>
</span><span class='line'>                <span class="p">,</span> <span class="nx">cost</span> <span class="o">=</span> <span class="nb">parseFloat</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">closest</span><span class="p">(</span><span class="s2">&quot;tr&quot;</span><span class="p">).</span><span class="nx">find</span><span class="p">(</span><span class="s2">&quot;.price&quot;</span><span class="p">).</span><span class="nx">text</span><span class="p">(),</span> <span class="mi">10</span><span class="p">)</span> <span class="o">||</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">return</span> <span class="nx">quantity</span> <span class="o">*</span> <span class="nx">cost</span><span class="p">;</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#total&quot;</span><span class="p">).</span><span class="nx">text</span><span class="p">(</span><span class="nx">total</span><span class="p">);</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>(Aggregate follows the same pattern).</p>

<p>I&rsquo;m also toying with the idea of adding $.min and $.max.</p>

<p>If you want to download, view the source, or run the unit tests associated with the plugin, <a href="https://github.com/AndrewWhitaker/jQuery-Aggregate">I have it up on Github</a>. Minified version coming soon.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Retrospective: 1 year of StackOverflow]]></title>
    <link href="http://blog.andrewawhitaker.com/blog/2011/11/12/retrospective-1-year-of-stackoverflow/"/>
    <updated>2011-11-12T22:16:46-06:00</updated>
    <id>http://blog.andrewawhitaker.com/blog/2011/11/12/retrospective-1-year-of-stackoverflow</id>
    <content type="html"><![CDATA[<p>About one year ago this month I joined <a href="http://www.stackoverflow.com">StackOverflow</a> and started participating. I wanted to take a few minutes to reflect on my experience the site. First off, why did I start answering questions?</p>

<!-- more -->


<ul>
<li>A living portfolio; My StackOverflow profile is something that&rsquo;s constantly growing and that I can show to employers</li>
<li>Learning. Just spending time on the site allows you to learn new things.</li>
<li>Helping others. I use tons of free software every day. This is my way of giving back.</li>
<li>Pick up new problem-solving skills. Seeing the ways <em>others</em> answer questions gives you a view into their thought process. Seeing solutions that you wouldn&rsquo;t necessarily have come up with yourself adds tools to your problem-solving toolbox.</li>
</ul>


<p>When I started out, answering questions was a horrifying prospect: <em>I&rsquo;m going to put something on a high traffic programming site for other people to vote on?</em> I was sure I&rsquo;d mess up and get downvoted. Over 500 answers later though (and a 15K reputation), my stage fright has subsided.</p>

<p>I started out motivated by the reputation system (it&rsquo;s addicting). After a while though, there has to be another motivator. For me, that motivator is the knowledge that with an answer you might be helping thousands of people all over the world Googling for a problem. How cool is that? There&rsquo;s also the fact that <strong>you&rsquo;re learning too</strong> when you answer a question.</p>

<p>I quickly figured out what makes a high-quality answer (beyond the qualities of a simply &ldquo;good&rdquo; answer):</p>

<ul>
<li>Provides a <strong>working</strong> code sample</li>
<li>Provides a good explanation of that sample (just giving people code isn&rsquo;t helpful after all)</li>
<li>Links to relevant documentation</li>
<li>Link to a demo, if possible</li>
</ul>


<p>The last point (linking to a demo) turns out to be very important. If the asker can take your code and play around with it immediately, you&rsquo;re <em>much</em> more likely to get more upvotes and that coveted green check mark. It&rsquo;s hard to argue with a working example.</p>

<p>For that reason, I quickly gravitated to the JavaScript, jQuery, and jQueryUI tags. With those tags, I can almost always provide a working example in an answer. JavaScript sandbox site <a href="http://www.jsfiddle.net">JSFiddle</a> proved invaluable for providing working examples.</p>

<p>After spending some time in those tags, I noticed the &ldquo;<a href="http://meta.stackoverflow.com/q/9731/153691">fastest gun in the west</a>&rdquo; problem. Since I wanted to provide high-quality answers in crowded tags (where answers to simple questions are posted very quickly), I started to get more specific in the tags I watched.</p>

<p>Specifically, I moved toward <a href="http://jqueryui.com/demos/autocomplete">jQueryUI-Autocomplete</a>. Not too many people were watching questions about that widget, so it gave me more time to come up with a high-quality answer. At the same time, jQueryUI is a popular enough framework that my answers did get attention.</p>

<p>This is probably my biggest tip for new StackOverflow answerers: <strong>If you&rsquo;re overwhelmed by the quick answers and high activity in tags, find a specific type of question within that tag to focus on</strong>.</p>

<p>I also set goals while on StackOverflow. I wanted to get 10K reputation by the end of the year (which I&rsquo;ve met and exceeded). I also wanted a silver badge (400 upvotes) in the jQuery tag. Setting goals like this keeps it interesting. You can set goals for each tag and increase your own knowledge of a particular tag substantially.</p>

<p>My goals for next year include:</p>

<ul>
<li>Getting a gold badge in jQuery (1000 upvotes)</li>
<li>Getting a silver badge in C# (yep, I need to branch out)</li>
<li>Edit 600 posts</li>
</ul>


<p>The most valuable thing I&rsquo;ve gotten out of StackOverflow over the last year? Better communication skills. I believe my ability to communicate a technical problem with other technical people has improved substantially. Part of providing a good answer is providing a clear explanation. This skill translates <em>directly</em> into the professional world.</p>

<p>Good luck out there, and don&rsquo;t hesitate to sign-up and start answering.</p>
]]></content>
  </entry>
  
</feed>
