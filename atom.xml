<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Andrew Whitaker]]></title>
  <link href="http://blog.andrewawhitaker.com/atom.xml" rel="self"/>
  <link href="http://blog.andrewawhitaker.com/"/>
  <updated>2014-06-20T20:17:21-04:00</updated>
  <id>http://blog.andrewawhitaker.com/</id>
  <author>
    <name><![CDATA[Andrew Whitaker]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[QueryOver Series - Part 4: Transforming]]></title>
    <link href="http://blog.andrewawhitaker.com/blog/2014/06/19/queryover-series-part-4-transforming/"/>
    <updated>2014-06-19T18:51:00-04:00</updated>
    <id>http://blog.andrewawhitaker.com/blog/2014/06/19/queryover-series-part-4-transforming</id>
    <content type="html"><![CDATA[<p>You might have noticed that the last post in the series always projects each result row into an <code>object[]</code>. This might have made you wonder if there&rsquo;s a better way to get results from a QueryOver query. Well there is! It&rsquo;s called transforming.</p>

<p>In the context of an NHibernate query, a <em>transformer</em> is simply a class that transforms each row from a query into an instance of an object. NHibernate comes with several and allows you to easily create a custom transformer if you&rsquo;d like.</p>

<p>Transformers are supplied to the <code>TransformUsing</code> function on an instance of <code>IQueryOver&lt;TRoot, TSubtype&gt;</code>. For example, here&rsquo;s how you would use <code>Transformers.DistinctRootEntity</code> (which I&rsquo;ll go into more detail later about):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="kt">var</span> <span class="n">results</span> <span class="p">=</span>
</span><span class='line'>    <span class="n">session</span><span class="p">.</span><span class="n">QueryOver</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;()</span>
</span><span class='line'>        <span class="p">.</span><span class="n">TransformUsing</span><span class="p">(</span><span class="n">Transformers</span><span class="p">.</span><span class="n">DistinctRootEntity</span><span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="n">List</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;();</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Using the built-in transformers</h3>

<p>NHibernate supplies several built-in transformers in the <code>NHibernate.Transform</code> namespace. These may be all you need in your application since they cover most use cases. I&rsquo;ll go over each built-in transformer and how to use it.</p>

<h4><code>DistinctRootEntity</code></h4>

<p>This transformer works the way you&rsquo;d think it would: it transforms the query results into a list of <em>distinct</em> entities of the <em>root</em> type. What&rsquo;s the <em>root</em> type? Well if you read <a href="../../../../2014/03/12/queryover-series-part-1-why-queryover/">part 1</a>, you&rsquo;ll remember that a QueryOver query deals with two types, <code>TRoot</code> and <code>TSubType</code>. the root type is simply <code>TRoot</code>.</p>

<p>For example, here&rsquo;s a query that returns a list of all <code>Product</code>s:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="c1">// TRoot is Product</span>
</span><span class='line'><span class="n">IList</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;</span> <span class="n">results</span> <span class="p">=</span> <span class="n">session</span><span class="p">.</span><span class="n">QueryOver</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;()</span>
</span><span class='line'>    <span class="p">.</span><span class="n">TransformUsing</span><span class="p">(</span><span class="n">Transformers</span><span class="p">.</span><span class="n">DistinctRootEntity</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="n">List</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;();</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see, using <code>DistinctRootEntity</code> allows us to get a list of entities easily. This example doesn&rsquo;t address the <em>distinct</em> part of <code>DistinctRootEntity</code>. Here&rsquo;s another, more interesting example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">IList</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;</span> <span class="n">results</span> <span class="p">=</span> <span class="n">session</span><span class="p">.</span><span class="n">QueryOver</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;()</span>
</span><span class='line'>    <span class="p">.</span><span class="n">JoinQueryOver</span><span class="p">(</span><span class="n">pr</span> <span class="p">=&gt;</span> <span class="n">pr</span><span class="p">.</span><span class="n">TransactionHistory</span><span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="n">Where</span><span class="p">(</span><span class="n">th</span> <span class="p">=&gt;</span> <span class="n">th</span><span class="p">.</span><span class="n">ActualCost</span> <span class="p">&gt;</span> <span class="m">2.0</span><span class="n">M</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="n">TransformUsing</span><span class="p">(</span><span class="n">Transformers</span><span class="p">.</span><span class="n">DistinctRootEntity</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="n">List</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;();</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is more interesting because a <code>Product</code> might have many related rows in <code>TransactionHistory</code>. The join would cause each <code>Product</code> to appear as many times as it has <code>TransactionHistory</code> records, which we probably don&rsquo;t want if we&rsquo;re just trying to find all <code>Product</code>s that were ever priced over $2.00.</p>

<p>Here&rsquo;s the SQL the above query generates:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span>
</span><span class='line'>    <span class="n">this_</span><span class="p">.</span><span class="n">ProductID</span> <span class="k">as</span> <span class="n">ProductID7_1_</span><span class="p">,</span>
</span><span class='line'>    <span class="c1">-- All product columns</span>
</span><span class='line'>    <span class="n">transactio1_</span><span class="p">.</span><span class="n">TransactionID</span> <span class="k">as</span> <span class="n">Transact1_13_0_</span><span class="p">,</span>
</span><span class='line'>    <span class="c1">-- All TransactionHistory columns</span>
</span><span class='line'><span class="k">FROM</span>
</span><span class='line'>    <span class="n">Production</span><span class="p">.</span><span class="n">Product</span> <span class="n">this_</span>
</span><span class='line'><span class="k">inner</span> <span class="k">join</span>
</span><span class='line'>    <span class="n">Production</span><span class="p">.</span><span class="n">TransactionHistory</span> <span class="n">transactio1_</span>
</span><span class='line'>        <span class="k">on</span> <span class="n">this_</span><span class="p">.</span><span class="n">ProductID</span><span class="o">=</span><span class="n">transactio1_</span><span class="p">.</span><span class="n">ProductID</span>
</span><span class='line'><span class="k">WHERE</span>
</span><span class='line'>    <span class="n">transactio1_</span><span class="p">.</span><span class="n">ActualCost</span> <span class="o">&gt;</span> <span class="mi">2</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The result we  get back is a list of distinct <code>Product</code>s.</p>

<p><code>DistinctRootEntity</code> is most useful if you have a simple query in which you need instances of an entity and may or may not want to do filtering on some related entities.</p>

<h4><code>AliasToEntityMap</code></h4>

<p>This transformer allows you to transform each row of the result set into an <code>IDictionary</code> (hash table). Unfortunately it&rsquo;s not a generic <code>IDictionary</code>. The keys are strings containing the aliases you defined in the query, and the values are entities. This is best explained with an example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">TransactionHistory</span> <span class="n">historyAlias</span> <span class="p">=</span> <span class="k">null</span><span class="p">;</span>
</span><span class='line'><span class="n">Product</span> <span class="n">productAlias</span> <span class="p">=</span> <span class="k">null</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">IList</span><span class="p">&lt;</span><span class="n">IDictionary</span><span class="p">&gt;</span> <span class="n">results</span> <span class="p">=</span> <span class="n">session</span><span class="p">.</span><span class="n">QueryOver</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;(()</span> <span class="p">=&gt;</span> <span class="n">productAlias</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="n">JoinQueryOver</span><span class="p">(</span><span class="n">pr</span> <span class="p">=&gt;</span> <span class="n">pr</span><span class="p">.</span><span class="n">TransactionHistory</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="n">historyAlias</span><span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="n">Where</span><span class="p">(</span><span class="n">th</span> <span class="p">=&gt;</span> <span class="n">th</span><span class="p">.</span><span class="n">ActualCost</span> <span class="p">&gt;</span> <span class="m">2.0</span><span class="n">M</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="n">TransformUsing</span><span class="p">(</span><span class="n">Transformers</span><span class="p">.</span><span class="n">AliasToEntityMap</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="n">Take</span><span class="p">(</span><span class="m">10</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="n">List</span><span class="p">&lt;</span><span class="n">IDictionary</span><span class="p">&gt;();</span>
</span></code></pre></td></tr></table></div></figure>


<p>Each item in <code>results</code> is an <code>IDictionary</code>. This <code>IDictionary</code>&rsquo;s keys are the <em>aliases</em> we assigned while building our query. For example, if you wanted to get the first row&rsquo;s <code>TransactionHistory</code> entity, you would write:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">TransactionHistory</span> <span class="n">history</span> <span class="p">=</span> <span class="p">(</span><span class="n">TransactionHistory</span><span class="p">)</span><span class="n">results</span><span class="p">[</span><span class="m">0</span><span class="p">][</span><span class="s">&quot;historyAlias&quot;</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>This might seem a bit odd at first, but using <code>AliasToEntityMap</code> can prove useful if you need to retrieve multiple entities in a single query.</p>

<h4><code>PassThrough</code></h4>

<p>This transformer appears to be quite similar to <code>AliasToEntityMap</code> in that it generates a collection of entities for each row in the resultset. I say &ldquo;appears&rdquo; because I haven&rsquo;t had much experience with it and I cannot find much about it online. I&rsquo;ll add to this post if I come across anything interesting.</p>

<p>Anyway for a simple example it seems to place an instance of an entity from the query in a slot in an <code>object</code> array in <em>reverse</em> order from when it was added to the query. For example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">IList</span><span class="p">&lt;</span><span class="kt">object</span><span class="p">[]&gt;</span> <span class="n">results</span> <span class="p">=</span> <span class="n">session</span><span class="p">.</span><span class="n">QueryOver</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;()</span>
</span><span class='line'>    <span class="p">.</span><span class="n">JoinAlias</span><span class="p">(</span><span class="n">pr</span> <span class="p">=&gt;</span> <span class="n">pr</span><span class="p">.</span><span class="n">Reviews</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="n">reviewAlias</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="n">JoinQueryOver</span><span class="p">(</span><span class="n">pr</span> <span class="p">=&gt;</span> <span class="n">pr</span><span class="p">.</span><span class="n">TransactionHistory</span><span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="n">Where</span><span class="p">(</span><span class="n">th</span> <span class="p">=&gt;</span> <span class="n">th</span><span class="p">.</span><span class="n">ActualCost</span> <span class="p">&gt;</span> <span class="m">2.0</span><span class="n">M</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="n">TransformUsing</span><span class="p">(</span><span class="n">Transformers</span><span class="p">.</span><span class="n">PassThrough</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="n">Take</span><span class="p">(</span><span class="m">10</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="n">List</span><span class="p">&lt;</span><span class="kt">object</span><span class="p">[]&gt;();</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">foreach</span> <span class="p">(</span><span class="kt">object</span><span class="p">[]</span> <span class="n">result</span> <span class="k">in</span> <span class="n">results</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">ProductReview</span> <span class="n">review</span> <span class="p">=</span> <span class="p">(</span><span class="n">ProductReview</span><span class="p">)</span><span class="n">result</span><span class="p">[</span><span class="m">0</span><span class="p">];</span>
</span><span class='line'>    <span class="n">TransactionHistory</span> <span class="n">t</span> <span class="p">=</span> <span class="p">(</span><span class="n">TransactionHistory</span><span class="p">)</span><span class="n">result</span><span class="p">[</span><span class="m">1</span><span class="p">];</span>
</span><span class='line'>    <span class="n">Product</span> <span class="n">p</span> <span class="p">=</span> <span class="p">(</span><span class="n">Product</span><span class="p">)</span><span class="n">result</span><span class="p">[</span><span class="m">2</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see, <code>result[0]</code> is a <code>ProductReview</code>, <code>result[1]</code> is a <code>TransactionHistory</code> and <code>result[2]</code> is the <code>Product</code> itself.</p>

<h4><code>RootEntity</code></h4>

<p><code>RootEntity</code> is similar to <code>DistinctRootEntity</code> in that it projects a list of <code>TRoot</code>. The difference is that the results are <em>not</em> distinct. Therefore if you join on a related table that multiplies the root entity, you&rsquo;ll get back that entity many times for each related row. Here&rsquo;s the example from <code>DistinctRootEntity</code> again, except using <code>RootEntity</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">IList</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;</span> <span class="n">results</span> <span class="p">=</span> <span class="n">session</span><span class="p">.</span><span class="n">QueryOver</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;()</span>
</span><span class='line'>    <span class="p">.</span><span class="n">JoinQueryOver</span><span class="p">(</span><span class="n">pr</span> <span class="p">=&gt;</span> <span class="n">pr</span><span class="p">.</span><span class="n">TransactionHistory</span><span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="n">Where</span><span class="p">(</span><span class="n">th</span> <span class="p">=&gt;</span> <span class="n">th</span><span class="p">.</span><span class="n">ActualCost</span> <span class="p">&gt;</span> <span class="m">2.0</span><span class="n">M</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="n">TransformUsing</span><span class="p">(</span><span class="n">Transformers</span><span class="p">.</span><span class="n">RootEntity</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="n">List</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;();</span>
</span></code></pre></td></tr></table></div></figure>


<p>This will return any <code>Products</code> with a <code>TransactionHistory</code> that has an <code>ActualCost</code> over $2.00, but will not remove duplicate <code>Product</code> records.</p>

<h4><code>ToList</code></h4>

<p>This transformer works very similarly to not specifying a transformer at all and getting back an <code>IList&lt;object[]&gt;</code>. The difference here is that you&rsquo;ll get back an <code>IList&lt;IList&gt;</code> instead.</p>

<p>For example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">Product</span> <span class="n">productAlias</span> <span class="p">=</span> <span class="k">null</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">IList</span><span class="p">&lt;</span><span class="n">IList</span><span class="p">&gt;</span> <span class="n">results</span> <span class="p">=</span> <span class="n">session</span><span class="p">.</span><span class="n">QueryOver</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;(()</span> <span class="p">=&gt;</span> <span class="n">productAlias</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="n">JoinQueryOver</span><span class="p">(</span><span class="n">pr</span> <span class="p">=&gt;</span> <span class="n">pr</span><span class="p">.</span><span class="n">TransactionHistory</span><span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="n">Where</span><span class="p">(</span><span class="n">th</span> <span class="p">=&gt;</span> <span class="n">th</span><span class="p">.</span><span class="n">ActualCost</span> <span class="p">&gt;</span> <span class="m">2.0</span><span class="n">M</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="n">TransformUsing</span><span class="p">(</span><span class="n">Transformers</span><span class="p">.</span><span class="n">ToList</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="n">SelectList</span><span class="p">(</span><span class="n">list</span> <span class="p">=&gt;</span> <span class="n">list</span>
</span><span class='line'>        <span class="p">.</span><span class="n">Select</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="n">productAlias</span><span class="p">.</span><span class="n">Id</span><span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="n">Select</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="n">productAlias</span><span class="p">.</span><span class="n">Name</span><span class="p">)</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="n">List</span><span class="p">&lt;</span><span class="n">IList</span><span class="p">&gt;();</span>
</span><span class='line'>
</span><span class='line'><span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">results</span><span class="p">[</span><span class="m">0</span><span class="p">][</span><span class="m">0</span><span class="p">]);</span> <span class="c1">// product Id</span>
</span><span class='line'><span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">results</span><span class="p">[</span><span class="m">0</span><span class="p">][</span><span class="m">1</span><span class="p">]);</span> <span class="c1">// product Name</span>
</span></code></pre></td></tr></table></div></figure>


<h4><code>AliasToBean</code></h4>

<p>In my experience, this transformer is by far the most useful. It allows you to transform each row into an instance of a type you specify. You can project columns from different entities into properties on each instance.</p>

<p>Lets use <code>AliasToBean</code> to get a list of <code>HighestProductReviewDTO</code>s. Here&rsquo;s the definition for <code>HighestProductReviewDTO</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">HighestProductReviewDTO</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="kt">int</span> <span class="n">ProductID</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="kt">string</span> <span class="n">ProductName</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="kt">int</span> <span class="n">Rating</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="kt">string</span> <span class="n">Comments</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>NHibernate requires that the DTO have a parameterless constructor so that it can create an instance of your class for each row it retrieves.</p>

<p>We&rsquo;re going to get a list of <code>Product</code>s that have reviews, followed by some information from that <code>Product</code>&rsquo;s highest review. Here&rsquo;s what our query looks like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">IList</span><span class="p">&lt;</span><span class="n">HighestProductReviewDTO</span><span class="p">&gt;</span> <span class="n">highestReviews</span> <span class="p">=</span>
</span><span class='line'>    <span class="n">session</span><span class="p">.</span><span class="n">QueryOver</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;(()</span> <span class="p">=&gt;</span> <span class="n">productAlias</span><span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="n">JoinQueryOver</span><span class="p">(</span><span class="n">pr</span> <span class="p">=&gt;</span> <span class="n">pr</span><span class="p">.</span><span class="n">Reviews</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="n">productReviewAlias</span><span class="p">)</span>
</span><span class='line'>            <span class="p">.</span><span class="n">WithSubquery</span><span class="p">.</span><span class="n">Where</span><span class="p">(</span><span class="n">pr</span> <span class="p">=&gt;</span> <span class="n">pr</span><span class="p">.</span><span class="n">Id</span> <span class="p">==</span> <span class="n">QueryOver</span><span class="p">.</span><span class="n">Of</span><span class="p">&lt;</span><span class="n">ProductReview</span><span class="p">&gt;()</span>
</span><span class='line'>                <span class="p">.</span><span class="n">Where</span><span class="p">(</span><span class="n">rev</span> <span class="p">=&gt;</span> <span class="n">rev</span><span class="p">.</span><span class="n">Product</span><span class="p">.</span><span class="n">Id</span> <span class="p">==</span> <span class="n">productAlias</span><span class="p">.</span><span class="n">Id</span><span class="p">)</span>
</span><span class='line'>                <span class="p">.</span><span class="n">OrderBy</span><span class="p">(</span><span class="n">rev</span> <span class="p">=&gt;</span> <span class="n">rev</span><span class="p">.</span><span class="n">Rating</span><span class="p">).</span><span class="n">Desc</span><span class="p">()</span>
</span><span class='line'>                <span class="p">.</span><span class="n">Select</span><span class="p">(</span><span class="n">rev</span> <span class="p">=&gt;</span> <span class="n">rev</span><span class="p">.</span><span class="n">Id</span><span class="p">)</span>
</span><span class='line'>                <span class="p">.</span><span class="n">Take</span><span class="p">(</span><span class="m">1</span><span class="p">)</span>
</span><span class='line'>                <span class="p">.</span><span class="n">As</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;())</span>
</span><span class='line'>        <span class="p">.</span><span class="n">SelectList</span><span class="p">(</span><span class="n">list</span> <span class="p">=&gt;</span> <span class="n">list</span>
</span><span class='line'>            <span class="p">.</span><span class="n">Select</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="n">productAlias</span><span class="p">.</span><span class="n">Id</span><span class="p">).</span><span class="n">WithAlias</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="n">result</span><span class="p">.</span><span class="n">ProductID</span><span class="p">)</span>
</span><span class='line'>            <span class="p">.</span><span class="n">Select</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="n">productAlias</span><span class="p">.</span><span class="n">Name</span><span class="p">).</span><span class="n">WithAlias</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="n">result</span><span class="p">.</span><span class="n">ProductName</span><span class="p">)</span>
</span><span class='line'>            <span class="p">.</span><span class="n">Select</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="n">productReviewAlias</span><span class="p">.</span><span class="n">Rating</span><span class="p">).</span><span class="n">WithAlias</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="n">result</span><span class="p">.</span><span class="n">Rating</span><span class="p">)</span>
</span><span class='line'>            <span class="p">.</span><span class="n">Select</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="n">productReviewAlias</span><span class="p">.</span><span class="n">Comments</span><span class="p">).</span><span class="n">WithAlias</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="n">result</span><span class="p">.</span><span class="n">Comments</span><span class="p">)</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="n">TransformUsing</span><span class="p">(</span><span class="n">Transformers</span><span class="p">.</span><span class="n">AliasToBean</span><span class="p">&lt;</span><span class="n">HighestProductReviewDTO</span><span class="p">&gt;())</span>
</span><span class='line'>        <span class="p">.</span><span class="n">List</span><span class="p">&lt;</span><span class="n">HighestProductReviewDTO</span><span class="p">&gt;();</span>
</span></code></pre></td></tr></table></div></figure>


<p>Pay particular attention to the <code>.WithAlias</code> calls at the end of the <code>.Select</code> calls inside of <code>SelectList</code>. These are what tell NHibernate to associate particular column values in each row retrieved with the correct property in our DTO class.</p>

<p>In case you&rsquo;re curious, here&rsquo;s the SQL that NHibernate generated:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span>
</span><span class='line'>    <span class="n">this_</span><span class="p">.</span><span class="n">ProductID</span> <span class="k">as</span> <span class="n">y0_</span><span class="p">,</span>
</span><span class='line'>    <span class="n">this_</span><span class="p">.</span><span class="n">Name</span> <span class="k">as</span> <span class="n">y1_</span><span class="p">,</span>
</span><span class='line'>    <span class="n">productrev1_</span><span class="p">.</span><span class="n">Rating</span> <span class="k">as</span> <span class="n">y2_</span><span class="p">,</span>
</span><span class='line'>    <span class="n">productrev1_</span><span class="p">.</span><span class="n">Comments</span> <span class="k">as</span> <span class="n">y3_</span>
</span><span class='line'><span class="k">FROM</span>
</span><span class='line'>    <span class="n">Production</span><span class="p">.</span><span class="n">Product</span> <span class="n">this_</span>
</span><span class='line'><span class="k">inner</span> <span class="k">join</span>
</span><span class='line'>    <span class="n">Production</span><span class="p">.</span><span class="n">ProductReview</span> <span class="n">productrev1_</span>
</span><span class='line'>        <span class="k">on</span> <span class="n">this_</span><span class="p">.</span><span class="n">ProductID</span><span class="o">=</span><span class="n">productrev1_</span><span class="p">.</span><span class="n">ProductID</span>
</span><span class='line'><span class="k">WHERE</span>
</span><span class='line'>    <span class="n">productrev1_</span><span class="p">.</span><span class="n">ProductReviewID</span> <span class="o">=</span> <span class="p">(</span>
</span><span class='line'>        <span class="k">SELECT</span>
</span><span class='line'>            <span class="n">TOP</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span>  <span class="n">this_0_</span><span class="p">.</span><span class="n">ProductReviewID</span> <span class="k">as</span> <span class="n">y0_</span>
</span><span class='line'>        <span class="k">FROM</span>
</span><span class='line'>            <span class="n">Production</span><span class="p">.</span><span class="n">ProductReview</span> <span class="n">this_0_</span>
</span><span class='line'>        <span class="k">WHERE</span>
</span><span class='line'>            <span class="n">this_0_</span><span class="p">.</span><span class="n">ProductID</span> <span class="o">=</span> <span class="n">this_</span><span class="p">.</span><span class="n">ProductID</span>
</span><span class='line'>        <span class="k">ORDER</span> <span class="k">BY</span>
</span><span class='line'>            <span class="n">this_0_</span><span class="p">.</span><span class="n">Rating</span> <span class="k">desc</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>AliasToBean</code> is extremely useful. It allows us to specify exactly what columns we need and transform the resulting rows into instances of simple types. However it does have some limitations:</p>

<ul>
<li>The class you&rsquo;re projecting to must have a parameterless constructor</li>
<li>You cannot populate collections (e.g., if you had a class with <code>ProductID</code> and a collection of <code>ProductReviews</code> you could not do that in one step using <code>AliasToBean</code>)</li>
<li>You cannot populate full entities (e.g., <code>.Select(() =&gt; productReview.Product).WithAlias(() =&gt; result.Product)</code>)</li>
</ul>


<p>While the second limitation is unfortunate, you <em>can</em> specify a collection type in your result class and write a separate query to populate it. You can possibly even do this in one database round trip using the <code>.Future</code> method, which I&rsquo;ll talk about in a later post.</p>

<h4><code>AliasToBeanConstructor</code></h4>

<p><code>AliasToBeanConstructor</code> is similar to <code>AliasToBean</code>, except that it uses a result type&rsquo;s constructor to create new objects from result rows. Here&rsquo;s our example from above slightly modified to use <code>AliasToBeanConstructor</code> instead.</p>

<p>Here&rsquo;s our modified result class:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">HighestProductReviewDTO</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="nf">HighestProductReviewDTO</span><span class="p">(</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">productId</span><span class="p">,</span> <span class="kt">string</span> <span class="n">productName</span><span class="p">,</span> <span class="kt">int</span> <span class="n">rating</span><span class="p">,</span> <span class="kt">string</span> <span class="n">comments</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="n">ProductID</span> <span class="p">=</span> <span class="n">productId</span><span class="p">;</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="n">ProductName</span> <span class="p">=</span> <span class="n">productName</span><span class="p">;</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="n">Rating</span> <span class="p">=</span> <span class="n">rating</span><span class="p">;</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="n">Comments</span> <span class="p">=</span> <span class="n">comments</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="kt">int</span> <span class="n">ProductID</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="kt">string</span> <span class="n">ProductName</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="kt">int</span> <span class="n">Rating</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="kt">string</span> <span class="n">Comments</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And here&rsquo;s our new QueryOver query:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">IList</span><span class="p">&lt;</span><span class="n">HighestProductReviewDTO</span><span class="p">&gt;</span> <span class="n">highestReviews</span> <span class="p">=</span>
</span><span class='line'>    <span class="n">session</span><span class="p">.</span><span class="n">QueryOver</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;(()</span> <span class="p">=&gt;</span> <span class="n">productAlias</span><span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="n">JoinQueryOver</span><span class="p">(</span><span class="n">pr</span> <span class="p">=&gt;</span> <span class="n">pr</span><span class="p">.</span><span class="n">Reviews</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="n">productReviewAlias</span><span class="p">)</span>
</span><span class='line'>            <span class="p">.</span><span class="n">WithSubquery</span><span class="p">.</span><span class="n">Where</span><span class="p">(</span><span class="n">pr</span> <span class="p">=&gt;</span> <span class="n">pr</span><span class="p">.</span><span class="n">Id</span> <span class="p">==</span> <span class="n">QueryOver</span><span class="p">.</span><span class="n">Of</span><span class="p">&lt;</span><span class="n">ProductReview</span><span class="p">&gt;()</span>
</span><span class='line'>                <span class="p">.</span><span class="n">Where</span><span class="p">(</span><span class="n">rev</span> <span class="p">=&gt;</span> <span class="n">rev</span><span class="p">.</span><span class="n">Product</span><span class="p">.</span><span class="n">Id</span> <span class="p">==</span> <span class="n">productAlias</span><span class="p">.</span><span class="n">Id</span><span class="p">)</span>
</span><span class='line'>                <span class="p">.</span><span class="n">OrderBy</span><span class="p">(</span><span class="n">rev</span> <span class="p">=&gt;</span> <span class="n">rev</span><span class="p">.</span><span class="n">Rating</span><span class="p">).</span><span class="n">Desc</span><span class="p">()</span>
</span><span class='line'>                <span class="p">.</span><span class="n">Select</span><span class="p">(</span><span class="n">rev</span> <span class="p">=&gt;</span> <span class="n">rev</span><span class="p">.</span><span class="n">Id</span><span class="p">)</span>
</span><span class='line'>                <span class="p">.</span><span class="n">Take</span><span class="p">(</span><span class="m">1</span><span class="p">)</span>
</span><span class='line'>                <span class="p">.</span><span class="n">As</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;())</span>
</span><span class='line'>        <span class="p">.</span><span class="n">SelectList</span><span class="p">(</span><span class="n">list</span> <span class="p">=&gt;</span> <span class="n">list</span>
</span><span class='line'>            <span class="p">.</span><span class="n">Select</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="n">productAlias</span><span class="p">.</span><span class="n">Id</span><span class="p">)</span>
</span><span class='line'>            <span class="p">.</span><span class="n">Select</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="n">productAlias</span><span class="p">.</span><span class="n">Name</span><span class="p">)</span>
</span><span class='line'>            <span class="p">.</span><span class="n">Select</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="n">productReviewAlias</span><span class="p">.</span><span class="n">Rating</span><span class="p">)</span>
</span><span class='line'>            <span class="p">.</span><span class="n">Select</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="n">productReviewAlias</span><span class="p">.</span><span class="n">Comments</span><span class="p">)</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="n">TransformUsing</span><span class="p">(</span><span class="n">Transformers</span><span class="p">.</span><span class="n">AliasToBeanConstructor</span><span class="p">(</span>
</span><span class='line'>            <span class="k">typeof</span><span class="p">(</span><span class="n">HighestProductReviewDTO</span><span class="p">).</span><span class="n">GetConstructors</span><span class="p">().</span><span class="n">First</span><span class="p">()))</span>
</span><span class='line'>        <span class="p">.</span><span class="n">List</span><span class="p">&lt;</span><span class="n">HighestProductReviewDTO</span><span class="p">&gt;();</span>
</span></code></pre></td></tr></table></div></figure>


<p>We&rsquo;re passing <a href="http://msdn.microsoft.com/en-us/library/system.reflection.constructorinfo(v=vs.110).aspx"><code>ConstructorInfo</code></a> to <code>AliasToBeanConstructor</code> which we get using <code>GetConstructors</code>. NHibernate calls our constructor with the column values we&rsquo;re retrieving with our <code>SelectList</code>. Note that <em>all</em> items in the <code>SelectList</code> are passed to the constructor in the order you add them.</p>

<h3>Creating your own transformer</h3>

<p>The built in transformers are great, but if you need your own result transformer, that&rsquo;s possible too.</p>

<p>For example, let&rsquo;s say we want to call a callback function every time a row is transformed. We could also iterate over our results after retrieving them, but this gives us a way to apply any modifications we might want while we&rsquo;re transforming the row. Here&rsquo;s our new transformer class:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="c1">/// &lt;summary&gt;</span>
</span><span class='line'><span class="c1">/// A result transformer that calls a callback after successfully transforming a result row </span>
</span><span class='line'><span class="c1">/// into an instance of T</span>
</span><span class='line'><span class="c1">/// &lt;/summary&gt;</span>
</span><span class='line'><span class="c1">/// &lt;typeparam name=&quot;T&quot;&gt;The result type&lt;/typeparam&gt;</span>
</span><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">AliasToBeanWithCallbackTransformer</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="p">:</span> <span class="n">IResultTransformer</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">private</span> <span class="k">readonly</span> <span class="n">AliasToBeanResultTransformer</span> <span class="n">aliasToBeanTransformer</span><span class="p">;</span>
</span><span class='line'>    <span class="k">private</span> <span class="k">readonly</span> <span class="n">Action</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="n">callback</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="nf">AliasToBeanWithCallbackTransformer</span><span class="p">(</span><span class="n">Action</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="n">callback</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="n">aliasToBeanTransformer</span> <span class="p">=</span> <span class="k">new</span> <span class="n">AliasToBeanResultTransformer</span><span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="n">T</span><span class="p">));</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="n">callback</span> <span class="p">=</span> <span class="n">callback</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="n">IList</span> <span class="nf">TransformList</span><span class="p">(</span><span class="n">IList</span> <span class="n">collection</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="n">aliasToBeanTransformer</span><span class="p">.</span><span class="n">TransformList</span><span class="p">(</span><span class="n">collection</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="kt">object</span> <span class="nf">TransformTuple</span><span class="p">(</span><span class="kt">object</span><span class="p">[]</span> <span class="n">tuple</span><span class="p">,</span> <span class="kt">string</span><span class="p">[]</span> <span class="n">aliases</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="kt">object</span> <span class="n">result</span> <span class="p">=</span> <span class="k">this</span><span class="p">.</span><span class="n">aliasToBeanTransformer</span><span class="p">.</span><span class="n">TransformTuple</span><span class="p">(</span><span class="n">tuple</span><span class="p">,</span> <span class="n">aliases</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Call the callback before returning the result.</span>
</span><span class='line'>        <span class="n">callback</span><span class="p">((</span><span class="n">T</span><span class="p">)</span><span class="n">result</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this example, all I&rsquo;ve done is wrap <code>AliasToBeanResultTransformer</code> in a class that calls the callback the user specifies after calling <code>AliasToBeanResultTransformer</code>&rsquo;s <code>TransformTuple</code> method. I&rsquo;ll use this transformer in an example that retrieves product review information but with an added property, <code>DateRetrieved</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">ProductReviewDTO</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="kt">int</span> <span class="n">ProductReviewID</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="kt">int</span> <span class="n">Rating</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="kt">string</span> <span class="n">Comments</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="n">DateTime</span> <span class="n">DateRetrieved</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can use the transformer to assign <code>DateRetrieved</code> after creating a new <code>ProductReviewDTO</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">DateTime</span> <span class="n">dateRetrieved</span> <span class="p">=</span> <span class="n">DateTime</span><span class="p">.</span><span class="n">Now</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">IList</span><span class="p">&lt;</span><span class="n">ProductReviewDTO</span><span class="p">&gt;</span> <span class="n">highestReviews</span> <span class="p">=</span>
</span><span class='line'>    <span class="n">session</span><span class="p">.</span><span class="n">QueryOver</span><span class="p">&lt;</span><span class="n">ProductReview</span><span class="p">&gt;()</span>
</span><span class='line'>        <span class="p">.</span><span class="n">SelectList</span><span class="p">(</span><span class="n">list</span> <span class="p">=&gt;</span> <span class="n">list</span>
</span><span class='line'>            <span class="p">.</span><span class="n">Select</span><span class="p">(</span><span class="n">pr</span> <span class="p">=&gt;</span> <span class="n">pr</span><span class="p">.</span><span class="n">Comments</span><span class="p">).</span><span class="n">WithAlias</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="n">result</span><span class="p">.</span><span class="n">Comments</span><span class="p">)</span>
</span><span class='line'>            <span class="p">.</span><span class="n">Select</span><span class="p">(</span><span class="n">pr</span> <span class="p">=&gt;</span> <span class="n">pr</span><span class="p">.</span><span class="n">Id</span><span class="p">).</span><span class="n">WithAlias</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="n">result</span><span class="p">.</span><span class="n">ProductReviewID</span><span class="p">)</span>
</span><span class='line'>            <span class="p">.</span><span class="n">Select</span><span class="p">(</span><span class="n">pr</span> <span class="p">=&gt;</span> <span class="n">pr</span><span class="p">.</span><span class="n">Rating</span><span class="p">).</span><span class="n">WithAlias</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="n">result</span><span class="p">.</span><span class="n">Rating</span><span class="p">)</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>        <span class="c1">// Assign &quot;DateRetrieved correctly:</span>
</span><span class='line'>        <span class="p">.</span><span class="n">TransformUsing</span><span class="p">(</span><span class="k">new</span> <span class="n">AliasToBeanWithCallbackTransformer</span><span class="p">&lt;</span><span class="n">ProductReviewDTO</span><span class="p">&gt;(</span>
</span><span class='line'>            <span class="n">hp</span> <span class="p">=&gt;</span> <span class="n">hp</span><span class="p">.</span><span class="n">DateRetrieved</span> <span class="p">=</span> <span class="n">dateRetrieved</span><span class="p">))</span>
</span><span class='line'>        <span class="p">.</span><span class="n">Take</span><span class="p">(</span><span class="m">10</span><span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="n">List</span><span class="p">&lt;</span><span class="n">ProductReviewDTO</span><span class="p">&gt;();</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is a simple example, but it should demonstrate how easy it is to extend the built in transformers. It would be nice if we could subclass the built in transformers, but unfortunately the methods we would need to override are not marked <code>virtual</code>.</p>

<p>A good place to look for how to write a transformer is the <a href="https://github.com/nhibernate/nhibernate-core/tree/master/src/NHibernate/Transform">NHibernate source code itself</a>.</p>

<h3>Summary</h3>

<p>I covered a lot in this post, but I was aiming to be comprehensive with each transformer type. This should enable you to effectively use the built in transformers and create your own if you need to.</p>

<ul>
<li>There are several built in result transformers in the <code>NHibernate.Transform</code> namespace.</li>
<li><code>DistinctRootEntity</code> and <code>RootEntity</code> retrieve a list of the &ldquo;root&rdquo; of the QueryOver query</li>
<li><code>AliasToEntityMap</code> and <code>PassThrough</code> retrieve the entities present in the QueryOver query in an <code>IDictionary</code> and <code>object[]</code>, respectively.</li>
<li><code>AliasToBean</code> and <code>AliasToBeanConstructor</code> are powerful transformers that allow you to create a list of instances of a type you specify.</li>
<li>You can create your own result transformer pretty easily to suit your needs.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[QueryOver Series - Part 3: Selecting]]></title>
    <link href="http://blog.andrewawhitaker.com/blog/2014/03/22/queryover-series-part-3-selecting-and-transforming/"/>
    <updated>2014-03-22T11:01:46-04:00</updated>
    <id>http://blog.andrewawhitaker.com/blog/2014/03/22/queryover-series-part-3-selecting-and-transforming</id>
    <content type="html"><![CDATA[<p>In this post I&rsquo;ll go over building the <code>SELECT</code> statement with NHibernate QueryOver. I&rsquo;ll also cover the different ways you can actually get a result back from your query.</p>

<h3>Selecting a single property</h3>

<p>In the simplest case, you&rsquo;ll want to select a single column from a single row. For example, if you wanted to retrieve a single <code>Product</code>&rsquo;s <code>Name</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="kt">string</span> <span class="n">name</span> <span class="p">=</span> <span class="n">session</span><span class="p">.</span><span class="n">QueryOver</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;()</span>
</span><span class='line'>    <span class="p">.</span><span class="n">Where</span><span class="p">(</span><span class="n">p</span> <span class="p">=&gt;</span> <span class="n">p</span><span class="p">.</span><span class="n">Id</span> <span class="p">==</span> <span class="m">1</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="n">Select</span><span class="p">(</span><span class="n">p</span> <span class="p">=&gt;</span> <span class="n">p</span><span class="p">.</span><span class="n">Name</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="n">SingleOrDefault</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;();</span>
</span></code></pre></td></tr></table></div></figure>


<p>Which yields the following SQL:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span>
</span><span class='line'>    <span class="n">this_</span><span class="p">.</span><span class="n">Name</span> <span class="k">as</span> <span class="n">y0_</span>
</span><span class='line'><span class="k">FROM</span>
</span><span class='line'>    <span class="n">Production</span><span class="p">.</span><span class="n">Product</span> <span class="n">this_</span>
</span><span class='line'><span class="k">WHERE</span>
</span><span class='line'>    <span class="n">this_</span><span class="p">.</span><span class="n">ProductID</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that if your query actually returns more than one result, NHibernate will throw an exception, letting you know that the query did not return a unique result.</p>

<p>Similarly, if you want to select a list of single properties, say the <code>Name</code> of every <code>Product</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">IList</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="n">names</span> <span class="p">=</span> <span class="n">session</span><span class="p">.</span><span class="n">QueryOver</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;()</span>
</span><span class='line'>    <span class="p">.</span><span class="n">Select</span><span class="p">(</span><span class="n">p</span> <span class="p">=&gt;</span> <span class="n">p</span><span class="p">.</span><span class="n">Name</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="n">List</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;();</span>
</span></code></pre></td></tr></table></div></figure>


<p>Generates:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span>
</span><span class='line'>    <span class="n">this_</span><span class="p">.</span><span class="n">Name</span> <span class="k">as</span> <span class="n">y0_</span>
</span><span class='line'><span class="k">FROM</span>
</span><span class='line'>    <span class="n">Production</span><span class="p">.</span><span class="n">Product</span> <span class="n">this_</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Selecting multiple properties</h3>

<p>Most of the time you won&rsquo;t want to select just one column, you&rsquo;ll want to build a whole result set. You have a few options in this area:</p>

<h4>Using <code>SelectList</code></h4>

<p><code>SelectList</code> is one way to specify a list of properties you&rsquo;d like to select. Here&rsquo;s a simple example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">IList</span><span class="p">&lt;</span><span class="kt">object</span><span class="p">[]&gt;</span> <span class="n">productInformation</span> <span class="p">=</span> <span class="n">session</span><span class="p">.</span><span class="n">QueryOver</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;()</span>
</span><span class='line'>    <span class="p">.</span><span class="n">SelectList</span><span class="p">(</span><span class="n">list</span> <span class="p">=&gt;</span> <span class="n">list</span>
</span><span class='line'>        <span class="p">.</span><span class="n">Select</span><span class="p">(</span><span class="n">p</span> <span class="p">=&gt;</span> <span class="n">p</span><span class="p">.</span><span class="n">Id</span><span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="n">Select</span><span class="p">(</span><span class="n">p</span> <span class="p">=&gt;</span> <span class="n">p</span><span class="p">.</span><span class="n">Name</span><span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="n">Select</span><span class="p">(</span><span class="n">p</span> <span class="p">=&gt;</span> <span class="n">p</span><span class="p">.</span><span class="n">StandardCost</span><span class="p">)</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="n">List</span><span class="p">&lt;</span><span class="kt">object</span><span class="p">[]&gt;();</span>
</span></code></pre></td></tr></table></div></figure>


<p>This generates the SQL you&rsquo;d expect:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span>
</span><span class='line'>    <span class="n">this_</span><span class="p">.</span><span class="n">ProductID</span> <span class="k">as</span> <span class="n">y0_</span><span class="p">,</span>
</span><span class='line'>    <span class="n">this_</span><span class="p">.</span><span class="n">Name</span> <span class="k">as</span> <span class="n">y1_</span><span class="p">,</span>
</span><span class='line'>    <span class="n">this_</span><span class="p">.</span><span class="n">StandardCost</span> <span class="k">as</span> <span class="n">y2_</span>
</span><span class='line'><span class="k">FROM</span>
</span><span class='line'>    <span class="n">Production</span><span class="p">.</span><span class="n">Product</span> <span class="n">this_</span>
</span></code></pre></td></tr></table></div></figure>


<p>Those are the basics of using <code>SelectList</code>. There are some cool things you can do with <code>SelectList</code> to build <code>SELECT</code> clauses dynamically.</p>

<p><code>SelectList</code> accepts a <code>QueryOverProjectionBuilder&lt;TRoot&gt;</code>. We can take advantage of QueryOver&rsquo;s dynamic nature to dynamically build a select list.</p>

<p>One way to do this is to create a method that accepts a <code>QueryOverProjectionBuilder&lt;TRoot&gt;</code> and has the same return type. To expand on the <code>Product</code> example above:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">static</span> <span class="n">QueryOverProjectionBuilder</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;</span> <span class="n">BuildSelectList</span><span class="p">(</span>
</span><span class='line'>    <span class="n">QueryOverProjectionBuilder</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;</span> <span class="n">list</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">bool</span> <span class="n">getName</span> <span class="p">=</span> <span class="cm">/* some condition */</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">getName</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">list</span><span class="p">.</span><span class="n">Select</span><span class="p">(</span><span class="n">p</span> <span class="p">=&gt;</span> <span class="n">p</span><span class="p">.</span><span class="n">Name</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">list</span>
</span><span class='line'>        <span class="p">.</span><span class="n">Select</span><span class="p">(</span><span class="n">p</span> <span class="p">=&gt;</span> <span class="n">p</span><span class="p">.</span><span class="n">Id</span><span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="n">Select</span><span class="p">(</span><span class="n">p</span> <span class="p">=&gt;</span> <span class="n">p</span><span class="p">.</span><span class="n">StandardCost</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">list</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can then call the method directly from <code>SelectList</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">IList</span><span class="p">&lt;</span><span class="kt">object</span><span class="p">[]&gt;</span> <span class="n">names</span> <span class="p">=</span> <span class="n">session</span><span class="p">.</span><span class="n">QueryOver</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;()</span>
</span><span class='line'>    <span class="p">.</span><span class="n">SelectList</span><span class="p">(</span><span class="n">BuildSelectList</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="n">List</span><span class="p">&lt;</span><span class="kt">object</span><span class="p">[]&gt;();</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Using <code>Projections.ProjectionList()</code></h4>

<p>Another way to build a <code>SELECT</code> clause is using <code>Projections.ProjectionList()</code>. You can pass a <code>ProjectionList</code> to the <code>.Select</code> method:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">Product</span> <span class="n">productAlias</span> <span class="p">=</span> <span class="k">null</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">session</span><span class="p">.</span><span class="n">QueryOver</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;(()</span> <span class="p">=&gt;</span> <span class="n">productAlias</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="n">Select</span><span class="p">(</span><span class="n">Projections</span><span class="p">.</span><span class="n">ProjectionList</span><span class="p">()</span>
</span><span class='line'>        <span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="n">Projections</span><span class="p">.</span><span class="n">Property</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="n">productAlias</span><span class="p">.</span><span class="n">Id</span><span class="p">))</span>
</span><span class='line'>        <span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="n">Projections</span><span class="p">.</span><span class="n">Property</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="n">productAlias</span><span class="p">.</span><span class="n">Name</span><span class="p">))</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="n">List</span><span class="p">&lt;</span><span class="kt">object</span><span class="p">[]&gt;();</span>
</span></code></pre></td></tr></table></div></figure>


<p>This generates the following SQL:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span>
</span><span class='line'>    <span class="n">this_</span><span class="p">.</span><span class="n">ProductID</span> <span class="k">as</span> <span class="n">y0_</span><span class="p">,</span>
</span><span class='line'>    <span class="n">this_</span><span class="p">.</span><span class="n">Name</span> <span class="k">as</span> <span class="n">y1_</span>
</span><span class='line'><span class="k">FROM</span>
</span><span class='line'>    <span class="n">Production</span><span class="p">.</span><span class="n">Product</span> <span class="n">this_</span>
</span></code></pre></td></tr></table></div></figure>


<p>It&rsquo;s also easy to generate dynamic <code>SELECT</code> clauses with <code>ProjectionList</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">Product</span> <span class="n">productAlias</span> <span class="p">=</span> <span class="k">null</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">ProjectionList</span> <span class="n">projectionList</span> <span class="p">=</span> <span class="n">Projections</span><span class="p">.</span><span class="n">ProjectionList</span><span class="p">()</span>
</span><span class='line'>    <span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="n">Projections</span><span class="p">.</span><span class="n">Property</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="n">productAlias</span><span class="p">.</span><span class="n">Id</span><span class="p">))</span>
</span><span class='line'>    <span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="n">Projections</span><span class="p">.</span><span class="n">Property</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="n">productAlias</span><span class="p">.</span><span class="n">StandardCost</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'><span class="kt">bool</span> <span class="n">getName</span> <span class="p">=</span> <span class="k">true</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">getName</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">projectionList</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="n">Projections</span><span class="p">.</span><span class="n">Property</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="n">productAlias</span><span class="p">.</span><span class="n">Name</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">session</span><span class="p">.</span><span class="n">QueryOver</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;(()</span> <span class="p">=&gt;</span> <span class="n">productAlias</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="n">Select</span><span class="p">(</span><span class="n">projectionList</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="n">List</span><span class="p">&lt;</span><span class="kt">object</span><span class="p">[]&gt;();</span>
</span></code></pre></td></tr></table></div></figure>


<p>I think if you&rsquo;re dynamically building the <code>SELECT</code> clause, <code>Projections.ProjectionList</code> is actually cleaner, due to the way you can easily build it outside of the query itself.</p>

<h3>Aggregates</h3>

<p>So far I&rsquo;ve looked at building simple <code>SELECT</code>s. Now I&rsquo;ll look at using aggregate functions.</p>

<p>In the simplest cases, using <code>SelectList</code> along with <code>SelectGroup</code> and the aggregate function you want will get the job done.</p>

<p>For example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">session</span><span class="p">.</span><span class="n">QueryOver</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;()</span>
</span><span class='line'>    <span class="p">.</span><span class="n">JoinQueryOver</span><span class="p">(</span><span class="n">pr</span> <span class="p">=&gt;</span> <span class="n">pr</span><span class="p">.</span><span class="n">TransactionHistory</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="n">transactionHistoryAlias</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="n">SelectList</span><span class="p">(</span><span class="n">list</span> <span class="p">=&gt;</span> <span class="n">list</span>
</span><span class='line'>        <span class="p">.</span><span class="n">SelectGroup</span><span class="p">(</span><span class="n">pr</span> <span class="p">=&gt;</span> <span class="n">pr</span><span class="p">.</span><span class="n">Id</span><span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="n">SelectCount</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="n">transactionHistoryAlias</span><span class="p">.</span><span class="n">Id</span><span class="p">)</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="n">List</span><span class="p">&lt;</span><span class="kt">object</span><span class="p">[]&gt;();</span>
</span></code></pre></td></tr></table></div></figure>


<p>Will generate:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span>
</span><span class='line'>    <span class="n">this_</span><span class="p">.</span><span class="n">ProductID</span> <span class="k">as</span> <span class="n">y0_</span><span class="p">,</span>
</span><span class='line'>    <span class="k">count</span><span class="p">(</span><span class="n">transactio1_</span><span class="p">.</span><span class="n">TransactionID</span><span class="p">)</span> <span class="k">as</span> <span class="n">y1_</span>
</span><span class='line'><span class="k">FROM</span>
</span><span class='line'>    <span class="n">Production</span><span class="p">.</span><span class="n">Product</span> <span class="n">this_</span>
</span><span class='line'><span class="k">inner</span> <span class="k">join</span>
</span><span class='line'>    <span class="n">Production</span><span class="p">.</span><span class="n">TransactionHistory</span> <span class="n">transactio1_</span>
</span><span class='line'>        <span class="k">on</span> <span class="n">this_</span><span class="p">.</span><span class="n">ProductID</span><span class="o">=</span><span class="n">transactio1_</span><span class="p">.</span><span class="n">ProductID</span>
</span><span class='line'><span class="k">GROUP</span> <span class="k">BY</span>
</span><span class='line'>    <span class="n">this_</span><span class="p">.</span><span class="n">ProductID</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can call <code>SelectGroup</code> multiple times to add more columns to group on. You&rsquo;ll notice that <code>.SelectGroup</code> adds a column to the <code>GROUP BY</code> clause as well as the <code>SELECT</code> clause.</p>

<p>You can also add a <code>HAVING</code> clause, although it is <em>not</em> intuitive at all:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="kt">var</span> <span class="n">results</span> <span class="p">=</span> <span class="n">session</span><span class="p">.</span><span class="n">QueryOver</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;()</span>
</span><span class='line'>    <span class="p">.</span><span class="n">JoinQueryOver</span><span class="p">(</span><span class="n">pr</span> <span class="p">=&gt;</span> <span class="n">pr</span><span class="p">.</span><span class="n">TransactionHistory</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="n">transactionHistoryAlias</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="n">SelectList</span><span class="p">(</span><span class="n">list</span> <span class="p">=&gt;</span> <span class="n">list</span>
</span><span class='line'>        <span class="p">.</span><span class="n">SelectGroup</span><span class="p">(</span><span class="n">pr</span> <span class="p">=&gt;</span> <span class="n">pr</span><span class="p">.</span><span class="n">Id</span><span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="n">SelectGroup</span><span class="p">(</span><span class="n">pr</span> <span class="p">=&gt;</span> <span class="n">pr</span><span class="p">.</span><span class="n">Name</span><span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="n">SelectCount</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="n">transactionHistoryAlias</span><span class="p">.</span><span class="n">Id</span><span class="p">)</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>    <span class="cm">/* Generates a HAVING clause: */</span>
</span><span class='line'>    <span class="p">.</span><span class="n">Where</span><span class="p">(</span><span class="n">Restrictions</span><span class="p">.</span><span class="n">Gt</span><span class="p">(</span>
</span><span class='line'>        <span class="n">Projections</span><span class="p">.</span><span class="n">Count</span><span class="p">(</span>
</span><span class='line'>            <span class="n">Projections</span><span class="p">.</span><span class="n">Property</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="n">transactionHistoryAlias</span><span class="p">.</span><span class="n">Id</span><span class="p">)),</span> <span class="m">5</span><span class="p">))</span>
</span><span class='line'>    <span class="p">.</span><span class="n">List</span><span class="p">&lt;</span><span class="kt">object</span><span class="p">[]&gt;();</span>
</span></code></pre></td></tr></table></div></figure>


<p>This generates the following SQL:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span>
</span><span class='line'>    <span class="n">this_</span><span class="p">.</span><span class="n">ProductID</span> <span class="k">as</span> <span class="n">y0_</span><span class="p">,</span>
</span><span class='line'>    <span class="n">this_</span><span class="p">.</span><span class="n">Name</span> <span class="k">as</span> <span class="n">y1_</span><span class="p">,</span>
</span><span class='line'>    <span class="k">count</span><span class="p">(</span><span class="n">transactio1_</span><span class="p">.</span><span class="n">TransactionID</span><span class="p">)</span> <span class="k">as</span> <span class="n">y2_</span>
</span><span class='line'><span class="k">FROM</span>
</span><span class='line'>    <span class="n">Production</span><span class="p">.</span><span class="n">Product</span> <span class="n">this_</span>
</span><span class='line'><span class="k">inner</span> <span class="k">join</span>
</span><span class='line'>    <span class="n">Production</span><span class="p">.</span><span class="n">TransactionHistory</span> <span class="n">transactio1_</span>
</span><span class='line'>        <span class="k">on</span> <span class="n">this_</span><span class="p">.</span><span class="n">ProductID</span><span class="o">=</span><span class="n">transactio1_</span><span class="p">.</span><span class="n">ProductID</span>
</span><span class='line'><span class="k">GROUP</span> <span class="k">BY</span>
</span><span class='line'>    <span class="n">this_</span><span class="p">.</span><span class="n">ProductID</span><span class="p">,</span>
</span><span class='line'>    <span class="n">this_</span><span class="p">.</span><span class="n">Name</span>
</span><span class='line'><span class="k">HAVING</span>
</span><span class='line'>    <span class="k">count</span><span class="p">(</span><span class="n">transactio1_</span><span class="p">.</span><span class="n">TransactionID</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">5</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Subqueries</h3>

<p>There are several ways to create subqueries. You can create a correlated subquery by creating an alias in the outer query and referencing it in the other query. Here&rsquo;s an example using <code>SelectList</code> and <code>SelectSubQuery</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="kt">var</span> <span class="n">results</span> <span class="p">=</span> <span class="n">session</span><span class="p">.</span><span class="n">QueryOver</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;(()</span> <span class="p">=&gt;</span> <span class="n">productAlias</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="n">SelectList</span><span class="p">(</span><span class="n">list</span> <span class="p">=&gt;</span> <span class="n">list</span>
</span><span class='line'>        <span class="p">.</span><span class="n">Select</span><span class="p">(</span><span class="n">pr</span> <span class="p">=&gt;</span> <span class="n">pr</span><span class="p">.</span><span class="n">Id</span><span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="n">SelectSubQuery</span><span class="p">(</span>
</span><span class='line'>            <span class="n">QueryOver</span><span class="p">.</span><span class="n">Of</span><span class="p">&lt;</span><span class="n">TransactionHistory</span><span class="p">&gt;()</span>
</span><span class='line'>                <span class="c1">// Creates a correlated subquery</span>
</span><span class='line'>                <span class="p">.</span><span class="n">Where</span><span class="p">(</span><span class="n">tx</span> <span class="p">=&gt;</span> <span class="n">tx</span><span class="p">.</span><span class="n">Product</span><span class="p">.</span><span class="n">Id</span> <span class="p">==</span> <span class="n">productAlias</span><span class="p">.</span><span class="n">Id</span><span class="p">)</span>
</span><span class='line'>                <span class="p">.</span><span class="n">OrderBy</span><span class="p">(</span><span class="n">tx</span> <span class="p">=&gt;</span> <span class="n">tx</span><span class="p">.</span><span class="n">TransactionDate</span><span class="p">).</span><span class="n">Asc</span>
</span><span class='line'>                <span class="p">.</span><span class="n">Select</span><span class="p">(</span><span class="n">tx</span> <span class="p">=&gt;</span> <span class="n">tx</span><span class="p">.</span><span class="n">TransactionDate</span><span class="p">)</span>
</span><span class='line'>                <span class="p">.</span><span class="n">Take</span><span class="p">(</span><span class="m">1</span><span class="p">)</span>
</span><span class='line'>            <span class="p">)</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="n">List</span><span class="p">&lt;</span><span class="kt">object</span><span class="p">[]&gt;();</span>
</span></code></pre></td></tr></table></div></figure>


<p>Which generates:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span>
</span><span class='line'>   <span class="n">this_</span><span class="p">.</span><span class="n">ProductID</span> <span class="k">as</span> <span class="n">y0_</span><span class="p">,</span>
</span><span class='line'>   <span class="p">(</span><span class="k">SELECT</span>
</span><span class='line'>       <span class="n">TOP</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span>  <span class="n">this_0_</span><span class="p">.</span><span class="n">TransactionDate</span> <span class="k">as</span> <span class="n">y0_</span>
</span><span class='line'>   <span class="k">FROM</span>
</span><span class='line'>       <span class="n">Production</span><span class="p">.</span><span class="n">TransactionHistory</span> <span class="n">this_0_</span>
</span><span class='line'>   <span class="k">WHERE</span>
</span><span class='line'>       <span class="n">this_0_</span><span class="p">.</span><span class="n">ProductID</span> <span class="o">=</span> <span class="n">this_</span><span class="p">.</span><span class="n">ProductID</span>
</span><span class='line'>   <span class="k">ORDER</span> <span class="k">BY</span>
</span><span class='line'>       <span class="n">this_0_</span><span class="p">.</span><span class="n">TransactionDate</span> <span class="k">asc</span><span class="p">)</span> <span class="k">as</span> <span class="n">y1_</span>
</span><span class='line'><span class="k">FROM</span>
</span><span class='line'>   <span class="n">Production</span><span class="p">.</span><span class="n">Product</span> <span class="n">this_</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>In general, if you can&rsquo;t find a method on <code>QueryOverProjectionBuilder&lt;TRoot&gt;</code> using <code>.SelectList</code>, you can drop back into criteria methods on the <code>Projections</code> class. For example, say you want to use a case statement in your <code>SELECT</code> clause. You can use <code>Projections.Conditional</code> for that:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="kt">var</span> <span class="n">results</span> <span class="p">=</span> <span class="n">session</span><span class="p">.</span><span class="n">QueryOver</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;(()</span> <span class="p">=&gt;</span> <span class="n">productAlias</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="n">JoinQueryOver</span><span class="p">(</span><span class="n">pr</span> <span class="p">=&gt;</span> <span class="n">pr</span><span class="p">.</span><span class="n">TransactionHistory</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="n">transactionHistoryAlias</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="n">SelectList</span><span class="p">(</span><span class="n">list</span> <span class="p">=&gt;</span> <span class="n">list</span>
</span><span class='line'>        <span class="p">.</span><span class="n">Select</span><span class="p">(</span><span class="n">pr</span> <span class="p">=&gt;</span> <span class="n">pr</span><span class="p">.</span><span class="n">Id</span><span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="n">Select</span><span class="p">(</span><span class="n">Projections</span><span class="p">.</span><span class="n">Conditional</span><span class="p">(</span>
</span><span class='line'>            <span class="n">Restrictions</span><span class="p">.</span><span class="n">Gt</span><span class="p">(</span>
</span><span class='line'>                <span class="n">Projections</span><span class="p">.</span><span class="n">Property</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="n">transactionHistoryAlias</span><span class="p">.</span><span class="n">Quantity</span><span class="p">),</span> <span class="m">5</span><span class="p">),</span>
</span><span class='line'>            <span class="n">Projections</span><span class="p">.</span><span class="n">Constant</span><span class="p">(</span><span class="k">true</span><span class="p">),</span>
</span><span class='line'>            <span class="n">Projections</span><span class="p">.</span><span class="n">Constant</span><span class="p">(</span><span class="k">false</span><span class="p">)</span>
</span><span class='line'>    <span class="p">)))</span>
</span><span class='line'>    <span class="p">.</span><span class="n">List</span><span class="p">&lt;</span><span class="kt">object</span><span class="p">[]&gt;();</span>
</span></code></pre></td></tr></table></div></figure>


<p>Which generates:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span>
</span><span class='line'>    <span class="n">this_</span><span class="p">.</span><span class="n">ProductID</span> <span class="k">as</span> <span class="n">y0_</span><span class="p">,</span>
</span><span class='line'>    <span class="p">(</span><span class="k">case</span>
</span><span class='line'>        <span class="k">when</span> <span class="n">transactio1_</span><span class="p">.</span><span class="n">Quantity</span> <span class="o">&gt;</span> <span class="mi">5</span> <span class="k">then</span> <span class="s1">&#39;True&#39;</span>
</span><span class='line'>        <span class="k">else</span> <span class="s1">&#39;False&#39;</span>
</span><span class='line'>    <span class="k">end</span><span class="p">)</span> <span class="k">as</span> <span class="n">y1_</span>
</span><span class='line'><span class="k">FROM</span>
</span><span class='line'>    <span class="n">Production</span><span class="p">.</span><span class="n">Product</span> <span class="n">this_</span>
</span><span class='line'><span class="k">inner</span> <span class="k">join</span>
</span><span class='line'>    <span class="n">Production</span><span class="p">.</span><span class="n">TransactionHistory</span> <span class="n">transactio1_</span>
</span><span class='line'>        <span class="k">on</span> <span class="n">this_</span><span class="p">.</span><span class="n">ProductID</span><span class="o">=</span><span class="n">transactio1_</span><span class="p">.</span><span class="n">ProductID</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Summary</h3>

<p>This post covered a lot, but that&rsquo;s because there are many ways to build a <code>SELECT</code> clause with QueryOver. In summary:</p>

<ul>
<li><code>Select</code> can be used to build a <code>SELECT</code> clause with single columns</li>
<li><code>SelectList</code> and <code>Projections.ProjectionList</code> can be used to create more complex <code>SELECT</code> clauses.</li>
<li>When aggregating values, use <code>SelectGroup</code> (or <code>Projections.GroupProperty</code>).</li>
<li>For more complex scenarios, you can drop back in to Criteria methods on the <code>Projections</code> class. These support lambda expressions and can be used with QueryOver.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[QueryOver Series - Part 2: Basics and Joining]]></title>
    <link href="http://blog.andrewawhitaker.com/blog/2014/03/16/queryover-series-part-2-basics/"/>
    <updated>2014-03-16T12:05:33-04:00</updated>
    <id>http://blog.andrewawhitaker.com/blog/2014/03/16/queryover-series-part-2-basics</id>
    <content type="html"><![CDATA[<p>In this post, I&rsquo;ll outline some basics on QueryOver, including the NHibernate types involved and basic query structure. I&rsquo;ll also talk about joining using <code>JoinAlias</code> and <code>JoinQueryOver</code></p>

<h4><code>IQueryOver&lt;TRoot, TSubType&gt;</code></h4>

<p>If you look closely at the types involved when writing QueryOver queries, you&rsquo;ll notice that there are two generic type parameters: <code>TRoot</code> and <code>TSubType</code>. Why would the API need two type parameters?</p>

<p>When you create a QueryOver object using <code>session.QueryOver&lt;TRoot&gt;</code>, <code>TRoot</code> and <code>TSubType</code> are the same. <code>TRoot</code> stays the same as you build the query, and <code>TSubType</code> changes as you use <code>JoinQueryOver</code> to join to other tables. This is worth mentioning before we go into more depth on building queries.</p>

<p>In general:</p>

<ul>
<li>Operations <em>except</em> for <code>.Select</code> use <code>TSubType</code> as the type parameter for lambda expressions you pass to QueryOver methods</li>
<li><code>TRoot</code> is the type parameter for lambda expressions you use in the <code>.Select</code> step of the query.</li>
</ul>


<p>Here&rsquo;s an example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">session</span><span class="p">.</span><span class="n">QueryOver</span><span class="p">&lt;</span><span class="n">Person</span><span class="p">&gt;()</span>
</span><span class='line'><span class="c1">// TRoot and TSubType are Person                         </span>
</span><span class='line'>    <span class="p">.</span><span class="n">JoinQueryOver</span><span class="p">(</span><span class="n">p</span> <span class="p">=&gt;</span> <span class="n">p</span><span class="p">.</span><span class="n">Addresses</span><span class="p">)</span>
</span><span class='line'>    <span class="c1">// TRoot is Person, TSubtype is Address</span>
</span><span class='line'>        <span class="p">.</span><span class="n">Where</span><span class="p">(</span><span class="n">a</span> <span class="p">=&gt;</span> <span class="n">a</span><span class="p">.</span><span class="n">ModifiedDate</span> <span class="p">==</span> <span class="n">DateTime</span><span class="p">.</span><span class="n">Now</span><span class="p">)</span>
</span><span class='line'>        <span class="c1">// Where accepts an Expression&lt;Func&lt;TSubtype, bool&gt;&gt;</span>
</span><span class='line'>        <span class="p">.</span><span class="n">Select</span><span class="p">(</span><span class="n">p</span> <span class="p">=&gt;</span> <span class="n">p</span><span class="p">.</span><span class="n">Id</span><span class="p">);</span>
</span><span class='line'>        <span class="c1">// Select accepts an Expression&lt;Func&lt;TRoot, object&gt;&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h4><code>JoinAlias</code> and <code>JoinQueryOver</code></h4>

<p>Since we&rsquo;re on the subject of <code>TRoot</code> and <code>TSubType</code>, now is a good opportunity to talk about <code>JoinAlias</code> and <code>JoinQueryOver</code></p>

<h5><code>JoinAlias</code></h5>

<p><code>JoinAlias</code> adds a join to your query without changing <code>TSubType</code>. This is useful if you&rsquo;re joining to more than one table from a source table:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">BusinessEntityAddress</span> <span class="n">addressAlias</span> <span class="p">=</span> <span class="k">null</span><span class="p">;</span>
</span><span class='line'><span class="n">BusinessEntityContact</span> <span class="n">contactAlias</span> <span class="p">=</span> <span class="k">null</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">session</span><span class="p">.</span><span class="n">QueryOver</span><span class="p">&lt;</span><span class="n">Person</span><span class="p">&gt;()</span>
</span><span class='line'>    <span class="p">.</span><span class="n">JoinAlias</span><span class="p">(</span><span class="n">p</span> <span class="p">=&gt;</span> <span class="n">p</span><span class="p">.</span><span class="n">Addresses</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="n">addressAlias</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="n">JoinAlias</span><span class="p">(</span><span class="n">p</span> <span class="p">=&gt;</span> <span class="n">p</span><span class="p">.</span><span class="n">Contacts</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="n">contactAlias</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="n">Where</span><span class="p">(</span><span class="n">p</span> <span class="p">=&gt;</span> <span class="n">p</span><span class="p">.</span><span class="n">FirstName</span> <span class="p">==</span> <span class="s">&quot;Andrew&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="cm">/* etc */</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this example, since we want to join to <code>Address</code> and <code>Contact</code>, we can use <code>JoinAlias</code> twice, since <code>TSubType</code> doesn&rsquo;t change.</p>

<p>The second parameter (in this particular overload) to <code>.JoinAlias</code> is a lambda expression that creates an alias. You can use the alias throughout the query in other lambda expressions when you don&rsquo;t want to use either <code>TRoot</code> or <code>TSubType</code>.</p>

<h5><code>JoinQueryOver</code></h5>

<p><code>JoinQueryOver</code> adds a join to your query and <em>changes</em> <code>TSubType</code>. You can also use an alias with <code>JoinQueryOver</code>, but with simpler queries it&rsquo;s often not necessary:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">session</span><span class="p">.</span><span class="n">QueryOver</span><span class="p">&lt;</span><span class="n">Person</span><span class="p">&gt;()</span>
</span><span class='line'>    <span class="p">.</span><span class="n">JoinQueryOver</span><span class="p">(</span><span class="n">p</span> <span class="p">=&gt;</span> <span class="n">p</span><span class="p">.</span><span class="n">Addresses</span><span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="n">Where</span><span class="p">(</span><span class="n">a</span> <span class="p">=&gt;</span> <span class="n">a</span><span class="p">.</span><span class="n">ModifiedDate</span> <span class="p">==</span> <span class="n">DateTime</span><span class="p">.</span><span class="n">Now</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="n">Select</span><span class="p">(</span><span class="n">p</span> <span class="p">=&gt;</span> <span class="n">p</span><span class="p">.</span><span class="n">FirstName</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Notice that the lambda expression passed to the <code>.Where</code> method has the signature <code>Expression&lt;Func&lt;Address, bool&gt;&gt;</code>. The call to <code>JoinQueryOver</code> changed <code>TSubType</code>. This can make for more concise, easier to read code, since you don&rsquo;t need to declare aliases for every join you do.</p>

<p><code>JoinAlias</code> and <code>JoinQueryOver</code> are interchangeable, as far as I know. You can write the same query using either one, it&rsquo;s just that the number of aliases you declare changes based on which you use. Typically I choose whichever one avoids creating and managing more aliases. This means using <code>JoinQueryOver</code> when possible, but that&rsquo;s personal preference.</p>

<h4>Summary:</h4>

<ul>
<li><code>IQueryOver</code> is a generic type with two type parameters <code>TRoot</code> and <code>TSubType</code></li>
<li><code>.Select</code> operates on <code>TRoot</code> while other QueryOver methods operate on <code>TSubType</code>.</li>
<li><code>TRoot</code> stays the same as you&rsquo;re building a query, but <code>TSubType</code> changes when you join using <code>JoinQueryOver</code></li>
<li><code>JoinQueryOver</code> and <code>JoinAlias</code> add joins to your query. <code>JoinAlias</code> doesn&rsquo;t change <code>TSubType</code>, but <code>JoinQueryOver</code> does.</li>
<li>You can use aliases when building a query to refer to properties that don&rsquo;t belong to <code>TRoot</code> or <code>TSubType</code></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[QueryOver Series - Part 1: Why QueryOver?]]></title>
    <link href="http://blog.andrewawhitaker.com/blog/2014/03/12/queryover-series-part-1-why-queryover/"/>
    <updated>2014-03-12T22:50:58-04:00</updated>
    <id>http://blog.andrewawhitaker.com/blog/2014/03/12/queryover-series-part-1-why-queryover</id>
    <content type="html"><![CDATA[<p>QueryOver is a strongly-typed querying technology built on top of NHibernate&rsquo;s Criteria API. It was introduced in NHibernate 3.0. QueryOver is actually quite powerful and flexible, as I aim to demonstrate in this series of blog posts.</p>

<p>There is not much in the way of official documentation for NHibernate in general, and even less for QueryOver. The only article on NHForge that I can find is <a href="http://nhforge.org/blogs/nhibernate/archive/2009/12/17/queryover-in-nh-3-0.aspx">here</a>. While this is a good read for an introduction, it really doesn&rsquo;t do QueryOver justice. There&rsquo;s a lot of capability that&rsquo;s not demonstrated there.</p>

<h3>Overview of available querying technologies</h3>

<p>If you&rsquo;re using NHibernate, you&rsquo;re probably aware that you have several options when you go to write a query:</p>

<ul>
<li>SQL (via <code>CreateSQLQuery</code>)</li>
<li>HQL</li>
<li>LINQ to NHibernate</li>
<li>Criteria</li>
<li>QueryOver</li>
</ul>


<p>Now, in some cases you <em>must</em> use SQL or HQL because of the type of query you&rsquo;re writing. For the vast majority of simple to intermediate queries though, LINQ to NHibernate, QueryOver, and Criteria all seem like viable options.</p>

<h3>Why use QueryOver?</h3>

<p>Let&rsquo;s assume that you&rsquo;re working on a large project and using magic strings everywhere to write queries makes you a bit nervous. People are changing property and class names every day, potentially breaking queries across your application. In this case, your better-looking options are LINQ to NHibernate and QueryOver.</p>

<p>If you&rsquo;ve tried to use LINQ to NHibernate for anything remotely complex, you know you&rsquo;ll run into problems quickly. Currently you <a href="http://stackoverflow.com/q/15590021/497356">can&rsquo;t</a> <a href="http://stackoverflow.com/q/13624959/497356">even</a> <a href="https://nhibernate.jira.com/browse/NH-2379">do a left join</a>. What this means is if you have a left join in your query, or even if you think you&rsquo;ll need one one day, you can&rsquo;t currently use LINQ to NHibernate.</p>

<p>I&rsquo;m not trying to pick on NHibernate&rsquo;s LINQ provider or minimize the amount of work contributors have done towards it; I&rsquo;m just pointing out that it&rsquo;s incomplete and not a great option for querying right now. With this in mind, QueryOver is really your <em>only</em> viable option for writing queries with NHibernate. I&rsquo;m sure the LINQ provider will only get better, but until then QueryOver is a good option.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jQueryUI Autocomplete 1.9]]></title>
    <link href="http://blog.andrewawhitaker.com/blog/2012/10/08/jqueryui-autocomplete-1-9/"/>
    <updated>2012-10-08T21:37:33-04:00</updated>
    <id>http://blog.andrewawhitaker.com/blog/2012/10/08/jqueryui-autocomplete-1-9</id>
    <content type="html"><![CDATA[<p>As you might have realized from my previous post, I have an affinity for the jQueryUI autocomplete widget. With 1.9, which was <a href="http://jqueryui.com/changelog/1.9.0/">recently released</a>, autocomplete <a href="http://jqueryui.com/upgrade-guide/1.9/#autocomplete">got a little love</a>, which is what I&rsquo;ll focus on in this post. I&rsquo;ll go over each change and what practical implications it has.</p>

<h2>The <code>response</code> event</h2>

<p>Previously, it wasn&rsquo;t possible to determine when a search had completed unless results were returned (in which case the <code>open</code> event was triggered). There are <a href="http://stackoverflow.com/a/4719848/497356">several ways to get around this limitation</a>, but none of them use autocomplete&rsquo;s API. This limitation made it hard to perform actions if the search returned zero results.</p>

<p><strong>Here&rsquo;s what you would have had to do in jQueryUI 1.8:</strong></p>

<figure class='code'><figcaption><span>Detecting no results in jQueryUI 1.8</span><a href='http://jsfiddle.net/qz29K/'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">availableTags</span> <span class="o">=</span> <span class="p">[</span><span class="cm">/* array of items */</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#auto&quot;</span><span class="p">).</span><span class="nx">autocomplete</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">source</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">request</span><span class="p">,</span> <span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">results</span> <span class="o">=</span> <span class="nx">$</span><span class="p">.</span><span class="nx">ui</span><span class="p">.</span><span class="nx">autocomplete</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="nx">availableTags</span><span class="p">,</span> <span class="nx">request</span><span class="p">.</span><span class="nx">term</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">results</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#no-results&quot;</span><span class="p">).</span><span class="nx">text</span><span class="p">(</span><span class="s2">&quot;No results found!&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#no-results&quot;</span><span class="p">).</span><span class="nx">empty</span><span class="p">();</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">response</span><span class="p">(</span><span class="nx">results</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Here&rsquo;s what you can do in 1.9:</strong></p>

<figure class='code'><figcaption><span>Detecting no results in jQueryUI 1.9</span><a href='http://jsfiddle.net/andrewwhitaker/AYRhE/'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">availableTags</span> <span class="o">=</span> <span class="p">[</span><span class="cm">/* array of items*/</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#auto&quot;</span><span class="p">).</span><span class="nx">autocomplete</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">source</span><span class="o">:</span> <span class="nx">availableTags</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">response</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">event</span><span class="p">,</span> <span class="nx">ui</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">ui</span><span class="p">.</span><span class="nx">content</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#no-results&quot;</span><span class="p">).</span><span class="nx">text</span><span class="p">(</span><span class="s2">&quot;No results found!&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#no-results&quot;</span><span class="p">).</span><span class="nx">empty</span><span class="p">();</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Much cleaner. This works for an autocomplete-enabled input with a remote source as well:</p>

<figure class='code'><figcaption><span>Detecting no results with a remote source</span><a href='http://jsfiddle.net/andrewwhitaker/J5rVP/1/'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s2">&quot;input&quot;</span><span class="p">).</span><span class="nx">autocomplete</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">source</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">request</span><span class="p">,</span> <span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span><span class="p">({</span>
</span><span class='line'>            <span class="nx">url</span><span class="o">:</span> <span class="s2">&quot;http://api.stackexchange.com/2.1/users&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">data</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">pagesize</span><span class="o">:</span> <span class="mi">10</span><span class="p">,</span>
</span><span class='line'>                <span class="nx">order</span><span class="o">:</span> <span class="s1">&#39;desc&#39;</span><span class="p">,</span>
</span><span class='line'>                <span class="nx">sort</span><span class="o">:</span> <span class="s1">&#39;reputation&#39;</span><span class="p">,</span>
</span><span class='line'>                <span class="nx">site</span><span class="o">:</span> <span class="s1">&#39;stackoverflow&#39;</span><span class="p">,</span>
</span><span class='line'>                <span class="nx">inname</span><span class="o">:</span> <span class="nx">request</span><span class="p">.</span><span class="nx">term</span>
</span><span class='line'>            <span class="p">},</span>
</span><span class='line'>            <span class="nx">dataType</span><span class="o">:</span> <span class="s1">&#39;jsonp&#39;</span>
</span><span class='line'>        <span class="p">}).</span><span class="nx">done</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nx">data</span><span class="p">.</span><span class="nx">items</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">response</span><span class="p">(</span><span class="nx">$</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">data</span><span class="p">.</span><span class="nx">items</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">item</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="k">return</span> <span class="nx">item</span><span class="p">.</span><span class="nx">display_name</span><span class="p">;</span>
</span><span class='line'>                <span class="p">}));</span>
</span><span class='line'>            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">response</span><span class="p">([]);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nx">delay</span><span class="o">:</span> <span class="mi">500</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">minLength</span><span class="o">:</span> <span class="mi">3</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">response</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">event</span><span class="p">,</span> <span class="nx">ui</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">ui</span><span class="p">.</span><span class="nx">content</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#message&quot;</span><span class="p">).</span><span class="nx">text</span><span class="p">(</span><span class="s2">&quot;No results found&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#message&quot;</span><span class="p">).</span><span class="nx">empty</span><span class="p">();</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Synchronous <code>change</code> event</h2>

<p>This is fixing a subtle, but important, limitation in 1.8&rsquo;s autocomplete implementation. The <code>change</code> event used a small timeout right after the <code>blur</code> occurred. Most of the time this didn&rsquo;t cause a problem, but if you wanted to validate that the user selected an item from the suggestion menu, the user could actually submit the form before the <code>change</code> event fired. This is best seen with an example (click the <strong>result</strong> tab inside the fiddle):</p>

<iframe style="width: 100%; height: 300px" src="http://jsfiddle.net/andrewwhitaker/qz29K/83/embedded/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>


<p>If you select an item from the menu after searching, then click out of the field (enabling the submit button), then focus the input field again and change the input&rsquo;s value to something <em>not</em> in the suggestion list, you can submit the form.</p>

<p>In 1.9, this works much better and you can prevent the user from submitting the form entirely:</p>

<iframe style="width: 100%; height: 300px" src="http://jsfiddle.net/andrewwhitaker/AYRhE/1/embedded/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>


<p>Try following the steps for the 1.8 example, and you should not be able to submit the form.</p>

<h2>Support for <code>contentEditable</code></h2>

<p>This enhancement allows you to attach autocomplete to a <code>contentEditable</code> element. This functionality was not possible in 1.8. This has some very cool applications that I&rsquo;ll explore in a later blog post, but here&rsquo;s a simple example:</p>

<iframe style="width: 100%; height: 300px" src="http://jsfiddle.net/andrewwhitaker/J5rVP/2/embedded/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>


<p></p>

<h2>Blurring a suggestion no longer changes the input&rsquo;s value</h2>

<p>This one is hard to explain, but follow the steps outlined in the 1.8 fiddle below to see the problem:</p>

<iframe style="width: 100%; height: 300px" src="http://jsfiddle.net/andrewwhitaker/qz29K/84/embedded/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>


<p>Now, follow the same instructions in 1.9:</p>

<iframe style="width: 100%; height: 300px" src="http://jsfiddle.net/andrewwhitaker/AYRhE/2/embedded/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>


<p>See the difference? In 1.9, the input&rsquo;s value is not reset when the menu item is hovered over.</p>

<h2>Added experimental <code>messages</code> option for accessibility</h2>

<p>The jQueryUI folks explain this one better than I can show with an example:</p>

<blockquote><p>We now use ARIA live regions to announce when results become available and how to navigate through the list of suggestions. The announcements can be configured via the messages option, which has two properties: noResults for when no items are returned and results for when at least one item is returned. In general, you would only need to change these options if you want the string to be written in a different language. The messages option is subject to change in future versions while we work on a full solution for string manipulation and internationalization across all plugins. If you&rsquo;re interested in the messages option, we encourage you to just read the source; the relevant code is at the very bottom of the autocomplete plugin and is only a few lines.</p></blockquote>

<p>I&rsquo;m not an accessibility expert, so I had to look up what <em>ARIA live regions are</em>. <a href="https://developer.mozilla.org/en-US/docs/Accessibility/ARIA/ARIA_Live_Regions">MDN has a great explanation</a>:</p>

<blockquote><p>In the past, a web page change could only be spoken in entirety which often annoyed a user, or by speaking very little to nothing, making some or all information inaccessible. Until recently, screen readers have not been able to improve this because no standardized markup existed to alert the screen reader to a change. ARIA live regions fill this gap and provide suggestions to screen readers regarding whether and how to interrupt users with a change.</p></blockquote>

<p>So how does this apply to the autocomplete widget? Well, now when you search for an item, if you have a screen reader installed it will read you something like <em>&ldquo;1 result is available, use up and down arrow keys to navigate.&rdquo;</em>. Pretty cool, huh?</p>

<p>I&rsquo;ve outlined each enhancement to jQueryUI autocomplete in the 1.9 release. There are some exciting possibilities, specifically with the <code>contentEditable</code> support and the exposure of the Menu widget as a first-class widget. I&rsquo;ll be sure to follow up on those topics in a subsequent post.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jQueryUI Autocomplete: Top 5 sources of confusion]]></title>
    <link href="http://blog.andrewawhitaker.com/blog/2012/09/29/jqueryui-autocomplete-top-5-sources-of-confusion/"/>
    <updated>2012-09-29T14:31:58-04:00</updated>
    <id>http://blog.andrewawhitaker.com/blog/2012/09/29/jqueryui-autocomplete-top-5-sources-of-confusion</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve been answering <a href="http://www.jqueryui.com/demos/autocomplete">jQueryUI autocomplete</a> questions on StackOverflow now for over two and a half years and I&rsquo;ve noticed that there are a few things that are <em>always</em> coming up. This post will attempt to clear up those sources of confusion.</p>

<h2>jQuery Autocomplete vs. jQueryUI autocomplete</h2>

<p><a href="http://bassistance.de/jquery-plugins/jquery-plugin-autocomplete/">jQuery autocomplete</a> is jQueryUI autocomplete&rsquo;s predecessor. Despite the multiple messages and disclaimers on the legacy plugin&rsquo;s page, there is <em>still</em> confusion about the documentation, functionality, and status of this plugin. For some reason, some folks do not notice the following message on Jörn Zaefferer&rsquo;s documentation page for the plugin:</p>

<blockquote><p>This plugin is deprecated and not developed anymore. Its <a href="http://jqueryui.com/demos/autocomplete/">successor is part of jQuery UI</a>, and <a href="http://www.learningjquery.com/2010/06/autocomplete-migration-guide">this migration guide</a> explains how to get from this plugin to the new one. This page will remain as it is for reference, but won’t be updated anymore.</p></blockquote>

<p>The link to the migration guide explains how to migrate your old code using the original, deprecated plugin with the new one provided by jQueryUI.</p>

<h2>What format does my data need to be in?</h2>

<p>Another source of confusion is exactly <em>what</em> format does the widget&rsquo;s data source need to take? This is easy to see after viewing a few examples and reading the overview tab on the documentation page.</p>

<p>To summarize, the data that you send to the widget needs to be:</p>

<ol>
<li>An array of strings</li>
<li>An array of objects. Each object should have a either a <code>label</code> property, a <code>value</code> property, or both.</li>
</ol>


<p>An important point on #2 is that the object can contain other properties (besides <code>label</code> or <code>value</code>). This comes in handy when doing custom things with data.</p>

<h2>I am using a server-side source and my data isn&rsquo;t being filtered!</h2>

<p>When you use a server-side resource, <em>you</em> are responsible for doing the filtering. Usually this occurs by building up a database query based on the term that the user searched for.</p>

<p>If you don&rsquo;t want to filter your data with server-side code (which I highly recommend), you could retrieve all of the possible results via AJAX and then let the widget do the filtering. Here&rsquo;s an example using StackOverflow&rsquo;s API:</p>

<figure class='code'><figcaption><span>Letting jQueryUI do the filtering</span><a href='http://jsfiddle.net/andrewwhitaker/ZBmM8/light/'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">url</span><span class="o">:</span> <span class="s2">&quot;http://api.stackexchange.com/2.1/users&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">data</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">pagesize</span><span class="o">:</span> <span class="mi">100</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">order</span><span class="o">:</span> <span class="s1">&#39;desc&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">sort</span><span class="o">:</span> <span class="s1">&#39;reputation&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">site</span><span class="o">:</span> <span class="s1">&#39;stackoverflow&#39;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nx">dataType</span><span class="o">:</span> <span class="s2">&quot;jsonp&quot;</span>
</span><span class='line'><span class="p">}).</span><span class="nx">success</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">dir</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">source</span> <span class="o">=</span> <span class="nx">$</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">data</span><span class="p">.</span><span class="nx">items</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">user</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">user</span><span class="p">.</span><span class="nx">display_name</span><span class="p">;</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;input&quot;</span><span class="p">).</span><span class="nx">autocomplete</span><span class="p">({</span>
</span><span class='line'>        <span class="nx">source</span><span class="o">:</span> <span class="nx">source</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>This may not be ideal depending on the size of the data you are processing. You may want to handle the filtering on the server rather than bogging the browser down with filtering through thousands of results.</p>

<h2>I&rsquo;m using a server-side resource that isn&rsquo;t returning data in the format that autocomplete is expecting. What should I do?</h2>

<p>You can supply a callback function to the <code>source</code> parameter of autocomplete. This allows you to use virtually any source as long as you format it correctly before passing it to the <code>response</code> function that autocomplete uses to populate the results. Here&rsquo;s another example using the StackOverflow API:</p>

<figure class='code'><figcaption><span>Using a function with the &#8220;source&#8221; option</span><a href='http://jsfiddle.net/andrewwhitaker/MGTKm/'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s2">&quot;input&quot;</span><span class="p">).</span><span class="nx">autocomplete</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">source</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">request</span><span class="p">,</span> <span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span><span class="p">({</span>
</span><span class='line'>            <span class="nx">url</span><span class="o">:</span> <span class="s2">&quot;http://api.stackexchange.com/2.1/users&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">data</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">pagesize</span><span class="o">:</span> <span class="mi">10</span><span class="p">,</span>
</span><span class='line'>                <span class="nx">order</span><span class="o">:</span> <span class="s1">&#39;desc&#39;</span><span class="p">,</span>
</span><span class='line'>                <span class="nx">sort</span><span class="o">:</span> <span class="s1">&#39;reputation&#39;</span><span class="p">,</span>
</span><span class='line'>                <span class="nx">site</span><span class="o">:</span> <span class="s1">&#39;stackoverflow&#39;</span><span class="p">,</span>
</span><span class='line'>                <span class="nx">inname</span><span class="o">:</span> <span class="nx">request</span><span class="p">.</span><span class="nx">term</span>
</span><span class='line'>            <span class="p">},</span>
</span><span class='line'>            <span class="nx">dataType</span><span class="o">:</span> <span class="s1">&#39;jsonp&#39;</span>
</span><span class='line'>        <span class="p">}).</span><span class="nx">success</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">results</span> <span class="o">=</span> <span class="nx">$</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">data</span><span class="p">.</span><span class="nx">items</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">user</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="nx">user</span><span class="p">.</span><span class="nx">display_name</span><span class="p">;</span>
</span><span class='line'>            <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>            <span class="nx">response</span><span class="p">(</span><span class="nx">results</span><span class="p">);</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>The key here is to use <code>$.map</code> to transform the results into the format that the widget expects (described above).</p>

<h2>I want to implement tagging functionality. How can I go about that?</h2>

<p>This is the most complex of the 5, but it is doable. Check out the <a href="http://jqueryui.com/demos/autocomplete/#multiple">multiple values demo</a> for one way to do this.</p>

<p>I&rsquo;ve demonstrated a more complex Google-plus like functionality in the answer to <a href="http://stackoverflow.com/q/7089406/497356">this question</a>. Here&rsquo;s an updated fiddle using the 2.1 version of the API.</p>

<figure class='code'><figcaption><span>Tagging functionality</span><a href='http://jsfiddle.net/andrewwhitaker/LHNky/41/light/'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">split</span><span class="p">(</span><span class="nx">val</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">val</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="sr">/@\s*/</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">extractLast</span><span class="p">(</span><span class="nx">term</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">split</span><span class="p">(</span><span class="nx">term</span><span class="p">).</span><span class="nx">pop</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">getTags</span><span class="p">(</span><span class="nx">term</span><span class="p">,</span> <span class="nx">callback</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span><span class="p">({</span>
</span><span class='line'>        <span class="nx">url</span><span class="o">:</span> <span class="s2">&quot;http://api.stackexchange.com/2.1/tags&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">data</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">inname</span><span class="o">:</span> <span class="nx">term</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">pagesize</span><span class="o">:</span> <span class="mi">5</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">order</span><span class="o">:</span> <span class="s1">&#39;desc&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">sort</span><span class="o">:</span> <span class="s1">&#39;popular&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">site</span><span class="o">:</span> <span class="s1">&#39;stackoverflow&#39;</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="nx">success</span><span class="o">:</span> <span class="nx">callback</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">dataType</span><span class="o">:</span> <span class="s2">&quot;jsonp&quot;</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">ready</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#tags&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="c1">// don&#39;t navigate away from the field on tab when selecting an item</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="s2">&quot;keydown&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">event</span><span class="p">.</span><span class="nx">keyCode</span> <span class="o">===</span> <span class="nx">$</span><span class="p">.</span><span class="nx">ui</span><span class="p">.</span><span class="nx">keyCode</span><span class="p">.</span><span class="nx">TAB</span> <span class="o">&amp;&amp;</span> <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">data</span><span class="p">(</span><span class="s2">&quot;autocomplete&quot;</span><span class="p">).</span><span class="nx">menu</span><span class="p">.</span><span class="nx">active</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>            <span class="nx">event</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">();</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}).</span><span class="nx">autocomplete</span><span class="p">({</span>
</span><span class='line'>        <span class="nx">source</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">request</span><span class="p">,</span> <span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nx">request</span><span class="p">.</span><span class="nx">term</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s2">&quot;@&quot;</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#loading&quot;</span><span class="p">).</span><span class="nx">show</span><span class="p">();</span>
</span><span class='line'>                <span class="nx">getTags</span><span class="p">(</span><span class="nx">extractLast</span><span class="p">(</span><span class="nx">request</span><span class="p">.</span><span class="nx">term</span><span class="p">),</span> <span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="nx">response</span><span class="p">(</span><span class="nx">$</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">data</span><span class="p">.</span><span class="nx">items</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">el</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                        <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>                            <span class="nx">value</span><span class="o">:</span> <span class="nx">el</span><span class="p">.</span><span class="nx">name</span><span class="p">,</span>
</span><span class='line'>                            <span class="nx">count</span><span class="o">:</span> <span class="nx">el</span><span class="p">.</span><span class="nx">count</span>
</span><span class='line'>                        <span class="p">};</span>
</span><span class='line'>                    <span class="p">}));</span>
</span><span class='line'>                    <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#loading&quot;</span><span class="p">).</span><span class="nx">hide</span><span class="p">();</span>
</span><span class='line'>                <span class="p">});</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="nx">focus</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">// prevent value inserted on focus</span>
</span><span class='line'>            <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="nx">select</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">event</span><span class="p">,</span> <span class="nx">ui</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">terms</span> <span class="o">=</span> <span class="nx">split</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">value</span><span class="p">);</span>
</span><span class='line'>            <span class="c1">// remove the current input</span>
</span><span class='line'>            <span class="nx">terms</span><span class="p">.</span><span class="nx">pop</span><span class="p">();</span>
</span><span class='line'>            <span class="c1">// add the selected item</span>
</span><span class='line'>            <span class="nx">terms</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">ui</span><span class="p">.</span><span class="nx">item</span><span class="p">.</span><span class="nx">value</span><span class="p">);</span>
</span><span class='line'>            <span class="c1">// add placeholder to get the comma-and-space at the end</span>
</span><span class='line'>            <span class="nx">terms</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="nx">value</span> <span class="o">=</span> <span class="nx">terms</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}).</span><span class="nx">data</span><span class="p">(</span><span class="s2">&quot;autocomplete&quot;</span><span class="p">).</span><span class="nx">_renderItem</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">ul</span><span class="p">,</span> <span class="nx">item</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;&lt;li&gt;&quot;</span><span class="p">)</span>
</span><span class='line'>            <span class="p">.</span><span class="nx">data</span><span class="p">(</span><span class="s2">&quot;item.autocomplete&quot;</span><span class="p">,</span> <span class="nx">item</span><span class="p">)</span>
</span><span class='line'>            <span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="s2">&quot;&lt;a&gt;&quot;</span> <span class="o">+</span> <span class="nx">item</span><span class="p">.</span><span class="nx">label</span> <span class="o">+</span> <span class="s2">&quot;&amp;nbsp;&lt;span class=&#39;count&#39;&gt;(&quot;</span> <span class="o">+</span> <span class="nx">item</span><span class="p">.</span><span class="nx">count</span> <span class="o">+</span> <span class="s2">&quot;)&lt;/span&gt;&lt;/a&gt;&quot;</span><span class="p">)</span>
</span><span class='line'>            <span class="p">.</span><span class="nx">appendTo</span><span class="p">(</span><span class="nx">ul</span><span class="p">);</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>This demo is also useful because it shows a custom display of each tag including the count. Type @j to see tags starting with &ldquo;j&rdquo;.</p>

<p>jQueryUI autocomplete&rsquo;s API may look simple at first glance, but this is a very extensible and capable plugin. Most people&rsquo;s questions revolve around the <code>source</code> parameter for the plugin. Remember to look at your AJAX requests in Firebug or similar just to make sure the data you&rsquo;re supplying to the widget is what you expect.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jQuery.aggregate: A simple jQuery aggregation plugin]]></title>
    <link href="http://blog.andrewawhitaker.com/blog/2011/12/22/jquery-aggregate-a-simple-jquery-aggregation-plugin/"/>
    <updated>2011-12-22T18:39:02-05:00</updated>
    <id>http://blog.andrewawhitaker.com/blog/2011/12/22/jquery-aggregate-a-simple-jquery-aggregation-plugin</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve found myself needing to apply an aggregate function over a jQuery object several times. I decided to wrap the functionality in a plugin. I attempted to make <code>$.aggregate</code> and its little brother <code>$.sum</code> as close to LINQ&rsquo;s <a href="http://msdn.microsoft.com/en-us/library/system.linq.enumerable.aggregate.aspx">aggregate</a> and <a href="http://msdn.microsoft.com/en-us/library/bb345537.aspx">sum</a> as possible. This goal obviously couldn&rsquo;t be completely realized because of the dynamic nature of JavaScript. The biggest roadblock there is that you can&rsquo;t really imply a &ldquo;seed&rdquo; value for an aggregating operation, since arrays can contain elements of various types in JavaScript.</p>

<p>Let&rsquo;s take a look with an example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">letters</span> <span class="o">=</span> <span class="s2">&quot;abcdefghijklmnopqrstuvwxyz&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">message</span> <span class="o">=</span> <span class="nx">$</span><span class="p">.</span><span class="nx">aggregate</span><span class="p">([</span><span class="mi">0</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">17</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">19</span><span class="p">,</span> <span class="mi">4</span><span class="p">],</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">working</span><span class="p">,</span> <span class="nx">element</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">working</span> <span class="o">?</span> <span class="nx">working</span> <span class="o">+</span> <span class="nx">letters</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="nx">element</span><span class="p">)</span> <span class="o">:</span> <span class="nx">letters</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="nx">element</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#message&quot;</span><span class="p">).</span><span class="nx">text</span><span class="p">(</span><span class="nx">message</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here, we&rsquo;re building up a message from an array of numbers that correspond to letters of the alphabet. We supplied the aggregate function with a source and a function describing how we wanted to build the aggregate, based on the current value we&rsquo;re iterating over and the &ldquo;working&rdquo; aggregate (what we&rsquo;ve built up so far).</p>

<p>The conditional operator inside the aggregate function is kind of awkward, so lets supply an initial &ldquo;seed&rdquo; value to the aggregate:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">letters</span> <span class="o">=</span> <span class="s2">&quot;abcdefghijklmnopqrstuvwxyz&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">message</span> <span class="o">=</span> <span class="nx">$</span><span class="p">.</span><span class="nx">aggregate</span><span class="p">([</span><span class="mi">0</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">17</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">19</span><span class="p">,</span> <span class="mi">4</span><span class="p">],</span> <span class="s1">&#39;&#39;</span><span class="p">,</span>  <span class="kd">function</span> <span class="p">(</span><span class="nx">working</span><span class="p">,</span> <span class="nx">element</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">working</span> <span class="o">+</span> <span class="nx">letters</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="nx">element</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#message&quot;</span><span class="p">).</span><span class="nx">text</span><span class="p">(</span><span class="nx">message</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally, we may want to supply some sort of final transformation function to our aggregated value. With the aggregate plugin, you can supply a function that will transform the aggregated value before returning it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">letters</span> <span class="o">=</span> <span class="s2">&quot;abcdefghijklmnopqrstuvwxyz&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">message</span> <span class="o">=</span> <span class="nx">$</span><span class="p">.</span><span class="nx">aggregate</span><span class="p">([</span><span class="mi">0</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">17</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">19</span><span class="p">,</span> <span class="mi">4</span><span class="p">],</span> <span class="s1">&#39;&#39;</span><span class="p">,</span>  <span class="kd">function</span> <span class="p">(</span><span class="nx">working</span><span class="p">,</span> <span class="nx">element</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">working</span> <span class="o">+</span> <span class="nx">letters</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="nx">element</span><span class="p">);</span>
</span><span class='line'><span class="p">},</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">value</span><span class="p">.</span><span class="nx">toUpperCase</span><span class="p">();</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#message&quot;</span><span class="p">).</span><span class="nx">text</span><span class="p">(</span><span class="nx">message</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>That&rsquo;s pretty much it for <code>$.aggregate</code>. You should be able to get pretty creative with it.</p>

<p><code>$.sum</code> is just a convenient way to call <code>$.aggregate</code>. After implementing <code>$.aggregate</code>, <code>$.sum</code> was pretty easy. <code>$.sum</code> sheds some parameters, but is much more readable if all you&rsquo;re doing is adding some values up:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">total</span> <span class="o">=</span> <span class="nx">$</span><span class="p">.</span><span class="nx">sum</span><span class="p">([</span><span class="mi">0</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">17</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">19</span><span class="p">,</span> <span class="mi">4</span><span class="p">]);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#total&quot;</span><span class="p">).</span><span class="nx">text</span><span class="p">(</span><span class="nx">total</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Much neater right? You can also supply a transformation function that should return the item to be &ldquo;summed&rdquo;:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">groceries</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>    <span class="p">{</span> <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;bread&#39;</span><span class="p">,</span> <span class="nx">price</span><span class="o">:</span> <span class="mf">2.50</span> <span class="p">},</span>
</span><span class='line'>    <span class="p">{</span> <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;bologna&#39;</span><span class="p">,</span> <span class="nx">price</span><span class="o">:</span> <span class="mf">4.00</span> <span class="p">},</span>
</span><span class='line'>    <span class="p">{</span> <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;cheddar cheese&#39;</span><span class="p">,</span> <span class="nx">price</span><span class="o">:</span> <span class="mf">3.50</span> <span class="p">},</span>
</span><span class='line'>    <span class="p">{</span> <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;potato chips&#39;</span><span class="p">,</span> <span class="nx">price</span><span class="o">:</span> <span class="mf">3.00</span> <span class="p">}</span>
</span><span class='line'><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">total</span> <span class="o">=</span> <span class="nx">$</span><span class="p">.</span><span class="nx">sum</span><span class="p">(</span><span class="nx">groceries</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">price</span><span class="p">;</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#total&quot;</span><span class="p">).</span><span class="nx">text</span><span class="p">(</span><span class="s2">&quot;$&quot;</span> <span class="o">+</span> <span class="nx">total</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>That&rsquo;s pretty much it for the &ldquo;static&rdquo; functions. Both <code>$.sum</code> and <code>$.aggregate</code> can take an object <em>or</em> an array of values to aggregate.</p>

<p>There are also &ldquo;instance&rdquo; methods on jQuery objects. These methods operate on jQuery objects:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">ready</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;td input:text&quot;</span><span class="p">).</span><span class="nx">on</span><span class="p">(</span><span class="s2">&quot;change&quot;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">total</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;td input:text&quot;</span><span class="p">).</span><span class="nx">sum</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">quantity</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">value</span>
</span><span class='line'>                <span class="p">,</span> <span class="nx">cost</span> <span class="o">=</span> <span class="nb">parseFloat</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">closest</span><span class="p">(</span><span class="s2">&quot;tr&quot;</span><span class="p">).</span><span class="nx">find</span><span class="p">(</span><span class="s2">&quot;.price&quot;</span><span class="p">).</span><span class="nx">text</span><span class="p">(),</span> <span class="mi">10</span><span class="p">)</span> <span class="o">||</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">return</span> <span class="nx">quantity</span> <span class="o">*</span> <span class="nx">cost</span><span class="p">;</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#total&quot;</span><span class="p">).</span><span class="nx">text</span><span class="p">(</span><span class="nx">total</span><span class="p">);</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>(Aggregate follows the same pattern).</p>

<p>I&rsquo;m also toying with the idea of adding $.min and $.max.</p>

<p>If you want to download, view the source, or run the unit tests associated with the plugin, <a href="https://github.com/AndrewWhitaker/jQuery-Aggregate">I have it up on Github</a>. Minified version coming soon.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Retrospective: 1 year of StackOverflow]]></title>
    <link href="http://blog.andrewawhitaker.com/blog/2011/11/12/retrospective-1-year-of-stackoverflow/"/>
    <updated>2011-11-12T23:16:46-05:00</updated>
    <id>http://blog.andrewawhitaker.com/blog/2011/11/12/retrospective-1-year-of-stackoverflow</id>
    <content type="html"><![CDATA[<p>About one year ago this month I joined <a href="http://www.stackoverflow.com">StackOverflow</a> and started participating. I wanted to take a few minutes to reflect on my experience the site. First off, why did I start answering questions?</p>

<ul>
<li><p>A living portfolio; My StackOverflow profile is something that&rsquo;s constantly growing and that I can show to employers</p></li>
<li><p>Learning. Just spending time on the site allows you to learn new things.</p></li>
<li><p>Helping others. I use tons of free software every day. This is my way of giving back.</p></li>
<li><p>Pick up new problem-solving skills. Seeing the ways <em>others</em> answer questions gives you a view into their thought process. Seeing solutions that you wouldn&rsquo;t necessarily have come up with yourself adds tools to your problem-solving toolbox.</p></li>
</ul>


<p>When I started out, answering questions was a horrifying prospect: <em>I&rsquo;m going to put something on a high traffic programming site for other people to vote on?</em> I was sure I&rsquo;d mess up and get downvoted. Over 500 answers later though (and a 15K reputation), my stage fright has subsided.</p>

<p>I started out motivated by the reputation system (it&rsquo;s addicting). After a while though, there has to be another motivator. For me, that motivator is the knowledge that with an answer you might be helping thousands of people all over the world Googling for a problem. How cool is that? There&rsquo;s also the fact that <strong>you&rsquo;re learning too</strong> when you answer a question.</p>

<p>I quickly figured out what makes a high-quality answer (beyond the qualities of a simply &ldquo;good&rdquo; answer):</p>

<ul>
<li><p>Provides a <strong>working</strong> code sample</p></li>
<li><p>Provides a good explanation of that sample (just giving people code isn&rsquo;t helpful after all)</p></li>
<li><p>Links to relevant documentation</p></li>
<li><p>Link to a demo, if possible</p></li>
</ul>


<p>The last point (linking to a demo) turns out to be very important. If the asker can take your code and play around with it immediately, you&rsquo;re <em>much</em> more likely to get more upvotes and that coveted green check mark. It&rsquo;s hard to argue with a working example.</p>

<p>For that reason, I quickly gravitated to the JavaScript, jQuery, and jQueryUI tags. With those tags, I can almost always provide a working example in an answer. JavaScript sandbox site <a href="http://www.jsfiddle.net">JSFiddle</a> proved invaluable for providing working examples.</p>

<p>After spending some time in those tags, I noticed the &ldquo;<a href="http://meta.stackoverflow.com/q/9731/153691">fastest gun in the west</a>&rdquo; problem. Since I wanted to provide high-quality answers in crowded tags (where answers to simple questions are posted very quickly), I started to get more specific in the tags I watched.</p>

<p>Specifically, I moved toward <a href="http://jqueryui.com/demos/autocomplete">jQueryUI-Autocomplete</a>. Not too many people were watching questions about that widget, so it gave me more time to come up with a high-quality answer. At the same time, jQueryUI is a popular enough framework that my answers did get attention.</p>

<p>This is probably my biggest tip for new StackOverflow answerers: <strong>If you&rsquo;re overwhelmed by the quick answers and high activity in tags, find a specific type of question within that tag to focus on</strong>.</p>

<p>I also set goals while on StackOverflow. I wanted to get 10K reputation by the end of the year (which I&rsquo;ve met and exceeded). I also wanted a silver badge (400 upvotes) in the jQuery tag. Setting goals like this keeps it interesting. You can set goals for each tag and increase your own knowledge of a particular tag substantially.</p>

<p>My goals for next year include:</p>

<ul>
<li><p>Getting a gold badge in jQuery (1000 upvotes)</p></li>
<li><p>Getting a silver badge in C# (yep, I need to branch out)</p></li>
<li><p>Edit 600 posts</p></li>
</ul>


<p>The most valuable thing I&rsquo;ve gotten out of StackOverflow over the last year? Better communication skills. I believe my ability to communicate a technical problem with other technical people has improved substantially. Part of providing a good answer is providing a clear explanation. This skill translates <em>directly</em> into the professional world.</p>

<p>Good luck out there, and don&rsquo;t hesitate to sign-up and start answering.</p>
]]></content>
  </entry>
  
</feed>
