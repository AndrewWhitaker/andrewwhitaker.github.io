<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: nhibernate | Andrew Whitaker]]></title>
  <link href="http://blog.andrewawhitaker.com/blog/categories/nhibernate/atom.xml" rel="self"/>
  <link href="http://blog.andrewawhitaker.com/"/>
  <updated>2014-10-24T12:21:09-04:00</updated>
  <id>http://blog.andrewawhitaker.com/</id>
  <author>
    <name><![CDATA[Andrew Whitaker]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[QueryOver Series Part 8: Working with Subqueries]]></title>
    <link href="http://blog.andrewawhitaker.com/blog/2014/10/24/queryover-series-part-8-working-with-subqueries/"/>
    <updated>2014-10-24T12:17:39-04:00</updated>
    <id>http://blog.andrewawhitaker.com/blog/2014/10/24/queryover-series-part-8-working-with-subqueries</id>
    <content type="html"><![CDATA[<p>Subqueries are often extremely useful when building queries. Unfortunately there&rsquo;s not much out there on how to work with subqueries in QueryOver. In this post, I&rsquo;ll dive into how to create the subqueries using QueryOver&rsquo;s various subquery APIs.</p>

<!-- more -->


<p>There are two places you can use subqueries in a QueryOver query: the <code>SELECT</code> clause and the <code>WHERE</code> clause. Unfortunately you cannot use a subquery in the <code>FROM</code> clause of a QueryOver query.</p>

<h2>Subqueries in the <code>WHERE</code> clause</h2>

<p>As usual, there are several ways to generate identical SQL using QueryOver. I&rsquo;ll go over each one in detail.</p>

<h3><code>.WithSubquery</code></h3>

<p><code>.WithSubquery</code> is the most straightforward and natural way to create a subquery with QueryOver. Basically, using <code>.WithSubquery</code> allows you to use some property on <code>TSubType</code> (or a property belonging to an alias) with a subquery expression. After calling <code>.WithSubquery</code>, there are several methods that become available:</p>

<ul>
<li><code>.Where</code></li>
<li><code>.WhereAll</code></li>
<li><code>.WhereSome</code></li>
<li><code>.WhereExists</code></li>
<li><code>.WhereNotExists</code></li>
<li><code>.WhereProperty</code></li>
</ul>


<p>For the most part these are pretty straightforward, but I&rsquo;ll go over each one.</p>

<h4><code>.Where</code></h4>

<p>You should use <code>.WithSubquery.Where</code> when your subquery returns a scalar value and you want to compare that value (using <code>=</code>, <code>!=</code>, <code>&lt;</code>, <code>&gt;</code>, <code>&gt;=</code>, or <code>&lt;=</code>) with a value from your outer query.</p>

<p>For example, here&rsquo;s a query that finds the <code>Product</code> with the <code>Transaction</code> containing the highest quantity (one <code>Product</code> has many <code>Transactions</code>):</p>

<p><strong>QueryOver</strong>:
```csharp
var popularProduct = session.QueryOver<Product>()</p>

<pre><code>.WithSubquery.Where(pr =&gt; pr.Id ==
    QueryOver.Of&lt;TransactionHistory&gt;()
        .Select(tx =&gt; tx.Product.Id)
        .OrderBy(tx =&gt; tx.Quantity)
        .Desc
        .Take(1)
        .As&lt;int&gt;())
.SingleOrDefault&lt;Product&gt;();
</code></pre>

<p>```</p>

<p><strong>SQL</strong>:
```sql
SELECT</p>

<pre><code>*
</code></pre>

<p>FROM</p>

<pre><code>Production.Product this_
</code></pre>

<p>WHERE</p>

<pre><code>this_.ProductID = (
    SELECT
        TOP (1)  this_0_.ProductID as y0_
    FROM
        Production.TransactionHistory this_0_
    ORDER BY
        this_0_.Quantity desc
);
</code></pre>

<p>```</p>

<p>The interesting thing to note about the subquery is the <code>.As&lt;T&gt;</code> method at the end. This allows us to compare the <code>Id</code> property from the outer query with the inner query&rsquo;s <code>Product.Id</code> property. This method&rsquo;s sole purpose is to be used inside of a subquery like this so that we can treat the entire QueryOver query as a scalar value for comparison purposes.</p>

<h4><code>.WhereAll</code> and <code>.WhereSome</code></h4>

<p><code>.WithSubquery.WhereAll</code> and <code>.WithSubquery.WhereSome</code> generate SQL that looks similar to the SQL generated by <code>Where</code>, but it uses the <code>all</code> or <code>some</code> operator to modify the comparison. The subquery should return a resultset of one column. Each row in that result is compared with the scalar value from the outer query.</p>

<p>For example, here&rsquo;s a query that finds all <code>Product</code>s who&rsquo;s <code>ListPrice</code> is greater than <em>all</em> of the related <code>ProductCostHistory</code> entries' <code>StandardCost</code>. <code>ProductCostHistory</code> tracks product cost over time:</p>

<p><strong>QueryOver</strong>
```csharp
Product productAlias = null;
var products = session.QueryOver<Product>(() => productAlias)</p>

<pre><code>.WithSubquery.WhereAll(p =&gt; p.ListPrice &gt;
    QueryOver.Of&lt;ProductCostHistory&gt;()
        .Where(ch =&gt; ch.Product.Id == productAlias.Id)
        .Select(ch =&gt; ch.StandardCost)
        .As&lt;decimal&gt;())
.List&lt;Product&gt;();
</code></pre>

<p>```</p>

<p><strong>SQL</strong>
```sql
SELECT</p>

<pre><code>*
</code></pre>

<p>FROM</p>

<pre><code>Production.Product this_
</code></pre>

<p>WHERE</p>

<pre><code>this_.ListPrice &gt; all (
    SELECT
        this_0_.StandardCost as y0_
    FROM
        Production.ProductCostHistory this_0_
    WHERE
        this_0_.ProductID = this_.ProductID
)
</code></pre>

<p>```</p>

<p>If you look carefully at the QueryOver, you&rsquo;ll notice that I assigned an alias to the outer <code>Product</code>. This is so that I could correlate the outer query and the inner query.</p>

<p>Using <code>.WhereSome</code> instead would generate SQL using the <code>some</code> operator. This operator returns <code>true</code> if <em>at least one</em> of the values in the resultset from the subquery returns true.</p>

<h4><code>.WhereExists</code> and <code>.WhereNotExists</code></h4>

<p>These two are straightforward. These will generate the SQL you&rsquo;d expect with <code>exists</code> or <code>not exists</code>, respectively. If you&rsquo;re familiar with SQL, you&rsquo;ve probably used these a fair amount. Use <code>.WhereExists</code> to return rows where there&rsquo;s at least one result in the subquery, and use <code>.WhereNotExists</code> to return rows where the subquery returns no results.</p>

<p>Here&rsquo;s an example that returns all products with no transaction history:</p>

<p><strong>QueryOver</strong>
```csharp
Product productAlias = null;</p>

<p>var productsWithNoTransactions = session.QueryOver<Product>(() => productAlias)</p>

<pre><code>.WithSubquery.WhereNotExists(
    QueryOver.Of&lt;TransactionHistory&gt;()
        .Where(tx =&gt; tx.Product.Id == productAlias.Id)
        .Select(tx =&gt; tx.Id))
.List&lt;Product&gt;();
</code></pre>

<p>```</p>

<p><strong>SQL</strong>
```sql
SELECT</p>

<pre><code>*
</code></pre>

<p>FROM</p>

<pre><code>Production.Product this_
</code></pre>

<p>WHERE</p>

<pre><code>not exists (
    SELECT
        this_0_.TransactionID as y0_
    FROM
        Production.TransactionHistory this_0_
    WHERE
        this_0_.ProductID = this_.ProductID
)
</code></pre>

<p>```</p>

<p>Using <code>.WithSubquery</code> is the most straightforward way to work with subqueries in the <code>WHERE</code> clause of a query.</p>

<h3>With the <code>Restrictions</code> class</h3>

<p>You can use the <code>Restrictions</code> class to generate SQL within a QueryOver query as well. I won&rsquo;t show everything you can do with the <code>Restrictions</code> class&mdash; it should be pretty straightforward after showing a few examples.</p>

<p>Here&rsquo;s the first example from the previous section:</p>

<p>```csharp
session.QueryOver<Product>()</p>

<pre><code>.Where(
    Restrictions.EqProperty(
        Projections.Property&lt;Product&gt;(pr =&gt; pr.Id),
        Projections.SubQuery(
            QueryOver.Of&lt;TransactionHistory&gt;()
                .Select(tx =&gt; tx.Product.Id)
                .OrderBy(tx =&gt; tx.Quantity)
                .Desc
                .Take(1))))
.SingleOrDefault&lt;Product&gt;();
</code></pre>

<p>```</p>

<p>I&rsquo;m not sure about you, but to me this is much harder to read and looks much more complex than the example in the previous section.</p>

<p>Usually this syntax is not necessary, but you may find it useful if you&rsquo;re building queries dynamically.</p>

<p>One way to build a list of conditions joined by <code>AND</code> operators is to use <code>Restrictions.Conjunction()</code>. You can call <code>.Add</code> on the <code>Conjunction</code> instance you get back, building a conjunction based on various conditions.</p>

<p>Here&rsquo;s an example:</p>

<p>```csharp
Conjunction conjunction = Restrictions.Conjunction();</p>

<p>if (onlyBiggestTransaction)
{</p>

<pre><code>conjunction.Add(
    Restrictions.EqProperty(
        Projections.Property&lt;Product&gt;(pr =&gt; pr.Id),
        Projections.SubQuery(
            QueryOver.Of&lt;TransactionHistory&gt;()
                .Select(tx =&gt; tx.Product.Id)
                .OrderBy(tx =&gt; tx.Quantity)
                .Desc
                .Take(1))));
</code></pre>

<p>}</p>

<p>session.QueryOver<Product>()</p>

<pre><code>.Where(conjunction)
.List&lt;Product&gt;();
</code></pre>

<p>```</p>

<p>If you have lots of conditions you&rsquo;re evaluating to build a <code>WHERE</code> clause, I would consider going this route. It&rsquo;s easy to read the final query (starting on L16 above), and the various parts of the <code>Conjunction</code> are also nicely separated from the main query.</p>

<h2>Subqueries in the <code>SELECT</code> clause</h2>

<p>There are two ways to use subqueries in the <code>SELECT</code> clause: <code>SelectSubquery</code> and <code>Projections.Subquery</code>.</p>

<h3><code>SelectSubquery</code></h3>

<p>If you&rsquo;re using a select list (built using <code>QueryOver&lt;TRoot, TSubType&gt;.SelectList(...)</code>), the easiest way to create a subquery in the <code>SELECT</code> clause is to use <code>.SelectSubquery</code>. This works exactly how you&rsquo;d expect it to.</p>

<p>This example gets information about a <code>Product</code> and the highest <code>ProductReview.Rating</code> associated with that product:</p>

<p><strong>QueryOver</strong>
```csharp
session.QueryOver<Product>(() => productAlias)</p>

<pre><code>.SelectList(list =&gt; list
    .SelectSubQuery(
        QueryOver.Of&lt;ProductReview&gt;()
            .Where(pr =&gt; pr.Product.Id == productAlias.Id)
            .Select(pr =&gt; pr.Rating)
            .OrderBy(pr =&gt; pr.Rating).Desc
            .Take(1))
    .Select(pr =&gt; pr.Id)
    .Select(pr =&gt; pr.Name))
.List&lt;object[]&gt;();
</code></pre>

<p>```</p>

<p>Note that I&rsquo;m creating a correlated subquery by assigning <code>productAlias</code> in the outer query and then using it in the subquery.</p>

<p><strong>SQL</strong>
```sql
SELECT</p>

<pre><code>(SELECT
    TOP (1)  this_0_.Rating as y0_
FROM
    Production.ProductReview this_0_
WHERE
    this_0_.ProductID = this_.ProductID
ORDER BY
    this_0_.Rating desc) as y0_,
this_.ProductID as y1_,
this_.Name as y2_
</code></pre>

<p>FROM</p>

<pre><code>Production.Product this_;
</code></pre>

<p>```</p>

<h3><code>Projections.Subquery</code></h3>

<p><code>Projections.Subquery</code> can come in handy when building the <code>SELECT</code> clause dynamically. This is especially useful when you&rsquo;re building a <code>SELECT</code> clause using <code>Projections.ProjectionList</code>. Here&rsquo;s the same query from the <code>SelectSubquery</code> example above:</p>

<p>```csharp
session.QueryOver<Product>(() => productAlias)</p>

<pre><code>.Select(Projections.ProjectionList()
    .Add(Projections.SubQuery(
        QueryOver.Of&lt;ProductReview&gt;()
            .Where(pr =&gt; pr.Product.Id == productAlias.Id)
            .Select(pr =&gt; pr.Rating)
            .OrderBy(pr =&gt; pr.Rating)
            .Desc
            .Take(1)))
    .Add(Projections.Property(() =&gt; productAlias.Id))
    .Add(Projections.Property(() =&gt; productAlias.Name)))
.List&lt;object[]&gt;();
</code></pre>

<p>```</p>

<h2>Refactoring tip</h2>

<p>Working with subqueries in QueryOver can quickly become overwhelming, especially if you&rsquo;re building a complex query.</p>

<p>One great way to easily make things a bit more readable is to simply store subquery definitions in variables. Keeping with the same example:</p>

<p>```csharp
Product productAlias = null;</p>

<p>// Store the reviews subquery in a variable
QueryOver<ProductReview> reviewSubquery =</p>

<pre><code>QueryOver.Of&lt;ProductReview&gt;()
    .Where(pr =&gt; pr.Product.Id == productAlias.Id)
    .Select(pr =&gt; pr.Rating)
    .OrderBy(pr =&gt; pr.Rating)
    .Desc
    .Take(1);
</code></pre>

<p>// use that variable in the main query
session.QueryOver<Product>(() => productAlias)</p>

<pre><code>.Select(Projections.ProjectionList()
    .Add(Projections.SubQuery(reviewSubquery))
    .Add(Projections.Property(() =&gt; productAlias.Id))
    .Add(Projections.Property(() =&gt; productAlias.Name)))
.List&lt;object[]&gt;();
</code></pre>

<p>```</p>

<p>That&rsquo;s an easy improvement to make, especially when you&rsquo;re dealing with larger queries.</p>

<h2>Summary</h2>

<p>Working with subqueries can quickly become overwhelming with QueryOver. Hopefully this post will help you write and maintain more advanced QueryOver queries involving subqueries. To summarize:</p>

<ul>
<li>With QueryOver you can use subqueries in the <code>SELECT</code> clause or the <code>WHERE</code> clause. Unfortunately you cannot query from a derived table in the <code>FROM</code> clause</li>
<li>In the <code>WHERE</code> clause, you can use <code>.WithSubquery</code>, followed by a <code>.Where</code> variety to control how the results of the subquery are treated</li>
<li>You can also use the <code>Restrictions</code> class along with <code>Projections.Subquery</code></li>
<li>In the <code>SELECT</code> clause, you can use <code>.SelectSubQuery</code> with <code>.SelectList</code>.</li>
<li>You can also use <code>Projections.Subquery</code> to  generate a subquery in the <code>SELECT</code> clause.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting NHibernate Up and Running Quickly]]></title>
    <link href="http://blog.andrewawhitaker.com/blog/2014/08/28/getting-nhibernate-up-and-running-quickly/"/>
    <updated>2014-08-28T11:44:06-04:00</updated>
    <id>http://blog.andrewawhitaker.com/blog/2014/08/28/getting-nhibernate-up-and-running-quickly</id>
    <content type="html"><![CDATA[<p>NHibernate can seem like a daunting library to set up. The configuration can get quite complicated&mdash;XML mappings, code mappings, mapping conventions, dialects, logging, etc. Sometimes you just want to get something up and running to test out a query or play around with a database other than your primary one. In this post, I&rsquo;ll show you how to get up and running with NHibernate in about 5 minutes and in around 50 lines of code in <a href="http://www.linqpad.net">LINQPad</a>.</p>

<p>This assumes you already have a database configured and ready to create new tables and connect to with NHibernate.</p>

<!-- more -->


<h2>1. Create your database table</h2>

<p>I&rsquo;ll use MySQL as an example, but first you&rsquo;ll need to create a database table (or a few tables) that you want to play around with. I&rsquo;ll create a <code>person</code> table:</p>

<p><code>sql
CREATE TABLE `person` (
  `Id` int(11) NOT NULL AUTO_INCREMENT,
  `FirstName` varchar(200) NOT NULL,
  `BirthDate` date NOT NULL,
  `LastName` varchar(200) NOT NULL,
  PRIMARY KEY (`Id`)
)
</code></p>

<h2>2. Prepare your LINQPad Query</h2>

<p>After creating a new query in LINQPad, set the <strong>Language</strong> to <strong>C# Program</strong>, then press F4 to open the <strong>Query Properties</strong> window. From here you can browse to the &ldquo;NHibernate.dll&rdquo; file that you&rsquo;d like to use. I&rsquo;ll also add MySql.Data.dll since I need to interact with a MySql database:</p>

<p><img src="/images/posts/2014-08-28-getting-nhibernate-up-and-running-quickly-linqpad-query-properties/linqpad-query-properties.png"></p>

<p>Next, go over to the <strong>Additional Namespace Imports</strong> tab and add the following namespaces:</p>

<p><code>
NHibernate
NHibernate.Cfg
NHibernate.Cfg.MappingSchema
NHibernate.Dialect
NHibernate.Mapping.ByCode
NHibernate.Mapping.ByCode.Conformist
</code></p>

<p>Okay, that&rsquo;s all we should need to get started with actually writing the query.</p>

<h2>3. Add some configuration code</h2>

<p>Next we&rsquo;ll actually configure NHibernate to connect to the database correctly. Normally you would configure NHibernate via your project&rsquo;s *.config file, but since we&rsquo;re using LINQPad, a configuration file isn&rsquo;t really feasible. Luckily, we can configure NHibernate in C# using the <code>.DatabaseIntegration</code> extension method:</p>

<p>```csharp
void Main()
{</p>

<pre><code>Configuration cfg = new Configuration()
    .DataBaseIntegration(db =&gt;
    {
        db.ConnectionString = "Server=127.0.0.1;Database=test;Uid=nhibernate;Pwd=nhibernate;";
        db.Dialect&lt;MySQLDialect&gt;();
    });
</code></pre>

<p>}
```</p>

<p>Here I&rsquo;m just specifying the dialect I&rsquo;d like to use (<code>MySQLDialect</code>) and setting my connection string.</p>

<h2>4. Add an entity and mapping</h2>

<p>Since I created a <code>person</code> table earlier, I&rsquo;m going to go ahead and create a <code>Person</code> class and <code>PersonMap</code> to map that class using NHibernate&rsquo;s mapping-by-code. This code goes just under the <code>Main</code> method we filled in earlier. Here&rsquo;s the entity:</p>

<p>```csharp
public class Person
{</p>

<pre><code>public virtual int Id { get; set; }

public virtual string FirstName { get; set; }

public virtual string LastName { get; set; }

public virtual DateTime BirthDate { get; set; }
</code></pre>

<p>}
```</p>

<p>Here&rsquo;s the mapping:</p>

<p>```csharp
public class PersonMap : ClassMapping<Person>
{</p>

<pre><code>public PersonMap()
{
    this.Table("person");
    this.Id(p =&gt; p.Id);
    this.Property(p =&gt; p.FirstName);
    this.Property(p =&gt; p.LastName);        
    this.Property(p =&gt; p.BirthDate);
}
</code></pre>

<p>}
```</p>

<h2>5. Add code to process the mapping we added</h2>

<p>The last configuration step is to modify our <code>Main</code> method to incorporate our mappings into the configuration. We&rsquo;ll modify our <code>Main</code> method as follows:</p>

<p>```csharp
void Main()
{</p>

<pre><code>Configuration cfg = new Configuration()
    .DataBaseIntegration(db =&gt;
    {
        db.ConnectionString = "Server=127.0.0.1;Database=test;Uid=nhibernate;Pwd=nhibernate;";
        db.Dialect&lt;MySQLDialect&gt;();
    });

/* Add the mapping we defined: */
var mapper = new ModelMapper();
mapper.AddMappings(Assembly.GetExecutingAssembly().GetExportedTypes());

HbmMapping mapping = mapper.CompileMappingForAllExplicitlyAddedEntities();
cfg.AddMapping(mapping);
</code></pre>

<p>}
```</p>

<h2>6. Create an <code>ISessionFactory</code>, <code>ISession</code> and <code>ITransaction</code> and write a query</h2>

<p>Ok the last step is to build an <code>ISessionFactory</code> from our configuration. From there we can get an <code>ISession</code> and an <code>ITransaction</code> to actually work with the entities we&rsquo;ve created and mapped. We&rsquo;ll modify the <code>Main</code> method again as follows:</p>

<p>```csharp
void Main()
{</p>

<pre><code>Configuration cfg = new Configuration()
    .DataBaseIntegration(db =&gt;
    {
        db.ConnectionString = "Server=127.0.0.1;Database=test;Uid=nhibernate;Pwd=nhibernate;";
        db.Dialect&lt;MySQLDialect&gt;();
    });

/* Add the mapping we defined: */
var mapper = new ModelMapper();
mapper.AddMappings(Assembly.GetExecutingAssembly().GetExportedTypes());

HbmMapping mapping = mapper.CompileMappingForAllExplicitlyAddedEntities();

cfg.AddMapping(mapping);   

/* Create a session and execute a query: */
using (ISessionFactory factory = cfg.BuildSessionFactory())
using (ISession session = factory.OpenSession())
using (ITransaction tx = session.BeginTransaction())
{
    session.Get&lt;Person&gt;(1).Dump();

    tx.Commit();
}
</code></pre>

<p>}
```</p>

<p>&hellip;And that&rsquo;s really it. If you hit <strong>F5</strong> or the green play button in LINQPad, your query should run, assuming you have everything configured correctly. Here&rsquo;s the whole listing below, just in case:</p>

<p>```csharp
void Main()
{</p>

<pre><code>Configuration cfg = new Configuration()
    .DataBaseIntegration(db =&gt;
    {
        db.ConnectionString = "Server=127.0.0.1;Database=test;Uid=nhibernate;Pwd=nhibernate;";
        db.Dialect&lt;MySQLDialect&gt;();
    });

/* Add the mapping we defined: */
var mapper = new ModelMapper();
mapper.AddMappings(Assembly.GetExecutingAssembly().GetExportedTypes());

HbmMapping mapping = mapper.CompileMappingForAllExplicitlyAddedEntities();

cfg.AddMapping(mapping);

/* Create a session and execute a query: */
using (ISessionFactory factory = cfg.BuildSessionFactory())
using (ISession session = factory.OpenSession())
using (ITransaction tx = session.BeginTransaction())
{
    session.Get&lt;Person&gt;(1).Dump();

    tx.Commit();
}
</code></pre>

<p>}</p>

<p>public class PersonMap : ClassMapping<Person>
{</p>

<pre><code>public PersonMap()
{
    this.Table("person");
    this.Id(p =&gt; p.Id);
    this.Property(p =&gt; p.FirstName);
    this.Property(p =&gt; p.LastName);        
    this.Property(p =&gt; p.BirthDate);
}
</code></pre>

<p>}</p>

<p>public class Person
{</p>

<pre><code>public virtual int Id { get; set; }

public virtual string FirstName { get; set; }

public virtual string LastName { get; set; }

public virtual DateTime BirthDate { get; set; }
</code></pre>

<p>}
```</p>

<h2>Summary</h2>

<p>Hopefully this post will come in handy if you&rsquo;re looking to quickly get NHibernate up and running for some throwaway or experimental code. When you boil the setup down to the very basics it&rsquo;s actually not that bad at all. From here, you can make some configuration changes or enhancements. Two useful configuration options to turn on inside of the <code>.DatabaseIntegration</code> method are the <code>LogFormattedSql</code> property and the <code>LogSqlInConsole</code> property. These will allow you to actually see the SQL that NHibernate is generating.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[QueryOver Series - Part 7: Using SQL Functions]]></title>
    <link href="http://blog.andrewawhitaker.com/blog/2014/08/15/queryover-series-part-7-using-sql-functions/"/>
    <updated>2014-08-15T15:46:35-04:00</updated>
    <id>http://blog.andrewawhitaker.com/blog/2014/08/15/queryover-series-part-7-using-sql-functions</id>
    <content type="html"><![CDATA[<p>In this post, I&rsquo;ll go over how to use functions built into the database engine. This can be useful when you want to do some work inside of your SQL query rather than do post-processing on the result set you get back.</p>

<!-- more -->


<h2>Dialects in NHibernate</h2>

<p>To understand how to use and later build SQL functions, it&rsquo;s helpful to understand how the default SQL functions are registered with NHibernate to begin with.</p>

<p>NHibernate has the concept of a SQL <em>dialect</em>, a vendor-specific flavor of SQL. As you probably know, <a href="http://www.nhforge.org/doc/nh/en/#configuration-optional-dialects">many dialects are supported out of the box</a>. NHibernate represents dialects with a class per supported dialect.</p>

<p>The <code>Dialect</code> base class registers required functions for a dialect using ANSI-92 standards. If a dialect implements a function differently, that dialect must overwrite the base class' implementation with its own.</p>

<p>For example, SQL Server doesn&rsquo;t implement the ANSI-92 <code>TRIM</code> function, so the <code>MsSql2000</code> dialect class uses a different implementation than the base class (which ultimately calls <code>rtrim</code> and <code>ltrim</code> to simulate the ANSI standard).</p>

<p>It&rsquo;s worth looking over the <code>Dialect</code> base class and possibly the dialect class for the database engine you&rsquo;re using to see what functions are already available to you.</p>

<h2>Calling functions from your queries</h2>

<p>There are two ways to actually use SQL functions inside of your queries.</p>

<h3>Using <code>Projections.SqlFunction</code></h3>

<p>Using already registered SQL functions is fairly simple, using <code>Projections.SqlFunction</code>. For example, here&rsquo;s a query that gets every <code>Person</code>&rsquo;s middle name, or &ldquo;Not Applicable&rdquo; if <code>MiddleName</code> is <code>null</code>, using the <code>COALESCE</code> function:</p>

<p><strong>QueryOver</strong>:
```csharp
IList<string> middleNames = session.QueryOver<Person>()</p>

<pre><code>.Select(
    Projections.SqlFunction("coalesce", NHibernateUtil.String,
        Projections.Property&lt;Person&gt;(p =&gt; p.MiddleName),
        Projections.Constant("Not Applicable"))
)
.List&lt;string&gt;();
</code></pre>

<p>```</p>

<p><strong>SQL</strong>:
```sql
SELECT</p>

<pre><code>COALESCE (this_.MiddleName, 'Not Applicable') AS y0_ 
</code></pre>

<p>FROM</p>

<pre><code>Person.Person this_ 
</code></pre>

<p>```</p>

<p>This same pattern applies to all SQL functions that you&rsquo;d like to call using <code>Projections.SqlFunction</code>.</p>

<h3>Using <code>ProjectionsExtensions</code></h3>

<p>Inside of a QueryOver query, there&rsquo;s actually a better way to call many of the most common SQL functions. The <code>ProjectionsExtensions</code> class inside of the <code>NHibernate.Criterion</code> namespace contains extension methods that are parsed into SQL function calls.</p>

<p>For example, here&rsquo;s a query using the <code>.Upper</code> extension method. Note that these extension methods are actually on the object&rsquo;s properties:</p>

<p><strong>QueryOver</strong>:
```csharp
IList<string> middleNames = session.QueryOver<Person>()</p>

<pre><code>.Select(p =&gt; p.FirstName.Upper())
.List&lt;string&gt;();
</code></pre>

<p>```</p>

<p><strong>SQL</strong>:
```sql
SELECT</p>

<pre><code>UPPER (this_.FirstName) AS y0_ 
</code></pre>

<p>FROM</p>

<pre><code>Person.Person this_ 
</code></pre>

<p>```</p>

<p>This is much cleaner than the alternative using <code>Projections.SqlFunction</code>:</p>

<p>```csharp
IList<string> names = session.QueryOver<Person>()</p>

<pre><code>.Select(
    Projections.SqlFunction(
        "upper",
        NHibernateUtil.String,
        Projections.Property&lt;Person&gt;(p =&gt; p.FirstName)))
.List&lt;string&gt;();
</code></pre>

<p>```</p>

<h2>Using your own functions</h2>

<p>In most cases, functions you want to use will already be registered in the dialect you&rsquo;re using. In some cases, however, you&rsquo;ll want to add a function that&rsquo;s not been registered. In this section of the post, I&rsquo;ll go over how to add the <code>checksum</code> function in SQL Server. There are a few steps involved in using your own function, I&rsquo;ll go over each one in detail.</p>

<p>There are actually two ways to invoke a custom SQL function from your queries. You can either add the function &ldquo;statically&rdquo; to a custom dialect, or invoke a brand new function &ldquo;dynamically&rdquo; at runtime that&rsquo;s not registered with the dialect.</p>

<h3>Adding your own dialect</h3>

<p>As I discussed earlier, functions are registered in the dialect class representing the database flavor you&rsquo;re using. Since we can&rsquo;t modify those classes directly to register our function, we&rsquo;ll create a new dialect that&rsquo;s a subclass of the one we&rsquo;re using.</p>

<p>Since I&rsquo;m using SQL Server in this example, I&rsquo;ll create a custom dialect that&rsquo;s a subclass of <code>MsSql2012Dialect</code>.</p>

<p>```csharp
using NHibernate;
using NHibernate.Dialect;
using NHibernate.Dialect.Function;</p>

<p>public class AdventureWorksDialect : MsSql2012Dialect
{</p>

<pre><code>public AdventureWorksDialect()
{
    this.RegisterFunction("checksum", new StandardSQLFunction("checksum", NHibernateUtil.Int32));
}
</code></pre>

<p>}
```</p>

<p>Then, we need to make sure our application is using the new dialect. We can do this either in our configuration code:</p>

<p>```csharp
var cfg = new Configuration()</p>

<pre><code>.Configure()
.DataBaseIntegration(db =&gt;
{
    db.Dialect&lt;AdventureWorksDialect&gt;();
});
</code></pre>

<p>```</p>

<p>Or, in our config file:</p>

<p>```xml
&lt;hibernate-configuration xmlns=&ldquo;urn:nhibernate-configuration-2.2&rdquo;>
  &lt;session-factory></p>

<pre><code>&lt;property name="show_sql"&gt;false&lt;/property&gt;
&lt;property name="connection.driver_class"&gt;NHibernate.Driver.Sql2008ClientDriver&lt;/property&gt;
&lt;property name="dialect"&gt;AdventureWorks.Database.AdventureWorksDialect&lt;/property&gt;
&lt;property name="connection.connection_string_name"&gt;AdventureWorks&lt;/property&gt;
</code></pre>

<p>  &lt;/session-factory>
&lt;/hibernate-configuration>
```</p>

<h4>Calling the function using <code>Projections.SqlFunction</code></h4>

<p>If all you want to do is call a function using <code>Projections.SqlFunction</code>, you&rsquo;re basically done. All you need to do is call the function:</p>

<p>```csharp
IList<int> checksums = session.QueryOver<Product>()</p>

<pre><code>.Select(Projections.SqlFunction(
    "checksum",
    NHibernateUtil.Int32,
    Projections.Property&lt;Product&gt;(p =&gt; p.Id),
    Projections.Property&lt;Product&gt;(p =&gt; p.Name)))
.List&lt;int&gt;();
</code></pre>

<p>```</p>

<p>This will yield the following SQL:</p>

<p>```sql
SELECT</p>

<pre><code>CHECKSUM (this_.ProductID, this_.Name) AS y0_ 
</code></pre>

<p>FROM</p>

<pre><code>Production.Product this_ 
</code></pre>

<p>```</p>

<h4>Creating a custom projections class</h4>

<p>Using <code>Projections.SqlFunction</code> isn&rsquo;t quite satisfactory, especially after seeing the built-in <code>ProjectionExtensions</code>. We can easily create a <code>CustomProjections</code> class that provides some syntactic sugar for calling our custom function:</p>

<p>```csharp
public static class CustomProjections
{</p>

<pre><code>public static IProjection Checksum(params Expression&lt;Func&lt;object&gt;&gt;[] properties)
{
    return Checksum(properties.Select(Projections.Property).ToArray());
}

public static IProjection Checksum(params IProjection[] projections)
{
    return Projections.SqlFunction("checksum", NHibernateUtil.Int32, projections);
}
</code></pre>

<p>}
```</p>

<p>Notice that we have two overloads of <code>Checksum</code>, one that takes an array of <code>Expression&lt;Func&lt;object&gt;&gt;</code>s and another that takes an array of <code>IProjection</code>s.</p>

<p>Using the <code>Expression&lt;Func&lt;object&gt;&gt;[]</code> overload is convenient when we don&rsquo;t need to combine the use of <code>checksum</code> with other functions, for example:</p>

<p>```csharp
IList<int> checksums = session.QueryOver<Product>(() => productAlias)</p>

<pre><code>.Select(CustomProjections.Checksum(
    () =&gt; productAlias.Name,
    () =&gt; productAlias.Id))
.List&lt;int&gt;();
</code></pre>

<p>```</p>

<p>Using the <code>IProjection[]</code> overload is useful when we need to supply <code>checksum</code> with the result of calling <em>another</em> function, say <code>avg</code>:</p>

<p><code>``csharp
// Get the</code>checksum` of the average price for each sell start date.
IList&lt;object[]> checksums = session.QueryOver<Product>(() => productAlias)</p>

<pre><code>.SelectList(list =&gt; list
    .SelectGroup(p =&gt; p.SellStartDate)
    .Select(
        CustomProjections.Checksum(
            Projections.Avg(
                Projections.Property(() =&gt; productAlias.ListPrice)))
    ))
.List&lt;object[]&gt;();
</code></pre>

<p>```</p>

<h4><code>StandardSQLFunction</code> and <code>SQLFunctionTemplate</code></h4>

<p>If you look through <a href="https://github.com/nhibernate/nhibernate-core/tree/master/src/NHibernate/Dialect/Function">NHibernate&rsquo;s implementations of various SQL functions</a>, you might notice that many use <code>StandardSQLFunction</code> and <code>SQLFunctionTemplate</code>. These should take care of most of your custom function needs. If not, you can always implement <code>ISQLFunction</code> and create your own implementation.</p>

<h5><code>StandardSQLFunction</code></h5>

<p>We used <code>StandardSQLFunction</code> to implement our <code>checksum</code> example. Basically, <code>StandardSQLFunction</code> allows you to implement a SQL function that takes an arbitrary number of arguments and returns a scalar value.</p>

<h5><code>SQLFunctionTemplate</code></h5>

<p><code>SQLFunctionTemplate</code> is a bit more sophisticated, and you can use it to implement SQL functions with a <em>template</em>, like the name implies. This is typically useful when you want to require a function to have a specific number of arguments.</p>

<p>An example of this would be the <code>stuff</code> <a href="http://msdn.microsoft.com/en-us/library/ms188043.aspx">function in SQL Server</a>. This function inserts one string into another string, deleting the specified number of characters from the first string at a start index, then inserts the second string.</p>

<p>For example, here&rsquo;s how you could use <code>stuff</code> to replace &ldquo;C++&rdquo; with &ldquo;C#&rdquo;:</p>

<p><code>csharp
select stuff('C++', 2, 2, '#')
</code></p>

<p>Since <code>stuff</code> has a fixed number of parameters, it&rsquo;s a good candidate for <code>SQLFunctionTemplate</code>. All we have to do to register it in our dialect is add the following line:</p>

<p><code>csharp
this.RegisterFunction("stuff", new SQLFunctionTemplate(NHibernateUtil.Int32, "stuff(?1, ?2, ?3, ?4)"));
</code></p>

<p>Here, we&rsquo;re basically just saying that <code>stuff</code> is a function whose syntax is invoking the <code>stuff</code> function with exactly four parameters.</p>

<p>We&rsquo;ll add a few more static methods to our <code>CustomProjections</code> class, since there are several ways we might want to call this function, we&rsquo;ll provide several overloads:</p>

<p>```csharp
// Usage: CustomProjections.Stuff(() => alias.Property, 1, 2, () => alias.OtherProperty)
public static IProjection Stuff(Expression&lt;Func<object>> characterExpression, int start, int length, Expression&lt;Func<object>> replaceWithExpression)
{</p>

<pre><code>return Stuff(Projections.Property(characterExpression), start, length, Projections.Property(replaceWithExpression));
</code></pre>

<p>}</p>

<p>// Usage: CustomProjections.Stuff(Projections.Property(..), 1, 2, Projections.Constant(&hellip;))
public static IProjection Stuff(IProjection characterExpression, int start, int length, IProjection replaceWithExpression)
{</p>

<pre><code>return Projections.SqlFunction("stuff", NHibernateUtil.String, characterExpression, Projections.Constant(start), Projections.Constant(length), replaceWithExpression);
</code></pre>

<p>}</p>

<p>// Usage: CustomProjections.Stuff(() => alias.Property, 1, 2, &ldquo;Replacement&rdquo;)
public static IProjection Stuff(Expression&lt;Func<object>> characterExpression, int start, int length, string replaceWithExpression)
{</p>

<pre><code>return Stuff(Projections.Property(characterExpression), start, length, Projections.Constant(replaceWithExpression));
</code></pre>

<p>}
```</p>

<p>Here&rsquo;s an example of how it would be used:</p>

<p>```csharp
IList<string> stuffResults = session.QueryOver<Product>(() => productAlias)</p>

<pre><code>.SelectList(list =&gt; list
    .Select(
        CustomProjections.Stuff(() =&gt; productAlias.Name, 0, 2, "PR")
    ))
.List&lt;string&gt;();
</code></pre>

<p>```</p>

<h3>Invoking new functions at runtime</h3>

<p>If, for some reason, you don&rsquo;t want to create a custom dialect and register functions there, you can still invoke an unregistered SQL function. There&rsquo;s an overload of <code>Projections.SqlFunction</code> that takes an <code>ISQLFunction</code> that you can define at runtime. For example, if we had not registered our <code>checksum</code> function, you could call it dynamically like this:</p>

<p>```csharp
Projections.SqlFunction(</p>

<pre><code>new StandardSQLFunction("checksum"),
NHibernateUtil.Int32,
Projections.Property(() =&gt; productAlias.Name),
Projections.Property(() =&gt; productAlias.Id)
</code></pre>

<p>```</p>

<p>Here, we&rsquo;re defining and using the <code>checksum</code> function in one shot.</p>

<p>There <em>is</em> a disadvantage to using this method. When you register a function with the dialect instead, NHibernate adds the function to an internal cache and reuses the function definition whenever you access it by name.</p>

<p>Creating a new <code>checksum</code> function every time we needed to call the SQL Server <code>checksum</code> function would be wasteful&mdash;it would be better to define the function once and have NHibernate cache and reuse it.</p>

<p>However, we may want to leverage invoking a function dynamically to take care of special SQL functions, like SQL Server&rsquo;s <code>datediff</code> function.</p>

<h4>Implementing SQL Server&rsquo;s <code>datediff</code> function.</h4>

<p>SQL Server has a <a href="http://msdn.microsoft.com/en-us/library/ms189794%28SQL.90%29.aspx">function</a> called <code>datediff</code> that returns the number of &ldquo;date parts&rdquo; between a given start and end date.</p>

<p>At first glance, it seems like we could register <code>datediff</code> using <code>SQLFunctionTemplate</code>:</p>

<p><code>csharp
new SQLFunctionTemplate("datediff(?1, ?2, ?3)")
</code></p>

<p>The problem here is that <code>datediff</code>&rsquo;s first parameter is a SQL server keyword and <em>cannot</em> be supplied as a variable. According to MSDN:</p>

<blockquote><p>These dateparts and abbreviations cannot be supplied as a user-declared variable.</p></blockquote>

<p>So that means we can&rsquo;t call <code>datediff</code> and supply the <code>datepart</code> dynamically. We could register a function for every possible version of <code>datediff</code> and name them all slightly differently:</p>

<p><code>csharp
RegisterFunction("datediff-yr", new SQLFunctionTemplate("datediff(yy, ?1, ?2)"));
RegisterFunction("datediff-dd", new SQLFunctionTemplate("datediff(dd, ?1, ?2)"));
/* etc, for each valid datepart */
</code></p>

<p>I&rsquo;m not sure about you but this makes me cringe. Luckily there&rsquo;s a better solution. We can use NHibernate&rsquo;s ability to run an arbitrary, unregistered SQL function to dynamically create and execute the various versions of <code>datediff</code>. Here&rsquo;s the code:</p>

<p>```csharp
public static class DateProjections
{</p>

<pre><code>private const string DateDiffFormat = "datediff({0}, ?1, ?2)";

public static IProjection DateDiff(
    string datepart, 
    Expression&lt;Func&lt;object&gt;&gt; startDate, 
    Expression&lt;Func&lt;object&gt;&gt; endDate)
{
    // Build the function template based on the date part.
    string functionTemplate = string.Format(DateDiffFormat, datepart);

    return Projections.SqlFunction(
        new SQLFunctionTemplate(NHibernateUtil.Int32, functionTemplate),
        NHibernateUtil.Int32,
        Projections.Property(startDate),
        Projections.Property(endDate));
}
</code></pre>

<p>}
```</p>

<p>Now, we&rsquo;re able to write queries using any date part we want without having to register a separate function for each date part. For example, here&rsquo;s a query that gets the <code>datediff</code> in days, quarters, and months:</p>

<p>```csharp
IList&lt;object[]> checksums = session.QueryOver<Product>(() => productAlias)</p>

<pre><code>.SelectList(list =&gt; list
    .Select(DateProjections.DateDiff("dd", () =&gt; productAlias.SellStartDate, () =&gt; productAlias.SellEndDate))
    .Select(DateProjections.DateDiff("qq", () =&gt; productAlias.SellStartDate, () =&gt; productAlias.SellEndDate))
    .Select(DateProjections.DateDiff("mm", () =&gt; productAlias.SellStartDate, () =&gt; productAlias.SellEndDate)))
.List&lt;object[]&gt;();
</code></pre>

<p>```</p>

<p>This still isn&rsquo;t perfect. You might have realized that we&rsquo;re still at a disadvantage since we&rsquo;re not using cached versions of our function definitions. One good solution to this is to use our own cache for the various <code>datediff</code> flavors. Here&rsquo;s what our class looks like with that modification:</p>

<p>```csharp
public static class DateProjections
{</p>

<pre><code>private const string DateDiffFormat = "datediff({0}, ?1, ?2)";

// Maps datepart to an ISQLFunction
private static Dictionary&lt;string, ISQLFunction&gt; DateDiffFunctionCache = 
    new Dictionary&lt;string, ISQLFunction&gt;();

public static IProjection DateDiff(
    string datepart, 
    Expression&lt;Func&lt;object&gt;&gt; startDate, 
    Expression&lt;Func&lt;object&gt;&gt; endDate)
{
    ISQLFunction sqlFunction = GetDateDiffFunction(datepart);

    return Projections.SqlFunction(
        sqlFunction,
        NHibernateUtil.Int32,
        Projections.Property(startDate),
        Projections.Property(endDate));
}

private static ISQLFunction GetDateDiffFunction(string datepart)
{
    ISQLFunction sqlFunction;

    if (!DateDiffFunctionCache.TryGetValue(datepart, out sqlFunction))
    {
        string functionTemplate = string.Format(DateDiffFormat, datepart);
        sqlFunction = new SQLFunctionTemplate(NHibernateUtil.Int32, functionTemplate);

        DateDiffFunctionCache[datepart] = sqlFunction;
    }

    return sqlFunction;
}
</code></pre>

<p>}
```</p>

<p>Now we&rsquo;re caching our function definitions so that we&rsquo;re not redefining versions of <code>datediff</code> unnecessarily.</p>

<p>Another enhancement that probably should be made is to make the <code>datepart</code> argument of <code>DateProjections.DateDiff</code> strongly typed. A good solution there would be to use an <code>enum</code> defining the possible <code>datepart</code> values. Then you could use a <code>Dictionary&lt;DatePart, string&gt;</code> to map from <code>enum</code> values to strings.</p>

<h2>Summary</h2>

<p>Calling built-in SQL functions from NHibernate queries has been written about many times before, but hopefully I was able to shed some light on how those functions are registered and invoked. In summary:</p>

<ul>
<li>You can either register a function by using a custom dialect and invoke it by name later, or define and invoke the function in one step.</li>
<li>Registering a function with a custom dialect is often the best option since the function definition is cached and reused automatically by NHibernate.</li>
<li><code>StandardSQLFunction</code> and <code>SQLFunctionTemplate</code> are implementations of <code>ISQLFunction</code> that enable easily defining SQL functions.</li>
<li>Using a custom projections class is a useful abstraction to lay on top of <code>Projections.SqlFunction</code> to make code easier to read and more robust.</li>
<li>You can use NHibernate&rsquo;s ability to call SQL functions at runtime to implement the <code>datediff</code> function in a clean way.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[QueryOver Series - Part 6: Query Building Techniques]]></title>
    <link href="http://blog.andrewawhitaker.com/blog/2014/08/07/queryover-series-part-6-query-building-techniques/"/>
    <updated>2014-08-07T17:05:37-04:00</updated>
    <id>http://blog.andrewawhitaker.com/blog/2014/08/07/queryover-series-part-6-query-building-techniques</id>
    <content type="html"><![CDATA[<p>In this post, I&rsquo;m going to explain some more advanced techniques for building queries with QueryOver. Practically, this means adding joins and where clauses dynamically. This is actually one of the most powerful abilities of QueryOver so it&rsquo;s worth understanding.</p>

<!-- more -->


<p>To make this easier to explain, I&rsquo;m going to use a simple example that I can build on throughout the post.</p>

<h2>The Problem</h2>

<p>Imagine your company is building a page that lists all of the company&rsquo;s available products. On the left hand side, there are a few different filters the user can use to narrow his or her search.</p>

<p>You&rsquo;re immediately faced with a problem: How do I conditionally add where clauses and joins depending on the user&rsquo;s filters? If you&rsquo;re using a pure SQL solution, you would most likely need to build up dynamic SQL and then execute that. This will work fine, but you&rsquo;re immediately faced with a few other problems:</p>

<ul>
<li><strong>You&rsquo;re more open to SQL injection</strong>. Instead of using a parameterized query, a programmer could modify your query to concatenate user-inputted data into the query.</li>
<li><strong>You have a big maintainability problem</strong>. You&rsquo;re going to have to deal with giant strings of SQL. This isn&rsquo;t fun to read or modify.</li>
</ul>


<p>Both of these problems apply whether you&rsquo;re building the SQL in a stored procedure or if you&rsquo;re building SQL outside of the database engine (say, in your application layer).</p>

<h2>Solutions with QueryOver</h2>

<p>Using QueryOver to dynamically build queries is an attractive solution because it solves both problems:</p>

<ul>
<li>NHibernate is building the SQL behind the scenes using parameterized queries, so we don&rsquo;t have to worry about SQL injection.</li>
<li>Instead of looking at huge amounts of string concatenation, we&rsquo;re looking at more expressive .NET code. As a bonus, this is compiled with our application making it much more maintainable.</li>
</ul>


<p>Lets take a look at how we can dynamically construct queries with QueryOver. Keeping with our example, we&rsquo;ll start with a base query that retrieves information about all products:</p>

<p>Here&rsquo;s the DTO we&rsquo;re projecting to with our queries:</p>

<p>```csharp
public class ProductDTO
{</p>

<pre><code>public string Name { get; set; }

public string Color { get; set; }

public decimal ListPrice { get; set; }
</code></pre>

<p>}
```</p>

<p>And here&rsquo;s the basic query we&rsquo;ll be building on:</p>

<p>```csharp
IList<ProductDTO> products = session.QueryOver<Product>()</p>

<pre><code>.SelectList(list =&gt; list
    .Select(pr =&gt; pr.Name).WithAlias(() =&gt; result.Name)
    .Select(pr =&gt; pr.Color).WithAlias(() =&gt; result.Color)
    .Select(pr =&gt; pr.ListPrice).WithAlias(() =&gt; result.ListPrice))
.TransformUsing(Transformers.AliasToBean&lt;ProductDTO&gt;())
.List&lt;ProductDTO&gt;();
</code></pre>

<p>```</p>

<h3>Conditional Restrictions</h3>

<p>Continuing with our example, imagine we have a &ldquo;Color&rdquo; filter where the user can look for products only matching the colors they specify. Since <code>Product.Color</code> is a <code>string</code>, we&rsquo;ll introduce an <code>IEnumerable&lt;string&gt;</code> containing user-specified colors.</p>

<p>Adding this to our query gives us the following:</p>

<p>```csharp
ProductDTO result = null;</p>

<p>var query = session.QueryOver<Product>();</p>

<p>if (colors != null &amp;&amp; colors.Any())
{</p>

<pre><code>query.Where(pr =&gt; pr.Color.IsIn(colors.ToArray()));
</code></pre>

<p>}</p>

<p>IList<ProductDTO> products = query</p>

<pre><code>.SelectList(list =&gt; list
    .Select(pr =&gt; pr.Name).WithAlias(() =&gt; result.Name)
    .Select(pr =&gt; pr.Color).WithAlias(() =&gt; result.Color)
    .Select(pr =&gt; pr.ListPrice).WithAlias(() =&gt; result.ListPrice))
.TransformUsing(Transformers.AliasToBean&lt;ProductDTO&gt;())
.List&lt;ProductDTO&gt;();
</code></pre>

<p>```</p>

<p>Our query has gotten a little more complicated, but it&rsquo;s still readable. Later on in the post, I&rsquo;ll show one way you can make this a bit more readable.</p>

<h3>Conditional Joins</h3>

<p>Sometimes you&rsquo;ll need to conditionally perform a join. One reason for this would be that a query <em>without</em> the join performs much better and you don&rsquo;t want to join unless you have to.</p>

<p>Lets add another filter to our example. Each <code>Product</code> in our domain has 0 to many <code>ProductReview</code>s. Let&rsquo;s add a filter that allows the user to find only products with a minimum user rating. For example, this would let a user find only products that have at least one rating of 3 stars or higher.</p>

<p>We&rsquo;ll add a <code>minimumRating</code> (a <code>Nullable&lt;int&gt;</code> where <code>null</code> indicates that the filter is not being used) and incorporate that into our query:</p>

<p>```csharp
ProductDTO result = null;</p>

<p>var query = session.QueryOver<Product>();</p>

<p>if (colors != null &amp;&amp; colors.Any())
{</p>

<pre><code>query.Where(pr =&gt; pr.Color.IsIn(colors.ToArray()));
</code></pre>

<p>}</p>

<p>if (minimumRating.HasValue)
{</p>

<pre><code>ProductReview reviewAlias = null;
query.JoinAlias(pr =&gt; pr.Reviews, () =&gt; reviewAlias)
    .Where(() =&gt; reviewAlias.Rating &gt;= minimumRating.Value);
</code></pre>

<p>}</p>

<p>IList<ProductDTO> products = query</p>

<pre><code>.SelectList(list =&gt; list
    .Select(pr =&gt; pr.Name).WithAlias(() =&gt; result.Name)
    .Select(pr =&gt; pr.Color).WithAlias(() =&gt; result.Color)
    .Select(pr =&gt; pr.ListPrice).WithAlias(() =&gt; result.ListPrice))
.TransformUsing(Transformers.AliasToBean&lt;ProductDTO&gt;())
.List&lt;ProductDTO&gt;();
</code></pre>

<p>```</p>

<p>This is still more readable than dynamic SQL, but it&rsquo;s starting to look hairy. If we were to add a few more filters we&rsquo;d have a mess on our hands.</p>

<h3>Refactoring into Extension Methods</h3>

<p>One way to apply our filters conditionally is to use <a href="http://msdn.microsoft.com/en-us/library/bb383977.aspx">extension methods</a>. This will allow us to retain the flow of the QueryOver query so that it&rsquo;s a little easier to read.</p>

<p>Here&rsquo;s a static class containing our extension methods:</p>

<p>```csharp
public static class ProductQueryExtensions
{</p>

<pre><code>public static IQueryOver&lt;Product, Product&gt; ApplyColorFilter(
    this IQueryOver&lt;Product, Product&gt; query,
    IEnumerable&lt;string&gt; colors)
{
    if (colors != null &amp;&amp; colors.Any())
    {
        query.Where(pr =&gt; pr.Color.IsIn(colors.ToArray()));
    }

    return query;
}

public static IQueryOver&lt;Product, Product&gt; ApplyRatingFilter(
    this IQueryOver&lt;Product, Product&gt; query,
    int? minimumRating)
{
    if (minimumRating.HasValue)
    {
        ProductReview reviewAlias = null;

        query.JoinAlias(pr =&gt; pr.Reviews, () =&gt; reviewAlias)
            .Where(() =&gt; reviewAlias.Rating &gt;= minimumRating.Value);
    }

    return query;
}
</code></pre>

<p>}
```</p>

<p>And here&rsquo;s our updated query using those extension methods:</p>

<p>```csharp
IList<ProductDTO> products = session.QueryOver<Product>()</p>

<pre><code>.ApplyColorFilter(colors)
.ApplyRatingFilter(minimumRating)
.SelectList(list =&gt; list
    .Select(pr =&gt; pr.Name).WithAlias(() =&gt; result.Name)
    .Select(pr =&gt; pr.Color).WithAlias(() =&gt; result.Color)
    .Select(pr =&gt; pr.ListPrice).WithAlias(() =&gt; result.ListPrice))
.TransformUsing(Transformers.AliasToBean&lt;ProductDTO&gt;())
.List&lt;ProductDTO&gt;();
</code></pre>

<p>return products;
```</p>

<p>This is <em>much</em> easier to read and our filtering logic is in it&rsquo;s own class. As a bonus, it&rsquo;s reusable: we can reuse those same extension methods in another area of our application if we need to.</p>

<p>There are a few problems with this approach though&mdash;so let&rsquo;s address those.</p>

<h4>The extension methods only work on an <code>IQueryOver&lt;Product, Product&gt;</code></h4>

<p>This may not seem like a problem at first, but imagine we changed our query to start at another table. Say, for example, we wanted to start at <code>ProductReview</code> and <em>join</em> to <code>Product</code> instead of <em>starting</em> at <code>Product</code>. In that case, our extension methods would be useless since we aren&rsquo;t working with an <code>IQueryOver&lt;Product, Product&gt;</code> anymore, we&rsquo;re working with an <code>IQueryOver&lt;ProductReview, Product&gt;</code>.</p>

<p>The solution to this problem is to slightly change our extension methods to take advantage of the fact that when we&rsquo;re filtering we only care about <code>TSubType</code> (see <a href="../../../../2014/03/16/queryover-series-part-2-basics/">part 2, Basics and Joining</a> if you need a refresher on <code>TRoot</code> and <code>TSubType</code>):</p>

<p>```csharp
public static class ProductQueryExtensions
{</p>

<pre><code>public static IQueryOver&lt;TRoot, Product&gt; ApplyColorFilter&lt;TRoot&gt;(
    this IQueryOver&lt;TRoot, Product&gt; query,
    IEnumerable&lt;string&gt; colors)
{
    if (colors != null &amp;&amp; colors.Any())
    {
        query.Where(pr =&gt; pr.Color.IsIn(colors.ToArray()));
    }

    return query;
}

public static IQueryOver&lt;TRoot, Product&gt; ApplyRatingFilter&lt;TRoot&gt;(
    this IQueryOver&lt;TRoot, Product&gt; query,
    int? minimumRating)
{
    if (minimumRating.HasValue)
    {
        ProductReview reviewAlias = null;

        query.JoinAlias(pr =&gt; pr.Reviews, () =&gt; reviewAlias)
            .Where(() =&gt; reviewAlias.Rating &gt;= minimumRating.Value);
    }

    return query;
}
</code></pre>

<p>}
```</p>

<p>Now our extension methods will work on any QueryOver query whose <code>TSubType</code> is <code>Product</code>.</p>

<h4>Aliases may need to be passed around</h4>

<p>This is a more subtle problem and requires some understanding of how NHibernate generates SQL from QueryOver code.</p>

<p>Remember that QueryOver is built on top of the Criteria API for querying, and is really just a strongly-typed wrapper for that API using <a href="http://msdn.microsoft.com/en-us/library/bb397951.aspx">expression trees</a>.</p>

<p>What this means for aliases is that NHibernate is using the name of the variable you&rsquo;re using as an alias&mdash;parsing the expression you pass <code>.JoinAlias</code> or <code>.JoinQueryOver</code> into a <code>string</code> that&rsquo;s used with the QueryOver query&rsquo;s underlying criteria query.</p>

<p>This is easiest to see with an example.</p>

<p>Here&rsquo;s an example QueryOver query and its underlying Criteria query, as well as the SQL that&rsquo;s ultimately generated:</p>

<p><strong>QueryOver</strong>:</p>

<p>```csharp
session.QueryOver<Product>()</p>

<pre><code>.JoinQueryOver(pr =&gt; pr.Reviews, () =&gt; reviewAlias)
.SelectList(list =&gt; list
    .SelectGroup(pr =&gt; pr.Id)
    .SelectMax(() =&gt; reviewAlias.Rating))
.List&lt;object[]&gt;();
</code></pre>

<p>```</p>

<p><strong>Criteria</strong>:</p>

<p>```csharp
session.CreateCriteria(typeof(Product))</p>

<pre><code>.CreateCriteria("Reviews", "reviewAlias")
.SetProjection(Projections.ProjectionList()
    .Add(Projections.GroupProperty("Id"))
    .Add(Projections.Max("reviewAlias.Rating")))
.List&lt;object[]&gt;();
</code></pre>

<p>```</p>

<p>These generate <em>identical</em> SQL:</p>

<p>```sql
SELECT</p>

<pre><code>this_.ProductID AS y0_, 
MAX (reviewalia1_.Rating) AS y1_ 
</code></pre>

<p>FROM</p>

<pre><code>Production.Product this_ 
INNER JOIN Production.ProductReview reviewalia1_ ON 
    this_.ProductID = reviewalia1_.ProductID 
</code></pre>

<p>GROUP BY</p>

<pre><code>this_.ProductID 
</code></pre>

<p>```</p>

<p>The main thing to notice here is that the <em>name</em> of the alias (<code>reviewAlias</code>) we used in the QueryOver query is turned into a <code>string</code> which is ultimately used in the SQL query (<code>reviewalia1_</code>).</p>

<p>What this means is that you <strong>cannot</strong> write code like this:</p>

<p>```csharp
var query = session.QueryOver<Product>()</p>

<pre><code>.JoinAlias(pr =&gt; pr.Reviews, () =&gt; reviewAlias);
</code></pre>

<p>FilterQueryByRating(query, reviewAlias);</p>

<p>query</p>

<pre><code>.SelectList(list =&gt; list
    .SelectGroup(pr =&gt; pr.Id)
    .SelectMax(() =&gt; reviewAlias.Rating))
.List&lt;object[]&gt;();
</code></pre>

<p>// Include only products with a rating > 2 <br/>
public static void FilterQueryByRating(</p>

<pre><code>IQueryOver&lt;Product, Product&gt; query, 
ProductReview reviewAlias)
</code></pre>

<p>{</p>

<pre><code>query.Where(Restrictions.Gt(Projections.Property(() =&gt; reviewAlias.Rating), 2));
</code></pre>

<p>}
```</p>

<p>Do you see the problem? If we were to rename either <code>FilterQueryByRating</code>&rsquo;s <code>reviewAlias</code> parameter <em>or</em> the <code>reviewAlias</code> that the query is using, our query would not work. In other words, this will not work:</p>

<p>```csharp
// Will explode:
public static void FilterQueryByRating(</p>

<pre><code>IQueryOver&lt;Product, Product&gt; query, 
ProductReview productReviewAlias)
</code></pre>

<p>{</p>

<pre><code>query.Where(Restrictions.Gt(
    Projections.Property(() =&gt; productReviewAlias.Rating), 2));
</code></pre>

<p>}
```</p>

<p>You&rsquo;ll get an error stating &ldquo;could not resolve property: productReviewAlias&hellip;&rdquo;. This is because the alias we&rsquo;re using in the <code>Where</code> clause does not match the one we created when we joined to <code>ProductReview</code>.</p>

<p>This may not seem like a big deal, but you really don&rsquo;t want simply renaming an alias to cause queries to blow up. This is especially true if you&rsquo;re trying to reuse query building methods and you can&rsquo;t guarantee what variable name the user of your method will choose.</p>

<p>To solve this problem, we can create a helper method that will do something similar to what NHibernate is doing under the hood for us&mdash;combine expressions and create a projection from the resulting <code>string</code>:</p>

<p>```csharp
public static PropertyProjection BuildProjection<T>(</p>

<pre><code>Expression&lt;Func&lt;object&gt;&gt; aliasExpression, 
Expression&lt;Func&lt;T, object&gt;&gt; propertyExpression)
</code></pre>

<p>{</p>

<pre><code>string alias = ExpressionProcessor.FindMemberExpression(aliasExpression.Body);
string property = ExpressionProcessor.FindMemberExpression(propertyExpression.Body);

return Projections.Property(string.Format("{0}.{1}", alias, property));
</code></pre>

<p>}
```</p>

<p>(<code>ExpressionProcessor</code> is a class under the <code>NHibernate.Impl</code> namespace)</p>

<p>We&rsquo;ll then update our filtering function to use it:</p>

<p>```csharp
public static void FilterQueryByRating(</p>

<pre><code>IQueryOver&lt;Product, Product&gt; query, 
Expression&lt;Func&lt;object&gt;&gt; productReviewAlias)
</code></pre>

<p>{</p>

<pre><code>PropertyProjection prop = BuildProjection&lt;ProductReview&gt;(
    productReviewAlias, pr =&gt; pr.Rating);

query.Where(Restrictions.Gt(prop, 2));
</code></pre>

<p>}
```</p>

<p>Finally, we need to make a small tweak to our main query:</p>

<p>```csharp
ProductReview reviewAlias = null;</p>

<p>var query = session.QueryOver<Product>()</p>

<pre><code>.JoinAlias(pr =&gt; pr.Reviews, () =&gt; reviewAlias);
</code></pre>

<p>FilterQueryByRating(query, () => reviewAlias);</p>

<p>query</p>

<pre><code>.SelectList(list =&gt; list
    .SelectGroup(pr =&gt; pr.Id)
    .SelectMax(() =&gt; reviewAlias.Rating))
.List&lt;object[]&gt;();
</code></pre>

<p>```</p>

<p>This is much more robust: our filtering method doesn&rsquo;t even know what alias the query is using, and if that alias changes or someone decides to use our method in the future, everything will work fine.</p>

<h2>Summary</h2>

<p>I covered a lot in this post, but hopefully it will help you take advantage of QueryOver&rsquo;s most powerful features&mdash;building queries dynamically.</p>

<ul>
<li>Building queries with dynamic SQL can be a pain, but using QueryOver to dynamically build queries can be much easier and more maintainable.</li>
<li>Refactoring conditional restrictions and joins into extension methods can keep queries readable and refactor logic into reusable pieces.</li>
<li>To make those extension methods as robust as possible, we can make the methods generic and therefore more flexible.</li>
<li>Passing around aliases between methods when building QueryOver queries has some pitfalls and needs some special attention.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[QueryOver Series - Part 5: Materializing Results]]></title>
    <link href="http://blog.andrewawhitaker.com/blog/2014/06/28/queryover-series-part-5-materializing-results/"/>
    <updated>2014-06-28T10:47:22-04:00</updated>
    <id>http://blog.andrewawhitaker.com/blog/2014/06/28/queryover-series-part-5-materializing-results</id>
    <content type="html"><![CDATA[<p>So far I&rsquo;ve been using the <code>.List</code> or <code>.SingleOrDefault</code> methods to actually get results from a query. In this post I&rsquo;ll go into a little more detail about those methods. I&rsquo;ll also cover other ways you can materialize a query&rsquo;s results.</p>

<!-- more -->


<h3><code>SingleOrDefault&lt;T&gt;</code> and <code>List&lt;T&gt;</code></h3>

<p>These two are pretty self-explanatory. Calling <code>.List&lt;T&gt;</code> at the end of your query will immediately yield an <code>IList&lt;T&gt;</code>. For example:</p>

<p>```csharp
IList<Employee> empl = session.QueryOver<Employee>()</p>

<pre><code>.List&lt;Employee&gt;();
</code></pre>

<p>```</p>

<p>Similarly, <code>SingleOrDefault&lt;T&gt;</code> will immediately give you a single item of type <code>T</code>, provided the query only returns one row. Otherwise, NHibernate will throw an exception telling you that the query did not return a unique result.</p>

<h3><code>Future&lt;T&gt;</code> and <code>FutureValue&lt;T&gt;</code></h3>

<p>These two are more interesting. <a href="http://ayende.com/blog/3979/nhibernate-futures">Ayende has discussed these in detail</a> with the Criteria API, but I don&rsquo;t think a blog series on QueryOver is really complete without mentioning them again. In NHibernate using these creates a &ldquo;MultiQuery&rdquo; or &ldquo;MultiCriteria&rdquo;, which just means that NHibernate is batching your queries into one round trip and deferring populating the results.</p>

<h4><code>Future&lt;T&gt;</code></h4>

<p>Calling <code>.Future&lt;T&gt;</code> on your query will return an <code>IEnumerable&lt;T&gt;</code> that will not be populated with results until one of the results or resultsets is needed. NHibernate will build up queries using <code>.Future&lt;T&gt;</code> or <code>.FutureValue&lt;T&gt;</code> until one of the &ldquo;future&rdquo; results are accessed.</p>

<p>When the results are processed, NHibernate will send one request to the database containing the SQL for all of the &ldquo;future&rdquo; queries and populate the results accordingly. For example, lets say we were trying to display all <code>Employee</code>s and all <code>Product</code>s on the same page. We could just write two separate queries:</p>

<p>```csharp
// Get the list of employees first
IList<Employee> employees = session.QueryOver<Employee>()</p>

<pre><code>.List&lt;Employee&gt;();
</code></pre>

<p>// Then the list of products
IList<Product> products = session.QueryOver<Product>()</p>

<pre><code>.List&lt;Product&gt;();
</code></pre>

<p>```</p>

<p>Which yields the following SQL:</p>

<p>```sql</p>

<pre><code>SELECT
    this_.BusinessEntityID as Business1_0_1_,
    -- More employee fields
FROM
    HumanResources.Employee this_
</code></pre>

<p><code>
... And then a second query for the `Product`s:
</code>sql</p>

<pre><code>SELECT
    this_.ProductID as ProductID7_0_
    -- More product fields
FROM
    Production.Product this_
</code></pre>

<p><code>``
This would work fine, but NHibernate is sending two separate queries to the database when we can accomplish getting those results with only one using</code>.Future<T>`:</p>

<p>```csharp
// Batch the two queries together
IEnumerable<Employee> employees = session.QueryOver<Employee>()</p>

<pre><code>.Future&lt;Employee&gt;();
</code></pre>

<p>IEnumerable<Product> products = session.QueryOver<Product>()</p>

<pre><code>.Future&lt;Product&gt;();
</code></pre>

<p>// A single round trip to the database is made here containing both queries
int numProducts = products.Count();
```</p>

<p>This generates a single database round trip with both queries when the <code>products.Count()</code> call forces NHibernate to process the <code>Product</code>s query:</p>

<p>```sql
&mdash; First query:
SELECT</p>

<pre><code>this_.BusinessEntityID as Business1_0_1_,
-- More Employee columns
</code></pre>

<p>FROM</p>

<pre><code>HumanResources.Employee this_;
</code></pre>

<p>&mdash; Second query:
SELECT</p>

<pre><code>this_.ProductID as ProductID7_0_,
-- More product columns
</code></pre>

<p>FROM</p>

<pre><code>Production.Product this_;
</code></pre>

<p>```</p>

<p>This can be hugely helpful when querying from multiple sources that don&rsquo;t depend on each other.</p>

<h4><code>FutureValue&lt;T&gt;</code></h4>

<p>The same applies for <code>.FutureValue</code>, which is a deferred version of <code>.SingleOrDefault</code>.</p>

<p>Lets say we wanted a list of all employees and the total number of products. Again, we could write two separate queries:</p>

<p>```csharp
IList<Employee> employees = session.QueryOver<Employee>()</p>

<pre><code>.List&lt;Employee&gt;();
</code></pre>

<p>int productsCount = session.QueryOver<Product>()</p>

<pre><code>.SelectList(list =&gt; list
    .SelectCount(pr =&gt; pr.Id))
.SingleOrDefault&lt;int&gt;();
</code></pre>

<p>```</p>

<p>As you&rsquo;d expect, this will create two queries and two round-trips to the database:</p>

<p>```sql
SELECT</p>

<pre><code>this_.BusinessEntityID as Business1_0_1_,
-- More Employee columns
</code></pre>

<p>FROM</p>

<pre><code>HumanResources.Employee this_
</code></pre>

<p><code>
... And then the `Product`s count query:
</code>sql</p>

<pre><code>SELECT
    count(this_.ProductID) as y0_
FROM
    Production.Product this_
</code></pre>

<p>```</p>

<p>We can turn this into one query by using <code>Future</code> and <code>FutureValue</code>:</p>

<p>```csharp
// Batch the two queries together
IEnumerable<Employee> employees = session.QueryOver<Employee>()</p>

<pre><code>.Future&lt;Employee&gt;();
</code></pre>

<p>IFutureValue<int> productsCount = session.QueryOver<Product>()</p>

<pre><code>.SelectList(list =&gt; list
    .SelectCount(pr =&gt; pr.Id))
.FutureValue&lt;int&gt;();
</code></pre>

<p>// Access the &ldquo;Value&rdquo; property of IFutureValue, which will execute both queries in one round-trip
Console.WriteLine(productsCount.Value);
```</p>

<p>Like our previous example with <code>.Future</code>, this will generate one round-trip to the database with two queries:</p>

<p>```sql
&mdash; First query:
SELECT</p>

<pre><code>this_.BusinessEntityID as Business1_0_1_,
-- More Employee Columns
</code></pre>

<p>FROM</p>

<pre><code>HumanResources.Employee this_;
</code></pre>

<p>&mdash; Second query:
SELECT</p>

<pre><code>count(this_.ProductID) as y0_
</code></pre>

<p>FROM</p>

<pre><code>Production.Product this_;
</code></pre>

<p>```</p>

<p>Note the return type of the count query. <code>IFutureValue&lt;T&gt;</code> is simply a type that allows NHibernate to give you a deferred <code>SingleOrDefault</code> result. Accessing <code>.Value</code> (just like causing the <code>IEnumerable&lt;T&gt;</code> returned by <code>.Future</code>) will cause the batched queries to execute.</p>

<p>I&rsquo;d highly recommend using <code>.Future</code> and <code>.FutureValue</code> where possible when you need to execute multiple queries at once. You&rsquo;ll save round trips to the database and therefore get results to your users faster.</p>

<h3>Summary</h3>

<p>This post covered different ways to materialize resultsets with NHibernate QueryOver.</p>

<ul>
<li><code>.SingleOrDefault</code> and <code>.List</code> immediately give you the results</li>
<li><code>.FutureValue</code> and <code>.Future</code> batch queries and defer execution until one of the results in the batch is needed</li>
<li><code>.FutureValue</code> and <code>.Future</code> use one round trip to the database instead of several, which is more efficient.</li>
</ul>

]]></content>
  </entry>
  
</feed>
