<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: nhibernate | Andrew Whitaker]]></title>
  <link href="http://blog.andrewawhitaker.com/blog/categories/nhibernate/atom.xml" rel="self"/>
  <link href="http://blog.andrewawhitaker.com/"/>
  <updated>2014-08-17T21:53:49-05:00</updated>
  <id>http://blog.andrewawhitaker.com/</id>
  <author>
    <name><![CDATA[Andrew Whitaker]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[QueryOver Series - Part 7: Using SQL Functions]]></title>
    <link href="http://blog.andrewawhitaker.com/blog/2014/08/15/queryover-series-part-7-using-sql-functions/"/>
    <updated>2014-08-15T14:46:35-05:00</updated>
    <id>http://blog.andrewawhitaker.com/blog/2014/08/15/queryover-series-part-7-using-sql-functions</id>
    <content type="html"><![CDATA[<p>In this post, I&rsquo;ll go over how to use functions built into the database engine. This can be useful when you want to do some work inside of your SQL query rather than do post-processing on the result set you get back.</p>

<!-- more -->


<h2>Dialects in NHibernate</h2>

<p>To understand how to use and later build SQL functions, it&rsquo;s helpful to understand how the default SQL functions are registered with NHibernate to begin with.</p>

<p>NHibernate has the concept of a SQL <em>dialect</em>, a vendor-specific flavor of SQL. As you probably know, <a href="http://www.nhforge.org/doc/nh/en/#configuration-optional-dialects">many dialects are supported out of the box</a>. NHibernate represents dialects with a class per supported dialect.</p>

<p>The <code>Dialect</code> base class registers required functions for a dialect using ANSI-92 standards. If a dialect implements a function differently, that dialect must overwrite the base class' implementation with its own.</p>

<p>For example, SQL Server doesn&rsquo;t implement the ANSI-92 <code>TRIM</code> function, so the <code>MsSql2000</code> dialect class uses a different implementation than the base class (which ultimately calls <code>rtrim</code> and <code>ltrim</code> to simulate the ANSI standard).</p>

<p>It&rsquo;s worth looking over the <code>Dialect</code> base class and possibly the dialect class for the database engine you&rsquo;re using to see what functions are already available to you.</p>

<h2>Calling functions from your queries</h2>

<p>There are two ways to actually use SQL functions inside of your queries.</p>

<h3>Using <code>Projections.SqlFunction</code></h3>

<p>Using already registered SQL functions is fairly simple, using <code>Projections.SqlFunction</code>. For example, here&rsquo;s a query that gets every <code>Person</code>&rsquo;s middle name, or &ldquo;Not Applicable&rdquo; if <code>MiddleName</code> is <code>null</code>, using the <code>COALESCE</code> function:</p>

<p><strong>QueryOver</strong>:
```csharp
IList<string> middleNames = session.QueryOver<Person>()</p>

<pre><code>.Select(
    Projections.SqlFunction("coalesce", NHibernateUtil.String,
        Projections.Property&lt;Person&gt;(p =&gt; p.MiddleName),
        Projections.Constant("Not Applicable"))
)
.List&lt;string&gt;();
</code></pre>

<p>```</p>

<p><strong>SQL</strong>:
```sql
SELECT</p>

<pre><code>COALESCE (this_.MiddleName, 'Not Applicable') AS y0_ 
</code></pre>

<p>FROM</p>

<pre><code>Person.Person this_ 
</code></pre>

<p>```</p>

<p>This same pattern applies to all SQL functions that you&rsquo;d like to call using <code>Projections.SqlFunction</code>.</p>

<h3>Using <code>ProjectionsExtensions</code></h3>

<p>Inside of a QueryOver query, there&rsquo;s actually a better way to call many of the most common SQL functions. The <code>ProjectionsExtensions</code> class inside of the <code>NHibernate.Criterion</code> namespace contains extension methods that are parsed into SQL function calls.</p>

<p>For example, here&rsquo;s a query using the <code>.Upper</code> extension method. Note that these extension methods are actually on the object&rsquo;s properties:</p>

<p><strong>QueryOver</strong>:
```csharp
IList<string> middleNames = session.QueryOver<Person>()</p>

<pre><code>.Select(p =&gt; p.FirstName.Upper())
.List&lt;string&gt;();
</code></pre>

<p>```</p>

<p><strong>SQL</strong>:
```sql
SELECT</p>

<pre><code>UPPER (this_.FirstName) AS y0_ 
</code></pre>

<p>FROM</p>

<pre><code>Person.Person this_ 
</code></pre>

<p>```</p>

<p>This is much cleaner than the alternative using <code>Projections.SqlFunction</code>:</p>

<p>```csharp
IList<string> names = session.QueryOver<Person>()</p>

<pre><code>.Select(
    Projections.SqlFunction(
        "upper",
        NHibernateUtil.String,
        Projections.Property&lt;Person&gt;(p =&gt; p.FirstName)))
.List&lt;string&gt;();
</code></pre>

<p>```</p>

<h2>Using your own functions</h2>

<p>In most cases, functions you want to use will already be registered in the dialect you&rsquo;re using. In some cases, however, you&rsquo;ll want to add a function that&rsquo;s not been registered. In this section of the post, I&rsquo;ll go over how to add the <code>checksum</code> function in SQL Server. There are a few steps involved in using your own function, I&rsquo;ll go over each one in detail.</p>

<p>There are actually two ways to invoke a custom SQL function from your queries. You can either add the function &ldquo;statically&rdquo; to a custom dialect, or invoke a brand new function &ldquo;dynamically&rdquo; at runtime that&rsquo;s not registered with the dialect.</p>

<h3>Adding your own dialect</h3>

<p>As I discussed earlier, functions are registered in the dialect class representing the database flavor you&rsquo;re using. Since we can&rsquo;t modify those classes directly to register our function, we&rsquo;ll create a new dialect that&rsquo;s a subclass of the one we&rsquo;re using.</p>

<p>Since I&rsquo;m using SQL Server in this example, I&rsquo;ll create a custom dialect that&rsquo;s a subclass of <code>MsSql2012Dialect</code>.</p>

<p>```csharp
using NHibernate;
using NHibernate.Dialect;
using NHibernate.Dialect.Function;</p>

<p>public class AdventureWorksDialect : MsSql2012Dialect
{</p>

<pre><code>public AdventureWorksDialect()
{
    this.RegisterFunction("checksum", new StandardSQLFunction("checksum", NHibernateUtil.Int32));
}
</code></pre>

<p>}
```</p>

<p>Then, we need to make sure our application is using the new dialect. We can do this either in our configuration code:</p>

<p>```csharp
var cfg = new Configuration()</p>

<pre><code>.Configure()
.DataBaseIntegration(db =&gt;
{
    db.Dialect&lt;AdventureWorksDialect&gt;();
});
</code></pre>

<p>```</p>

<p>Or, in our config file:</p>

<p>```xml
&lt;hibernate-configuration xmlns=&ldquo;urn:nhibernate-configuration-2.2&rdquo;>
  &lt;session-factory></p>

<pre><code>&lt;property name="show_sql"&gt;false&lt;/property&gt;
&lt;property name="connection.driver_class"&gt;NHibernate.Driver.Sql2008ClientDriver&lt;/property&gt;
&lt;property name="dialect"&gt;AdventureWorks.Database.AdventureWorksDialect&lt;/property&gt;
&lt;property name="connection.connection_string_name"&gt;AdventureWorks&lt;/property&gt;
</code></pre>

<p>  &lt;/session-factory>
&lt;/hibernate-configuration>
```</p>

<h4>Calling the function using <code>Projections.SqlFunction</code></h4>

<p>If all you want to do is call a function using <code>Projections.SqlFunction</code>, you&rsquo;re basically done. All you need to do is call the function:</p>

<p>```csharp
IList<int> checksums = session.QueryOver<Product>()</p>

<pre><code>.Select(Projections.SqlFunction(
    "checksum",
    NHibernateUtil.Int32,
    Projections.Property&lt;Product&gt;(p =&gt; p.Id),
    Projections.Property&lt;Product&gt;(p =&gt; p.Name)))
.List&lt;int&gt;();
</code></pre>

<p>```</p>

<p>This will yield the following SQL:</p>

<p>```sql
SELECT</p>

<pre><code>CHECKSUM (this_.ProductID, this_.Name) AS y0_ 
</code></pre>

<p>FROM</p>

<pre><code>Production.Product this_ 
</code></pre>

<p>```</p>

<h4>Creating a custom projections class</h4>

<p>Using <code>Projections.SqlFunction</code> isn&rsquo;t quite satisfactory, especially after seeing the built-in <code>ProjectionExtensions</code>. We can easily create a <code>CustomProjections</code> class that provides some syntactic sugar for calling our custom function:</p>

<p>```csharp
public static class CustomProjections
{</p>

<pre><code>public static IProjection Checksum(params Expression&lt;Func&lt;object&gt;&gt;[] properties)
{
    return Checksum(properties.Select(Projections.Property).ToArray());
}

public static IProjection Checksum(params IProjection[] projections)
{
    return Projections.SqlFunction("checksum", NHibernateUtil.Int32, projections);
}
</code></pre>

<p>}
```</p>

<p>Notice that we have two overloads of <code>Checksum</code>, one that takes an array of <code>Expression&lt;Func&lt;object&gt;&gt;</code>s and another that takes an array of <code>IProjection</code>s.</p>

<p>Using the <code>Expression&lt;Func&lt;object&gt;&gt;[]</code> overload is convenient when we don&rsquo;t need to combine the use of <code>checksum</code> with other functions, for example:</p>

<p>```csharp
IList<int> checksums = session.QueryOver<Product>(() => productAlias)</p>

<pre><code>.Select(CustomProjections.Checksum(
    () =&gt; productAlias.Name,
    () =&gt; productAlias.Id))
.List&lt;int&gt;();
</code></pre>

<p>```</p>

<p>Using the <code>IProjection[]</code> overload is useful when we need to supply <code>checksum</code> with the result of calling <em>another</em> function, say <code>avg</code>:</p>

<p><code>``csharp
// Get the</code>checksum` of the average price for each sell start date.
IList&lt;object[]> checksums = session.QueryOver<Product>(() => productAlias)</p>

<pre><code>.SelectList(list =&gt; list
    .SelectGroup(p =&gt; p.SellStartDate)
    .Select(
        CustomProjections.Checksum(
            Projections.Avg(
                Projections.Property(() =&gt; productAlias.ListPrice)))
    ))
.List&lt;object[]&gt;();
</code></pre>

<p>```</p>

<h4><code>StandardSQLFunction</code> and <code>SQLFunctionTemplate</code></h4>

<p>If you look through <a href="https://github.com/nhibernate/nhibernate-core/tree/master/src/NHibernate/Dialect/Function">NHibernate&rsquo;s implementations of various SQL functions</a>, you might notice that many use <code>StandardSQLFunction</code> and <code>SQLFunctionTemplate</code>. These should take care of most of your custom function needs. If not, you can always implement <code>ISQLFunction</code> and create your own implementation.</p>

<h5><code>StandardSQLFunction</code></h5>

<p>We used <code>StandardSQLFunction</code> to implement our <code>checksum</code> example. Basically, <code>StandardSQLFunction</code> allows you to implement a SQL function that takes an arbitrary number of arguments and returns a scalar value.</p>

<h5><code>SQLFunctionTemplate</code></h5>

<p><code>SQLFunctionTemplate</code> is a bit more sophisticated, and you can use it to implement SQL functions with a <em>template</em>, like the name implies. This is typically useful when you want to require a function to have a specific number of arguments.</p>

<p>An example of this would be the <code>stuff</code> <a href="http://msdn.microsoft.com/en-us/library/ms188043.aspx">function in SQL Server</a>. This function inserts one string into another string, deleting the specified number of characters from the first string at a start index, then inserts the second string.</p>

<p>For example, here&rsquo;s how you could use <code>stuff</code> to replace &ldquo;C++&rdquo; with &ldquo;C#&rdquo;:</p>

<p><code>csharp
select stuff('C++', 2, 2, '#')
</code></p>

<p>Since <code>stuff</code> has a fixed number of parameters, it&rsquo;s a good candidate for <code>SQLFunctionTemplate</code>. All we have to do to register it in our dialect is add the following line:</p>

<p><code>csharp
this.RegisterFunction("stuff", new SQLFunctionTemplate(NHibernateUtil.Int32, "stuff(?1, ?2, ?3, ?4)"));
</code></p>

<p>Here, we&rsquo;re basically just saying that <code>stuff</code> is a function whose syntax is invoking the <code>stuff</code> function with exactly four parameters.</p>

<p>We&rsquo;ll add a few more static methods to our <code>CustomProjections</code> class, since there are several ways we might want to call this function, we&rsquo;ll provide several overloads:</p>

<p>```csharp
// Usage: CustomProjections.Stuff(() => alias.Property, 1, 2, () => alias.OtherProperty)
public static IProjection Stuff(Expression&lt;Func<object>> characterExpression, int start, int length, Expression&lt;Func<object>> replaceWithExpression)
{</p>

<pre><code>return Stuff(Projections.Property(characterExpression), start, length, Projections.Property(replaceWithExpression));
</code></pre>

<p>}</p>

<p>// Usage: CustomProjections.Stuff(Projections.Property(..), 1, 2, Projections.Constant(&hellip;))
public static IProjection Stuff(IProjection characterExpression, int start, int length, IProjection replaceWithExpression)
{</p>

<pre><code>return Projections.SqlFunction("stuff", NHibernateUtil.String, characterExpression, Projections.Constant(start), Projections.Constant(length), replaceWithExpression);
</code></pre>

<p>}</p>

<p>// Usage: CustomProjections.Stuff(() => alias.Property, 1, 2, &ldquo;Replacement&rdquo;)
public static IProjection Stuff(Expression&lt;Func<object>> characterExpression, int start, int length, string replaceWithExpression)
{</p>

<pre><code>return Stuff(Projections.Property(characterExpression), start, length, Projections.Constant(replaceWithExpression));
</code></pre>

<p>}
```</p>

<p>Here&rsquo;s an example of how it would be used:</p>

<p>```csharp
IList<string> stuffResults = session.QueryOver<Product>(() => productAlias)</p>

<pre><code>.SelectList(list =&gt; list
    .Select(
        CustomProjections.Stuff(() =&gt; productAlias.Name, 0, 2, "PR")
    ))
.List&lt;string&gt;();
</code></pre>

<p>```</p>

<h3>Invoking new functions at runtime</h3>

<p>If, for some reason, you don&rsquo;t want to create a custom dialect and register functions there, you can still invoke an unregistered SQL function. There&rsquo;s an overload of <code>Projections.SqlFunction</code> that takes an <code>ISQLFunction</code> that you can define at runtime. For example, if we had not registered our <code>checksum</code> function, you could call it dynamically like this:</p>

<p>```csharp
Projections.SqlFunction(</p>

<pre><code>new StandardSQLFunction("checksum"),
NHibernateUtil.Int32,
Projections.Property(() =&gt; productAlias.Name),
Projections.Property(() =&gt; productAlias.Id)
</code></pre>

<p>```</p>

<p>Here, we&rsquo;re defining and using the <code>checksum</code> function in one shot.</p>

<p>There <em>is</em> a disadvantage to using this method. When you register a function with the dialect instead, NHibernate adds the function to an internal cache and reuses the function definition whenever you access it by name.</p>

<p>Creating a new <code>checksum</code> function every time we needed to call the SQL Server <code>checksum</code> function would be wasteful&mdash;it would be better to define the function once and have NHibernate cache and reuse it.</p>

<p>However, we may want to leverage invoking a function dynamically to take care of special SQL functions, like SQL Server&rsquo;s <code>datediff</code> function.</p>

<h4>Implementing SQL Server&rsquo;s <code>datediff</code> function.</h4>

<p>SQL Server has a <a href="http://msdn.microsoft.com/en-us/library/ms189794%28SQL.90%29.aspx">function</a> called <code>datediff</code> that returns the number of &ldquo;date parts&rdquo; between a given start and end date.</p>

<p>At first glance, it seems like we could register <code>datediff</code> using <code>SQLFunctionTemplate</code>:</p>

<p><code>csharp
new SQLFunctionTemplate("datediff(?1, ?2, ?3)")
</code></p>

<p>The problem here is that <code>datediff</code>&rsquo;s first parameter is a SQL server keyword and <em>cannot</em> be supplied as a variable. According to MSDN:</p>

<blockquote><p>These dateparts and abbreviations cannot be supplied as a user-declared variable.</p></blockquote>

<p>So that means we can&rsquo;t call <code>datediff</code> and supply the <code>datepart</code> dynamically. We could register a function for every possible version of <code>datediff</code> and name them all slightly differently:</p>

<p><code>csharp
RegisterFunction("datediff-yr", new SQLFunctionTemplate("datediff(yy, ?1, ?2)"));
RegisterFunction("datediff-dd", new SQLFunctionTemplate("datediff(dd, ?1, ?2)"));
/* etc, for each valid datepart */
</code></p>

<p>I&rsquo;m not sure about you but this makes me cringe. Luckily there&rsquo;s a better solution. We can use NHibernate&rsquo;s ability to run an arbitrary, unregistered SQL function to dynamically create and execute the various versions of <code>datediff</code>. Here&rsquo;s the code:</p>

<p>```csharp
public static class DateProjections
{</p>

<pre><code>private const string DateDiffFormat = "datediff({0}, ?1, ?2)";

public static IProjection DateDiff(
    string datepart, 
    Expression&lt;Func&lt;object&gt;&gt; startDate, 
    Expression&lt;Func&lt;object&gt;&gt; endDate)
{
    // Build the function template based on the date part.
    string functionTemplate = string.Format(DateDiffFormat, datepart);

    return Projections.SqlFunction(
        new SQLFunctionTemplate(NHibernateUtil.Int32, functionTemplate),
        NHibernateUtil.Int32,
        Projections.Property(startDate),
        Projections.Property(endDate));
}
</code></pre>

<p>}
```</p>

<p>Now, we&rsquo;re able to write queries using any date part we want without having to register a separate function for each date part. For example, here&rsquo;s a query that gets the <code>datediff</code> in days, quarters, and months:</p>

<p>```csharp
IList&lt;object[]> checksums = session.QueryOver<Product>(() => productAlias)</p>

<pre><code>.SelectList(list =&gt; list
    .Select(DateProjections.DateDiff("dd", () =&gt; productAlias.SellStartDate, () =&gt; productAlias.SellEndDate))
    .Select(DateProjections.DateDiff("qq", () =&gt; productAlias.SellStartDate, () =&gt; productAlias.SellEndDate))
    .Select(DateProjections.DateDiff("mm", () =&gt; productAlias.SellStartDate, () =&gt; productAlias.SellEndDate)))
.List&lt;object[]&gt;();
</code></pre>

<p>```</p>

<p>This still isn&rsquo;t perfect. You might have realized that we&rsquo;re still at a disadvantage since we&rsquo;re not using cached versions of our function definitions. One good solution to this is to use our own cache for the various <code>datediff</code> flavors. Here&rsquo;s what our class looks like with that modification:</p>

<p>```csharp
public static class DateProjections
{</p>

<pre><code>private const string DateDiffFormat = "datediff({0}, ?1, ?2)";

// Maps datepart to an ISQLFunction
private static Dictionary&lt;string, ISQLFunction&gt; DateDiffFunctionCache = 
    new Dictionary&lt;string, ISQLFunction&gt;();

public static IProjection DateDiff(
    string datepart, 
    Expression&lt;Func&lt;object&gt;&gt; startDate, 
    Expression&lt;Func&lt;object&gt;&gt; endDate)
{
    ISQLFunction sqlFunction = GetDateDiffFunction(datepart);

    return Projections.SqlFunction(
        sqlFunction,
        NHibernateUtil.Int32,
        Projections.Property(startDate),
        Projections.Property(endDate));
}

private static ISQLFunction GetDateDiffFunction(string datepart)
{
    ISQLFunction sqlFunction;

    if (!DateDiffFunctionCache.TryGetValue(datepart, out sqlFunction))
    {
        string functionTemplate = string.Format(DateDiffFormat, datepart);
        sqlFunction = new SQLFunctionTemplate(NHibernateUtil.Int32, functionTemplate);

        DateDiffFunctionCache[datepart] = sqlFunction;
    }

    return sqlFunction;
}
</code></pre>

<p>}
```</p>

<p>Now we&rsquo;re caching our function definitions so that we&rsquo;re not redefining versions of <code>datediff</code> unnecessarily.</p>

<p>Another enhancement that probably should be made is to make the <code>datepart</code> argument of <code>DateProjections.DateDiff</code> strongly typed. A good solution there would be to use an <code>enum</code> defining the possible <code>datepart</code> values. Then you could use a <code>Dictionary&lt;DatePart, string&gt;</code> to map from <code>enum</code> values to strings.</p>

<h2>Summary</h2>

<p>Calling built-in SQL functions from NHibernate queries has been written about many times before, but hopefully I was able to shed some light on how those functions are registered and invoked. In summary:</p>

<ul>
<li>You can either register a function by using a custom dialect and invoke it by name later, or define and invoke the function in one step.</li>
<li>Registering a function with a custom dialect is often the best option since the function definition is cached and reused automatically by NHibernate.</li>
<li><code>StandardSQLFunction</code> and <code>SQLFunctionTemplate</code> are implementations of <code>ISQLFunction</code> that enable easily defining SQL functions.</li>
<li>Using a custom projections class is a useful abstraction to lay on top of <code>Projections.SqlFunction</code> to make code easier to read and more robust.</li>
<li>You can use NHibernate&rsquo;s ability to call SQL functions at runtime to implement the <code>datediff</code> function in a clean way.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[QueryOver Series - Part 6: Query Building Techniques]]></title>
    <link href="http://blog.andrewawhitaker.com/blog/2014/08/07/queryover-series-part-6-query-building-techniques/"/>
    <updated>2014-08-07T16:05:37-05:00</updated>
    <id>http://blog.andrewawhitaker.com/blog/2014/08/07/queryover-series-part-6-query-building-techniques</id>
    <content type="html"><![CDATA[<p>In this post, I&rsquo;m going to explain some more advanced techniques for building queries with QueryOver. Practically, this means adding joins and where clauses dynamically. This is actually one of the most powerful abilities of QueryOver so it&rsquo;s worth understanding.</p>

<!-- more -->


<p>To make this easier to explain, I&rsquo;m going to use a simple example that I can build on throughout the post.</p>

<h2>The Problem</h2>

<p>Imagine your company is building a page that lists all of the company&rsquo;s available products. On the left hand side, there are a few different filters the user can use to narrow his or her search.</p>

<p>You&rsquo;re immediately faced with a problem: How do I conditionally add where clauses and joins depending on the user&rsquo;s filters? If you&rsquo;re using a pure SQL solution, you would most likely need to build up dynamic SQL and then execute that. This will work fine, but you&rsquo;re immediately faced with a few other problems:</p>

<ul>
<li><strong>You&rsquo;re more open to SQL injection</strong>. Instead of using a parameterized query, a programmer could modify your query to concatenate user-inputted data into the query.</li>
<li><strong>You have a big maintainability problem</strong>. You&rsquo;re going to have to deal with giant strings of SQL. This isn&rsquo;t fun to read or modify.</li>
</ul>


<p>Both of these problems apply whether you&rsquo;re building the SQL in a stored procedure or if you&rsquo;re building SQL outside of the database engine (say, in your application layer).</p>

<h2>Solutions with QueryOver</h2>

<p>Using QueryOver to dynamically build queries is an attractive solution because it solves both problems:</p>

<ul>
<li>NHibernate is building the SQL behind the scenes using parameterized queries, so we don&rsquo;t have to worry about SQL injection.</li>
<li>Instead of looking at huge amounts of string concatenation, we&rsquo;re looking at more expressive .NET code. As a bonus, this is compiled with our application making it much more maintainable.</li>
</ul>


<p>Lets take a look at how we can dynamically construct queries with QueryOver. Keeping with our example, we&rsquo;ll start with a base query that retrieves information about all products:</p>

<p>Here&rsquo;s the DTO we&rsquo;re projecting to with our queries:</p>

<p>```csharp
public class ProductDTO
{</p>

<pre><code>public string Name { get; set; }

public string Color { get; set; }

public decimal ListPrice { get; set; }
</code></pre>

<p>}
```</p>

<p>And here&rsquo;s the basic query we&rsquo;ll be building on:</p>

<p>```csharp
IList<ProductDTO> products = session.QueryOver<Product>()</p>

<pre><code>.SelectList(list =&gt; list
    .Select(pr =&gt; pr.Name).WithAlias(() =&gt; result.Name)
    .Select(pr =&gt; pr.Color).WithAlias(() =&gt; result.Color)
    .Select(pr =&gt; pr.ListPrice).WithAlias(() =&gt; result.ListPrice))
.TransformUsing(Transformers.AliasToBean&lt;ProductDTO&gt;())
.List&lt;ProductDTO&gt;();
</code></pre>

<p>```</p>

<h3>Conditional Restrictions</h3>

<p>Continuing with our example, imagine we have a &ldquo;Color&rdquo; filter where the user can look for products only matching the colors they specify. Since <code>Product.Color</code> is a <code>string</code>, we&rsquo;ll introduce an <code>IEnumerable&lt;string&gt;</code> containing user-specified colors.</p>

<p>Adding this to our query gives us the following:</p>

<p>```csharp
ProductDTO result = null;</p>

<p>var query = session.QueryOver<Product>();</p>

<p>if (colors != null &amp;&amp; colors.Any())
{</p>

<pre><code>query.Where(pr =&gt; pr.Color.IsIn(colors.ToArray()));
</code></pre>

<p>}</p>

<p>IList<ProductDTO> products = query</p>

<pre><code>.SelectList(list =&gt; list
    .Select(pr =&gt; pr.Name).WithAlias(() =&gt; result.Name)
    .Select(pr =&gt; pr.Color).WithAlias(() =&gt; result.Color)
    .Select(pr =&gt; pr.ListPrice).WithAlias(() =&gt; result.ListPrice))
.TransformUsing(Transformers.AliasToBean&lt;ProductDTO&gt;())
.List&lt;ProductDTO&gt;();
</code></pre>

<p>```</p>

<p>Our query has gotten a little more complicated, but it&rsquo;s still readable. Later on in the post, I&rsquo;ll show one way you can make this a bit more readable.</p>

<h3>Conditional Joins</h3>

<p>Sometimes you&rsquo;ll need to conditionally perform a join. One reason for this would be that a query <em>without</em> the join performs much better and you don&rsquo;t want to join unless you have to.</p>

<p>Lets add another filter to our example. Each <code>Product</code> in our domain has 0 to many <code>ProductReview</code>s. Let&rsquo;s add a filter that allows the user to find only products with a minimum user rating. For example, this would let a user find only products that have at least one rating of 3 stars or higher.</p>

<p>We&rsquo;ll add a <code>minimumRating</code> (a <code>Nullable&lt;int&gt;</code> where <code>null</code> indicates that the filter is not being used) and incorporate that into our query:</p>

<p>```csharp
ProductDTO result = null;</p>

<p>var query = session.QueryOver<Product>();</p>

<p>if (colors != null &amp;&amp; colors.Any())
{</p>

<pre><code>query.Where(pr =&gt; pr.Color.IsIn(colors.ToArray()));
</code></pre>

<p>}</p>

<p>if (minimumRating.HasValue)
{</p>

<pre><code>ProductReview reviewAlias = null;
query.JoinAlias(pr =&gt; pr.Reviews, () =&gt; reviewAlias)
    .Where(() =&gt; reviewAlias.Rating &gt;= minimumRating.Value);
</code></pre>

<p>}</p>

<p>IList<ProductDTO> products = query</p>

<pre><code>.SelectList(list =&gt; list
    .Select(pr =&gt; pr.Name).WithAlias(() =&gt; result.Name)
    .Select(pr =&gt; pr.Color).WithAlias(() =&gt; result.Color)
    .Select(pr =&gt; pr.ListPrice).WithAlias(() =&gt; result.ListPrice))
.TransformUsing(Transformers.AliasToBean&lt;ProductDTO&gt;())
.List&lt;ProductDTO&gt;();
</code></pre>

<p>```</p>

<p>This is still more readable than dynamic SQL, but it&rsquo;s starting to look hairy. If we were to add a few more filters we&rsquo;d have a mess on our hands.</p>

<h3>Refactoring into Extension Methods</h3>

<p>One way to apply our filters conditionally is to use <a href="http://msdn.microsoft.com/en-us/library/bb383977.aspx">extension methods</a>. This will allow us to retain the flow of the QueryOver query so that it&rsquo;s a little easier to read.</p>

<p>Here&rsquo;s a static class containing our extension methods:</p>

<p>```csharp
public static class ProductQueryExtensions
{</p>

<pre><code>public static IQueryOver&lt;Product, Product&gt; ApplyColorFilter(
    this IQueryOver&lt;Product, Product&gt; query,
    IEnumerable&lt;string&gt; colors)
{
    if (colors != null &amp;&amp; colors.Any())
    {
        query.Where(pr =&gt; pr.Color.IsIn(colors.ToArray()));
    }

    return query;
}

public static IQueryOver&lt;Product, Product&gt; ApplyRatingFilter(
    this IQueryOver&lt;Product, Product&gt; query,
    int? minimumRating)
{
    if (minimumRating.HasValue)
    {
        ProductReview reviewAlias = null;

        query.JoinAlias(pr =&gt; pr.Reviews, () =&gt; reviewAlias)
            .Where(() =&gt; reviewAlias.Rating &gt;= minimumRating.Value);
    }

    return query;
}
</code></pre>

<p>}
```</p>

<p>And here&rsquo;s our updated query using those extension methods:</p>

<p>```csharp
IList<ProductDTO> products = session.QueryOver<Product>()</p>

<pre><code>.ApplyColorFilter(colors)
.ApplyRatingFilter(minimumRating)
.SelectList(list =&gt; list
    .Select(pr =&gt; pr.Name).WithAlias(() =&gt; result.Name)
    .Select(pr =&gt; pr.Color).WithAlias(() =&gt; result.Color)
    .Select(pr =&gt; pr.ListPrice).WithAlias(() =&gt; result.ListPrice))
.TransformUsing(Transformers.AliasToBean&lt;ProductDTO&gt;())
.List&lt;ProductDTO&gt;();
</code></pre>

<p>return products;
```</p>

<p>This is <em>much</em> easier to read and our filtering logic is in it&rsquo;s own class. As a bonus, it&rsquo;s reusable: we can reuse those same extension methods in another area of our application if we need to.</p>

<p>There are a few problems with this approach though&mdash;so let&rsquo;s address those.</p>

<h4>The extension methods only work on an <code>IQueryOver&lt;Product, Product&gt;</code></h4>

<p>This may not seem like a problem at first, but imagine we changed our query to start at another table. Say, for example, we wanted to start at <code>ProductReview</code> and <em>join</em> to <code>Product</code> instead of <em>starting</em> at <code>Product</code>. In that case, our extension methods would be useless since we aren&rsquo;t working with an <code>IQueryOver&lt;Product, Product&gt;</code> anymore, we&rsquo;re working with an <code>IQueryOver&lt;ProductReview, Product&gt;</code>.</p>

<p>The solution to this problem is to slightly change our extension methods to take advantage of the fact that when we&rsquo;re filtering we only care about <code>TSubType</code> (see <a href="../../../../2014/03/16/queryover-series-part-2-basics/">part 2, Basics and Joining</a> if you need a refresher on <code>TRoot</code> and <code>TSubType</code>):</p>

<p>```csharp
public static class ProductQueryExtensions
{</p>

<pre><code>public static IQueryOver&lt;TRoot, Product&gt; ApplyColorFilter&lt;TRoot&gt;(
    this IQueryOver&lt;TRoot, Product&gt; query,
    IEnumerable&lt;string&gt; colors)
{
    if (colors != null &amp;&amp; colors.Any())
    {
        query.Where(pr =&gt; pr.Color.IsIn(colors.ToArray()));
    }

    return query;
}

public static IQueryOver&lt;TRoot, Product&gt; ApplyRatingFilter&lt;TRoot&gt;(
    this IQueryOver&lt;TRoot, Product&gt; query,
    int? minimumRating)
{
    if (minimumRating.HasValue)
    {
        ProductReview reviewAlias = null;

        query.JoinAlias(pr =&gt; pr.Reviews, () =&gt; reviewAlias)
            .Where(() =&gt; reviewAlias.Rating &gt;= minimumRating.Value);
    }

    return query;
}
</code></pre>

<p>}
```</p>

<p>Now our extension methods will work on any QueryOver query whose <code>TSubType</code> is <code>Product</code>.</p>

<h4>Aliases may need to be passed around</h4>

<p>This is a more subtle problem and requires some understanding of how NHibernate generates SQL from QueryOver code.</p>

<p>Remember that QueryOver is built on top of the Criteria API for querying, and is really just a strongly-typed wrapper for that API using <a href="http://msdn.microsoft.com/en-us/library/bb397951.aspx">expression trees</a>.</p>

<p>What this means for aliases is that NHibernate is using the name of the variable you&rsquo;re using as an alias&mdash;parsing the expression you pass <code>.JoinAlias</code> or <code>.JoinQueryOver</code> into a <code>string</code> that&rsquo;s used with the QueryOver query&rsquo;s underlying criteria query.</p>

<p>This is easiest to see with an example.</p>

<p>Here&rsquo;s an example QueryOver query and its underlying Criteria query, as well as the SQL that&rsquo;s ultimately generated:</p>

<p><strong>QueryOver</strong>:</p>

<p>```csharp
session.QueryOver<Product>()</p>

<pre><code>.JoinQueryOver(pr =&gt; pr.Reviews, () =&gt; reviewAlias)
.SelectList(list =&gt; list
    .SelectGroup(pr =&gt; pr.Id)
    .SelectMax(() =&gt; reviewAlias.Rating))
.List&lt;object[]&gt;();
</code></pre>

<p>```</p>

<p><strong>Criteria</strong>:</p>

<p>```csharp
session.CreateCriteria(typeof(Product))</p>

<pre><code>.CreateCriteria("Reviews", "reviewAlias")
.SetProjection(Projections.ProjectionList()
    .Add(Projections.GroupProperty("Id"))
    .Add(Projections.Max("reviewAlias.Rating")))
.List&lt;object[]&gt;();
</code></pre>

<p>```</p>

<p>These generate <em>identical</em> SQL:</p>

<p>```sql
SELECT</p>

<pre><code>this_.ProductID AS y0_, 
MAX (reviewalia1_.Rating) AS y1_ 
</code></pre>

<p>FROM</p>

<pre><code>Production.Product this_ 
INNER JOIN Production.ProductReview reviewalia1_ ON 
    this_.ProductID = reviewalia1_.ProductID 
</code></pre>

<p>GROUP BY</p>

<pre><code>this_.ProductID 
</code></pre>

<p>```</p>

<p>The main thing to notice here is that the <em>name</em> of the alias (<code>reviewAlias</code>) we used in the QueryOver query is turned into a <code>string</code> which is ultimately used in the SQL query (<code>reviewalia1_</code>).</p>

<p>What this means is that you <strong>cannot</strong> write code like this:</p>

<p>```csharp
var query = session.QueryOver<Product>()</p>

<pre><code>.JoinAlias(pr =&gt; pr.Reviews, () =&gt; reviewAlias);
</code></pre>

<p>FilterQueryByRating(query, reviewAlias);</p>

<p>query</p>

<pre><code>.SelectList(list =&gt; list
    .SelectGroup(pr =&gt; pr.Id)
    .SelectMax(() =&gt; reviewAlias.Rating))
.List&lt;object[]&gt;();
</code></pre>

<p>// Include only products with a rating > 2 <br/>
public static void FilterQueryByRating(</p>

<pre><code>IQueryOver&lt;Product, Product&gt; query, 
ProductReview reviewAlias)
</code></pre>

<p>{</p>

<pre><code>query.Where(Restrictions.Gt(Projections.Property(() =&gt; reviewAlias.Rating), 2));
</code></pre>

<p>}
```</p>

<p>Do you see the problem? If we were to rename either <code>FilterQueryByRating</code>&rsquo;s <code>reviewAlias</code> parameter <em>or</em> the <code>reviewAlias</code> that the query is using, our query would not work. In other words, this will not work:</p>

<p>```csharp
// Will explode:
public static void FilterQueryByRating(</p>

<pre><code>IQueryOver&lt;Product, Product&gt; query, 
ProductReview productReviewAlias)
</code></pre>

<p>{</p>

<pre><code>query.Where(Restrictions.Gt(
    Projections.Property(() =&gt; productReviewAlias.Rating), 2));
</code></pre>

<p>}
```</p>

<p>You&rsquo;ll get an error stating &ldquo;could not resolve property: productReviewAlias&hellip;&rdquo;. This is because the alias we&rsquo;re using in the <code>Where</code> clause does not match the one we created when we joined to <code>ProductReview</code>.</p>

<p>This may not seem like a big deal, but you really don&rsquo;t want simply renaming an alias to cause queries to blow up. This is especially true if you&rsquo;re trying to reuse query building methods and you can&rsquo;t guarantee what variable name the user of your method will choose.</p>

<p>To solve this problem, we can create a helper method that will do something similar to what NHibernate is doing under the hood for us&mdash;combine expressions and create a projection from the resulting <code>string</code>:</p>

<p>```csharp
public static PropertyProjection BuildProjection<T>(</p>

<pre><code>Expression&lt;Func&lt;object&gt;&gt; aliasExpression, 
Expression&lt;Func&lt;T, object&gt;&gt; propertyExpression)
</code></pre>

<p>{</p>

<pre><code>string alias = ExpressionProcessor.FindMemberExpression(aliasExpression.Body);
string property = ExpressionProcessor.FindMemberExpression(propertyExpression.Body);

return Projections.Property(string.Format("{0}.{1}", alias, property));
</code></pre>

<p>}
```</p>

<p>(<code>ExpressionProcessor</code> is a class under the <code>NHibernate.Impl</code> namespace)</p>

<p>We&rsquo;ll then update our filtering function to use it:</p>

<p>```csharp
public static void FilterQueryByRating(</p>

<pre><code>IQueryOver&lt;Product, Product&gt; query, 
Expression&lt;Func&lt;object&gt;&gt; productReviewAlias)
</code></pre>

<p>{</p>

<pre><code>PropertyProjection prop = BuildProjection&lt;ProductReview&gt;(
    productReviewAlias, pr =&gt; pr.Rating);

query.Where(Restrictions.Gt(prop, 2));
</code></pre>

<p>}
```</p>

<p>Finally, we need to make a small tweak to our main query:</p>

<p>```csharp
ProductReview reviewAlias = null;</p>

<p>var query = session.QueryOver<Product>()</p>

<pre><code>.JoinAlias(pr =&gt; pr.Reviews, () =&gt; reviewAlias);
</code></pre>

<p>FilterQueryByRating(query, () => reviewAlias);</p>

<p>query</p>

<pre><code>.SelectList(list =&gt; list
    .SelectGroup(pr =&gt; pr.Id)
    .SelectMax(() =&gt; reviewAlias.Rating))
.List&lt;object[]&gt;();
</code></pre>

<p>```</p>

<p>This is much more robust: our filtering method doesn&rsquo;t even know what alias the query is using, and if that alias changes or someone decides to use our method in the future, everything will work fine.</p>

<h2>Summary</h2>

<p>I covered a lot in this post, but hopefully it will help you take advantage of QueryOver&rsquo;s most powerful features&mdash;building queries dynamically.</p>

<ul>
<li>Building queries with dynamic SQL can be a pain, but using QueryOver to dynamically build queries can be much easier and more maintainable.</li>
<li>Refactoring conditional restrictions and joins into extension methods can keep queries readable and refactor logic into reusable pieces.</li>
<li>To make those extension methods as robust as possible, we can make the methods generic and therefore more flexible.</li>
<li>Passing around aliases between methods when building QueryOver queries has some pitfalls and needs some special attention.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[QueryOver Series - Part 5: Materializing Results]]></title>
    <link href="http://blog.andrewawhitaker.com/blog/2014/06/28/queryover-series-part-5-materializing-results/"/>
    <updated>2014-06-28T09:47:22-05:00</updated>
    <id>http://blog.andrewawhitaker.com/blog/2014/06/28/queryover-series-part-5-materializing-results</id>
    <content type="html"><![CDATA[<p>So far I&rsquo;ve been using the <code>.List</code> or <code>.SingleOrDefault</code> methods to actually get results from a query. In this post I&rsquo;ll go into a little more detail about those methods. I&rsquo;ll also cover other ways you can materialize a query&rsquo;s results.</p>

<!-- more -->


<h3><code>SingleOrDefault&lt;T&gt;</code> and <code>List&lt;T&gt;</code></h3>

<p>These two are pretty self-explanatory. Calling <code>.List&lt;T&gt;</code> at the end of your query will immediately yield an <code>IList&lt;T&gt;</code>. For example:</p>

<p>```csharp
IList<Employee> empl = session.QueryOver<Employee>()</p>

<pre><code>.List&lt;Employee&gt;();
</code></pre>

<p>```</p>

<p>Similarly, <code>SingleOrDefault&lt;T&gt;</code> will immediately give you a single item of type <code>T</code>, provided the query only returns one row. Otherwise, NHibernate will throw an exception telling you that the query did not return a unique result.</p>

<h3><code>Future&lt;T&gt;</code> and <code>FutureValue&lt;T&gt;</code></h3>

<p>These two are more interesting. <a href="http://ayende.com/blog/3979/nhibernate-futures">Ayende has discussed these in detail</a> with the Criteria API, but I don&rsquo;t think a blog series on QueryOver is really complete without mentioning them again. In NHibernate using these creates a &ldquo;MultiQuery&rdquo; or &ldquo;MultiCriteria&rdquo;, which just means that NHibernate is batching your queries into one round trip and deferring populating the results.</p>

<h4><code>Future&lt;T&gt;</code></h4>

<p>Calling <code>.Future&lt;T&gt;</code> on your query will return an <code>IEnumerable&lt;T&gt;</code> that will not be populated with results until one of the results or resultsets is needed. NHibernate will build up queries using <code>.Future&lt;T&gt;</code> or <code>.FutureValue&lt;T&gt;</code> until one of the &ldquo;future&rdquo; results are accessed.</p>

<p>When the results are processed, NHibernate will send one request to the database containing the SQL for all of the &ldquo;future&rdquo; queries and populate the results accordingly. For example, lets say we were trying to display all <code>Employee</code>s and all <code>Product</code>s on the same page. We could just write two separate queries:</p>

<p>```csharp
// Get the list of employees first
IList<Employee> employees = session.QueryOver<Employee>()</p>

<pre><code>.List&lt;Employee&gt;();
</code></pre>

<p>// Then the list of products
IList<Product> products = session.QueryOver<Product>()</p>

<pre><code>.List&lt;Product&gt;();
</code></pre>

<p>```</p>

<p>Which yields the following SQL:</p>

<p>```sql</p>

<pre><code>SELECT
    this_.BusinessEntityID as Business1_0_1_,
    -- More employee fields
FROM
    HumanResources.Employee this_
</code></pre>

<p><code>
... And then a second query for the `Product`s:
</code>sql</p>

<pre><code>SELECT
    this_.ProductID as ProductID7_0_
    -- More product fields
FROM
    Production.Product this_
</code></pre>

<p><code>``
This would work fine, but NHibernate is sending two separate queries to the database when we can accomplish getting those results with only one using</code>.Future<T>`:</p>

<p>```csharp
// Batch the two queries together
IEnumerable<Employee> employees = session.QueryOver<Employee>()</p>

<pre><code>.Future&lt;Employee&gt;();
</code></pre>

<p>IEnumerable<Product> products = session.QueryOver<Product>()</p>

<pre><code>.Future&lt;Product&gt;();
</code></pre>

<p>// A single round trip to the database is made here containing both queries
int numProducts = products.Count();
```</p>

<p>This generates a single database round trip with both queries when the <code>products.Count()</code> call forces NHibernate to process the <code>Product</code>s query:</p>

<p>```sql
&mdash; First query:
SELECT</p>

<pre><code>this_.BusinessEntityID as Business1_0_1_,
-- More Employee columns
</code></pre>

<p>FROM</p>

<pre><code>HumanResources.Employee this_;
</code></pre>

<p>&mdash; Second query:
SELECT</p>

<pre><code>this_.ProductID as ProductID7_0_,
-- More product columns
</code></pre>

<p>FROM</p>

<pre><code>Production.Product this_;
</code></pre>

<p>```</p>

<p>This can be hugely helpful when querying from multiple sources that don&rsquo;t depend on each other.</p>

<h4><code>FutureValue&lt;T&gt;</code></h4>

<p>The same applies for <code>.FutureValue</code>, which is a deferred version of <code>.SingleOrDefault</code>.</p>

<p>Lets say we wanted a list of all employees and the total number of products. Again, we could write two separate queries:</p>

<p>```csharp
IList<Employee> employees = session.QueryOver<Employee>()</p>

<pre><code>.List&lt;Employee&gt;();
</code></pre>

<p>int productsCount = session.QueryOver<Product>()</p>

<pre><code>.SelectList(list =&gt; list
    .SelectCount(pr =&gt; pr.Id))
.SingleOrDefault&lt;int&gt;();
</code></pre>

<p>```</p>

<p>As you&rsquo;d expect, this will create two queries and two round-trips to the database:</p>

<p>```sql
SELECT</p>

<pre><code>this_.BusinessEntityID as Business1_0_1_,
-- More Employee columns
</code></pre>

<p>FROM</p>

<pre><code>HumanResources.Employee this_
</code></pre>

<p><code>
... And then the `Product`s count query:
</code>sql</p>

<pre><code>SELECT
    count(this_.ProductID) as y0_
FROM
    Production.Product this_
</code></pre>

<p>```</p>

<p>We can turn this into one query by using <code>Future</code> and <code>FutureValue</code>:</p>

<p>```csharp
// Batch the two queries together
IEnumerable<Employee> employees = session.QueryOver<Employee>()</p>

<pre><code>.Future&lt;Employee&gt;();
</code></pre>

<p>IFutureValue<int> productsCount = session.QueryOver<Product>()</p>

<pre><code>.SelectList(list =&gt; list
    .SelectCount(pr =&gt; pr.Id))
.FutureValue&lt;int&gt;();
</code></pre>

<p>// Access the &ldquo;Value&rdquo; property of IFutureValue, which will execute both queries in one round-trip
Console.WriteLine(productsCount.Value);
```</p>

<p>Like our previous example with <code>.Future</code>, this will generate one round-trip to the database with two queries:</p>

<p>```sql
&mdash; First query:
SELECT</p>

<pre><code>this_.BusinessEntityID as Business1_0_1_,
-- More Employee Columns
</code></pre>

<p>FROM</p>

<pre><code>HumanResources.Employee this_;
</code></pre>

<p>&mdash; Second query:
SELECT</p>

<pre><code>count(this_.ProductID) as y0_
</code></pre>

<p>FROM</p>

<pre><code>Production.Product this_;
</code></pre>

<p>```</p>

<p>Note the return type of the count query. <code>IFutureValue&lt;T&gt;</code> is simply a type that allows NHibernate to give you a deferred <code>SingleOrDefault</code> result. Accessing <code>.Value</code> (just like causing the <code>IEnumerable&lt;T&gt;</code> returned by <code>.Future</code>) will cause the batched queries to execute.</p>

<p>I&rsquo;d highly recommend using <code>.Future</code> and <code>.FutureValue</code> where possible when you need to execute multiple queries at once. You&rsquo;ll save round trips to the database and therefore get results to your users faster.</p>

<h3>Summary</h3>

<p>This post covered different ways to materialize resultsets with NHibernate QueryOver.</p>

<ul>
<li><code>.SingleOrDefault</code> and <code>.List</code> immediately give you the results</li>
<li><code>.FutureValue</code> and <code>.Future</code> batch queries and defer execution until one of the results in the batch is needed</li>
<li><code>.FutureValue</code> and <code>.Future</code> use one round trip to the database instead of several, which is more efficient.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[QueryOver Series - Part 4: Transforming]]></title>
    <link href="http://blog.andrewawhitaker.com/blog/2014/06/19/queryover-series-part-4-transforming/"/>
    <updated>2014-06-19T17:51:00-05:00</updated>
    <id>http://blog.andrewawhitaker.com/blog/2014/06/19/queryover-series-part-4-transforming</id>
    <content type="html"><![CDATA[<p>You might have noticed that the last post in the series always projects each result row into an <code>object[]</code>. This might have made you wonder if there&rsquo;s a better way to get results from a QueryOver query. Well there is! It&rsquo;s called transforming.</p>

<p>In the context of an NHibernate query, a <em>transformer</em> is simply a class that transforms each row from a query into an instance of an object. NHibernate comes with several and allows you to easily create a custom transformer if you&rsquo;d like.</p>

<!-- more -->


<p>Transformers are supplied to the <code>TransformUsing</code> function on an instance of <code>IQueryOver&lt;TRoot, TSubtype&gt;</code>. For example, here&rsquo;s how you would use <code>Transformers.DistinctRootEntity</code> (which I&rsquo;ll go into more detail later about):</p>

<p>```csharp
var results =</p>

<pre><code>session.QueryOver&lt;Product&gt;()
    .TransformUsing(Transformers.DistinctRootEntity)
    .List&lt;Product&gt;();
</code></pre>

<p>```</p>

<h3>Using the built-in transformers</h3>

<p>NHibernate supplies several built-in transformers in the <code>NHibernate.Transform</code> namespace. These may be all you need in your application since they cover most use cases. I&rsquo;ll go over each built-in transformer and how to use it.</p>

<h4><code>DistinctRootEntity</code></h4>

<p>This transformer works the way you&rsquo;d think it would: it transforms the query results into a list of <em>distinct</em> entities of the <em>root</em> type. What&rsquo;s the <em>root</em> type? Well if you read <a href="../../../../2014/03/12/queryover-series-part-1-why-queryover/">part 1</a>, you&rsquo;ll remember that a QueryOver query deals with two types, <code>TRoot</code> and <code>TSubType</code>. the root type is simply <code>TRoot</code>.</p>

<p>For example, here&rsquo;s a query that returns a list of all <code>Product</code>s:</p>

<p>```csharp
// TRoot is Product
IList<Product> results = session.QueryOver<Product>()</p>

<pre><code>.TransformUsing(Transformers.DistinctRootEntity)
.List&lt;Product&gt;();
</code></pre>

<p>```</p>

<p>As you can see, using <code>DistinctRootEntity</code> allows us to get a list of entities easily. This example doesn&rsquo;t address the <em>distinct</em> part of <code>DistinctRootEntity</code>. Here&rsquo;s another, more interesting example:</p>

<p>```csharp
IList<Product> results = session.QueryOver<Product>()</p>

<pre><code>.JoinQueryOver(pr =&gt; pr.TransactionHistory)
    .Where(th =&gt; th.ActualCost &gt; 2.0M)
.TransformUsing(Transformers.DistinctRootEntity)
.List&lt;Product&gt;();
</code></pre>

<p>```</p>

<p>This is more interesting because a <code>Product</code> might have many related rows in <code>TransactionHistory</code>. The join would cause each <code>Product</code> to appear as many times as it has <code>TransactionHistory</code> records, which we probably don&rsquo;t want if we&rsquo;re just trying to find all <code>Product</code>s that were ever priced over $2.00.</p>

<p>Here&rsquo;s the SQL the above query generates:</p>

<p>```sql
SELECT</p>

<pre><code>this_.ProductID as ProductID7_1_,
-- All product columns
transactio1_.TransactionID as Transact1_13_0_,
-- All TransactionHistory columns
</code></pre>

<p>FROM</p>

<pre><code>Production.Product this_
</code></pre>

<p>inner join</p>

<pre><code>Production.TransactionHistory transactio1_
    on this_.ProductID=transactio1_.ProductID
</code></pre>

<p>WHERE</p>

<pre><code>transactio1_.ActualCost &gt; 2;
</code></pre>

<p>```</p>

<p>The result we  get back is a list of distinct <code>Product</code>s.</p>

<p><code>DistinctRootEntity</code> is most useful if you have a simple query in which you need instances of an entity and may or may not want to do filtering on some related entities.</p>

<h4><code>AliasToEntityMap</code></h4>

<p>This transformer allows you to transform each row of the result set into an <code>IDictionary</code> (hash table). Unfortunately it&rsquo;s not a generic <code>IDictionary</code>. The keys are strings containing the aliases you defined in the query, and the values are entities. This is best explained with an example:</p>

<p>``` csharp
TransactionHistory historyAlias = null;
Product productAlias = null;</p>

<p>IList<IDictionary> results = session.QueryOver<Product>(() => productAlias)</p>

<pre><code>.JoinQueryOver(pr =&gt; pr.TransactionHistory, () =&gt; historyAlias)
    .Where(th =&gt; th.ActualCost &gt; 2.0M)
.TransformUsing(Transformers.AliasToEntityMap)
.Take(10)
.List&lt;IDictionary&gt;();
</code></pre>

<p>```</p>

<p>Each item in <code>results</code> is an <code>IDictionary</code>. This <code>IDictionary</code>&rsquo;s keys are the <em>aliases</em> we assigned while building our query. For example, if you wanted to get the first row&rsquo;s <code>TransactionHistory</code> entity, you would write:</p>

<p><code>csharp
TransactionHistory history = (TransactionHistory)results[0]["historyAlias"];
</code></p>

<p>This might seem a bit odd at first, but using <code>AliasToEntityMap</code> can prove useful if you need to retrieve multiple entities in a single query.</p>

<h4><code>PassThrough</code></h4>

<p>This transformer appears to be quite similar to <code>AliasToEntityMap</code> in that it generates a collection of entities for each row in the resultset. I say &ldquo;appears&rdquo; because I haven&rsquo;t had much experience with it and I cannot find much about it online. I&rsquo;ll add to this post if I come across anything interesting.</p>

<p>Anyway for a simple example it seems to place an instance of an entity from the query in a slot in an <code>object</code> array in <em>reverse</em> order from when it was added to the query. For example:</p>

<p>```csharp
IList&lt;object[]> results = session.QueryOver<Product>()</p>

<pre><code>.JoinAlias(pr =&gt; pr.Reviews, () =&gt; reviewAlias)
.JoinQueryOver(pr =&gt; pr.TransactionHistory)
    .Where(th =&gt; th.ActualCost &gt; 2.0M)
.TransformUsing(Transformers.PassThrough)
.Take(10)
.List&lt;object[]&gt;();
</code></pre>

<p>foreach (object[] result in results)
{</p>

<pre><code>ProductReview review = (ProductReview)result[0];
TransactionHistory t = (TransactionHistory)result[1];
Product p = (Product)result[2];
</code></pre>

<p>}
```</p>

<p>As you can see, <code>result[0]</code> is a <code>ProductReview</code>, <code>result[1]</code> is a <code>TransactionHistory</code> and <code>result[2]</code> is the <code>Product</code> itself.</p>

<h4><code>RootEntity</code></h4>

<p><code>RootEntity</code> is similar to <code>DistinctRootEntity</code> in that it projects a list of <code>TRoot</code>. The difference is that the results are <em>not</em> distinct. Therefore if you join on a related table that multiplies the root entity, you&rsquo;ll get back that entity many times for each related row. Here&rsquo;s the example from <code>DistinctRootEntity</code> again, except using <code>RootEntity</code>:</p>

<p>```csharp
IList<Product> results = session.QueryOver<Product>()</p>

<pre><code>.JoinQueryOver(pr =&gt; pr.TransactionHistory)
    .Where(th =&gt; th.ActualCost &gt; 2.0M)
.TransformUsing(Transformers.RootEntity)
.List&lt;Product&gt;();
</code></pre>

<p>```</p>

<p>This will return any <code>Products</code> with a <code>TransactionHistory</code> that has an <code>ActualCost</code> over $2.00, but will not remove duplicate <code>Product</code> records.</p>

<h4><code>ToList</code></h4>

<p>This transformer works very similarly to not specifying a transformer at all and getting back an <code>IList&lt;object[]&gt;</code>. The difference here is that you&rsquo;ll get back an <code>IList&lt;IList&gt;</code> instead.</p>

<p>For example:</p>

<p>```csharp
Product productAlias = null;</p>

<p>IList<IList> results = session.QueryOver<Product>(() => productAlias)</p>

<pre><code>.JoinQueryOver(pr =&gt; pr.TransactionHistory)
    .Where(th =&gt; th.ActualCost &gt; 2.0M)
.TransformUsing(Transformers.ToList)
.SelectList(list =&gt; list
    .Select(() =&gt; productAlias.Id)
    .Select(() =&gt; productAlias.Name)
)
.List&lt;IList&gt;();
</code></pre>

<p>Console.WriteLine(results[0][0]); // product Id
Console.WriteLine(results<a href="http://msdn.microsoft.com/en-us/library/system.reflection.constructorinfo(v=vs.110).aspx">0</a>); // product Name
```</p>

<h4><code>AliasToBean</code></h4>

<p>In my experience, this transformer is by far the most useful. It allows you to transform each row into an instance of a type you specify. You can project columns from different entities into properties on each instance.</p>

<p>Lets use <code>AliasToBean</code> to get a list of <code>HighestProductReviewDTO</code>s. Here&rsquo;s the definition for <code>HighestProductReviewDTO</code>:</p>

<p>```csharp
public class HighestProductReviewDTO
{</p>

<pre><code>public int ProductID { get; set; }

public string ProductName { get; set; }

public int Rating { get; set; }

public string Comments { get; set; }
</code></pre>

<p>}
```</p>

<p>NHibernate requires that the DTO have a parameterless constructor so that it can create an instance of your class for each row it retrieves.</p>

<p>We&rsquo;re going to get a list of <code>Product</code>s that have reviews, followed by some information from that <code>Product</code>&rsquo;s highest review. Here&rsquo;s what our query looks like:</p>

<p>```csharp
IList<HighestProductReviewDTO> highestReviews =</p>

<pre><code>session.QueryOver&lt;Product&gt;(() =&gt; productAlias)
    .JoinQueryOver(pr =&gt; pr.Reviews, () =&gt; productReviewAlias)
        .WithSubquery.Where(pr =&gt; pr.Id == QueryOver.Of&lt;ProductReview&gt;()
            .Where(rev =&gt; rev.Product.Id == productAlias.Id)
            .OrderBy(rev =&gt; rev.Rating).Desc()
            .Select(rev =&gt; rev.Id)
            .Take(1)
            .As&lt;int&gt;())
    .SelectList(list =&gt; list
        .Select(() =&gt; productAlias.Id).WithAlias(() =&gt; result.ProductID)
        .Select(() =&gt; productAlias.Name).WithAlias(() =&gt; result.ProductName)
        .Select(() =&gt; productReviewAlias.Rating).WithAlias(() =&gt; result.Rating)
        .Select(() =&gt; productReviewAlias.Comments).WithAlias(() =&gt; result.Comments)
    )
    .TransformUsing(Transformers.AliasToBean&lt;HighestProductReviewDTO&gt;())
    .List&lt;HighestProductReviewDTO&gt;();
</code></pre>

<p>```</p>

<p>Pay particular attention to the <code>.WithAlias</code> calls at the end of the <code>.Select</code> calls inside of <code>SelectList</code>. These are what tell NHibernate to associate particular column values in each row retrieved with the correct property in our DTO class.</p>

<p>In case you&rsquo;re curious, here&rsquo;s the SQL that NHibernate generated:</p>

<p>```sql
SELECT</p>

<pre><code>this_.ProductID as y0_,
this_.Name as y1_,
productrev1_.Rating as y2_,
productrev1_.Comments as y3_
</code></pre>

<p>FROM</p>

<pre><code>Production.Product this_
</code></pre>

<p>inner join</p>

<pre><code>Production.ProductReview productrev1_
    on this_.ProductID=productrev1_.ProductID
</code></pre>

<p>WHERE</p>

<pre><code>productrev1_.ProductReviewID = (
    SELECT
        TOP (1)  this_0_.ProductReviewID as y0_
    FROM
        Production.ProductReview this_0_
    WHERE
        this_0_.ProductID = this_.ProductID
    ORDER BY
        this_0_.Rating desc
</code></pre>

<p>```</p>

<p><code>AliasToBean</code> is extremely useful. It allows us to specify exactly what columns we need and transform the resulting rows into instances of simple types. However it does have some limitations:</p>

<ul>
<li>The class you&rsquo;re projecting to must have a parameterless constructor</li>
<li>You cannot populate collections (e.g., if you had a class with <code>ProductID</code> and a collection of <code>ProductReviews</code> you could not do that in one step using <code>AliasToBean</code>)</li>
<li>You cannot populate full entities (e.g., <code>.Select(() =&gt; productReview.Product).WithAlias(() =&gt; result.Product)</code>)</li>
</ul>


<p>While the second limitation is unfortunate, you <em>can</em> specify a collection type in your result class and write a separate query to populate it. You can possibly even do this in one database round trip using the <code>.Future</code> method, which I&rsquo;ll talk about in a later post.</p>

<h4><code>AliasToBeanConstructor</code></h4>

<p><code>AliasToBeanConstructor</code> is similar to <code>AliasToBean</code>, except that it uses a result type&rsquo;s constructor to create new objects from result rows. Here&rsquo;s our example from above slightly modified to use <code>AliasToBeanConstructor</code> instead.</p>

<p>Here&rsquo;s our modified result class:</p>

<p>```csharp
public class HighestProductReviewDTO
{</p>

<pre><code>public HighestProductReviewDTO(
    int productId, string productName, int rating, string comments)
{
    this.ProductID = productId;
    this.ProductName = productName;
    this.Rating = rating;
    this.Comments = comments;
}

public int ProductID { get; private set; }

public string ProductName { get; private set; }

public int Rating { get; private set; }

public string Comments { get; private set; }
</code></pre>

<p>}
```</p>

<p>And here&rsquo;s our new QueryOver query:</p>

<p>```csharp
IList<HighestProductReviewDTO> highestReviews =</p>

<pre><code>session.QueryOver&lt;Product&gt;(() =&gt; productAlias)
    .JoinQueryOver(pr =&gt; pr.Reviews, () =&gt; productReviewAlias)
        .WithSubquery.Where(pr =&gt; pr.Id == QueryOver.Of&lt;ProductReview&gt;()
            .Where(rev =&gt; rev.Product.Id == productAlias.Id)
            .OrderBy(rev =&gt; rev.Rating).Desc()
            .Select(rev =&gt; rev.Id)
            .Take(1)
            .As&lt;int&gt;())
    .SelectList(list =&gt; list
        .Select(() =&gt; productAlias.Id)
        .Select(() =&gt; productAlias.Name)
        .Select(() =&gt; productReviewAlias.Rating)
        .Select(() =&gt; productReviewAlias.Comments)
    )
    .TransformUsing(Transformers.AliasToBeanConstructor(
        typeof(HighestProductReviewDTO).GetConstructors().First()))
    .List&lt;HighestProductReviewDTO&gt;();
</code></pre>

<p>```</p>

<p>We&rsquo;re passing <a href="http://msdn.microsoft.com/en-us/library/system.reflection.constructorinfo(v=vs.110).aspx"><code>ConstructorInfo</code></a> to <code>AliasToBeanConstructor</code> which we get using <code>GetConstructors</code>. NHibernate calls our constructor with the column values we&rsquo;re retrieving with our <code>SelectList</code>. Note that <em>all</em> items in the <code>SelectList</code> are passed to the constructor in the order you add them.</p>

<h3>Creating your own transformer</h3>

<p>The built in transformers are great, but if you need your own result transformer, that&rsquo;s possible too.</p>

<p>For example, let&rsquo;s say we want to call a callback function every time a row is transformed. We could also iterate over our results after retrieving them, but this gives us a way to apply any modifications we might want while we&rsquo;re transforming the row. Here&rsquo;s our new transformer class:</p>

<p>```csharp
/// <summary>
/// A result transformer that calls a callback after successfully transforming a result row
/// into an instance of T
/// </summary>
/// <typeparam name="T">The result type</typeparam>
public class AliasToBeanWithCallbackTransformer<T> : IResultTransformer
{</p>

<pre><code>private readonly AliasToBeanResultTransformer aliasToBeanTransformer;
private readonly Action&lt;T&gt; callback;

public AliasToBeanWithCallbackTransformer(Action&lt;T&gt; callback)
{
    this.aliasToBeanTransformer = new AliasToBeanResultTransformer(typeof(T));
    this.callback = callback;
}

public IList TransformList(IList collection)
{
    return this.aliasToBeanTransformer.TransformList(collection);
}

public object TransformTuple(object[] tuple, string[] aliases)
{
    object result = this.aliasToBeanTransformer.TransformTuple(tuple, aliases);

    // Call the callback before returning the result.
    callback((T)result);

    return result;
}
</code></pre>

<p>}
```</p>

<p>In this example, all I&rsquo;ve done is wrap <code>AliasToBeanResultTransformer</code> in a class that calls the callback the user specifies after calling <code>AliasToBeanResultTransformer</code>&rsquo;s <code>TransformTuple</code> method. I&rsquo;ll use this transformer in an example that retrieves product review information but with an added property, <code>DateRetrieved</code>:</p>

<p>```csharp
public class ProductReviewDTO
{</p>

<pre><code>public int ProductReviewID { get; set; }

public int Rating { get; set; }

public string Comments { get; set; }

public DateTime DateRetrieved { get; set; }
</code></pre>

<p>}
```</p>

<p>We can use the transformer to assign <code>DateRetrieved</code> after creating a new <code>ProductReviewDTO</code>:</p>

<p>```csharp
DateTime dateRetrieved = DateTime.Now;</p>

<p>IList<ProductReviewDTO> highestReviews =</p>

<pre><code>session.QueryOver&lt;ProductReview&gt;()
    .SelectList(list =&gt; list
        .Select(pr =&gt; pr.Comments).WithAlias(() =&gt; result.Comments)
        .Select(pr =&gt; pr.Id).WithAlias(() =&gt; result.ProductReviewID)
        .Select(pr =&gt; pr.Rating).WithAlias(() =&gt; result.Rating)
    )
    // Assign "DateRetrieved correctly:
    .TransformUsing(new AliasToBeanWithCallbackTransformer&lt;ProductReviewDTO&gt;(
        hp =&gt; hp.DateRetrieved = dateRetrieved))
    .Take(10)
    .List&lt;ProductReviewDTO&gt;();
</code></pre>

<p>```</p>

<p>This is a simple example, but it should demonstrate how easy it is to extend the built in transformers. It would be nice if we could subclass the built in transformers, but unfortunately the methods we would need to override are not marked <code>virtual</code>.</p>

<p>A good place to look for how to write a transformer is the <a href="https://github.com/nhibernate/nhibernate-core/tree/master/src/NHibernate/Transform">NHibernate source code itself</a>.</p>

<h3>Summary</h3>

<p>I covered a lot in this post, but I was aiming to be comprehensive with each transformer type. This should enable you to effectively use the built in transformers and create your own if you need to.</p>

<ul>
<li>There are several built in result transformers in the <code>NHibernate.Transform</code> namespace.</li>
<li><code>DistinctRootEntity</code> and <code>RootEntity</code> retrieve a list of the &ldquo;root&rdquo; of the QueryOver query</li>
<li><code>AliasToEntityMap</code> and <code>PassThrough</code> retrieve the entities present in the QueryOver query in an <code>IDictionary</code> and <code>object[]</code>, respectively.</li>
<li><code>AliasToBean</code> and <code>AliasToBeanConstructor</code> are powerful transformers that allow you to create a list of instances of a type you specify.</li>
<li>You can create your own result transformer pretty easily to suit your needs.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[QueryOver Series - Part 3: Selecting]]></title>
    <link href="http://blog.andrewawhitaker.com/blog/2014/03/22/queryover-series-part-3-selecting-and-transforming/"/>
    <updated>2014-03-22T10:01:46-05:00</updated>
    <id>http://blog.andrewawhitaker.com/blog/2014/03/22/queryover-series-part-3-selecting-and-transforming</id>
    <content type="html"><![CDATA[<p>In this post I&rsquo;ll go over building the <code>SELECT</code> statement with NHibernate QueryOver. I&rsquo;ll also cover the different ways you can actually get a result back from your query.</p>

<!-- more -->


<h3>Selecting a single property</h3>

<p>In the simplest case, you&rsquo;ll want to select a single column from a single row. For example, if you wanted to retrieve a single <code>Product</code>&rsquo;s <code>Name</code>:</p>

<p>``` csharp
string name = session.QueryOver<Product>()</p>

<pre><code>.Where(p =&gt; p.Id == 1)
.Select(p =&gt; p.Name)
.SingleOrDefault&lt;string&gt;();
</code></pre>

<p>```</p>

<p>Which yields the following SQL:</p>

<p>``` sql
SELECT</p>

<pre><code>this_.Name as y0_
</code></pre>

<p>FROM</p>

<pre><code>Production.Product this_
</code></pre>

<p>WHERE</p>

<pre><code>this_.ProductID = 1;
</code></pre>

<p>```</p>

<p>Note that if your query actually returns more than one result, NHibernate will throw an exception, letting you know that the query did not return a unique result.</p>

<p>Similarly, if you want to select a list of single properties, say the <code>Name</code> of every <code>Product</code>:</p>

<p>``` csharp
IList<string> names = session.QueryOver<Product>()</p>

<pre><code>.Select(p =&gt; p.Name)
.List&lt;string&gt;();
</code></pre>

<p>```</p>

<p>Generates:</p>

<p>``` sql
SELECT</p>

<pre><code>this_.Name as y0_
</code></pre>

<p>FROM</p>

<pre><code>Production.Product this_
</code></pre>

<p>```</p>

<h3>Selecting multiple properties</h3>

<p>Most of the time you won&rsquo;t want to select just one column, you&rsquo;ll want to build a whole result set. You have a few options in this area:</p>

<h4>Using <code>SelectList</code></h4>

<p><code>SelectList</code> is one way to specify a list of properties you&rsquo;d like to select. Here&rsquo;s a simple example:</p>

<p>``` csharp
IList&lt;object[]> productInformation = session.QueryOver<Product>()</p>

<pre><code>.SelectList(list =&gt; list
    .Select(p =&gt; p.Id)
    .Select(p =&gt; p.Name)
    .Select(p =&gt; p.StandardCost)
)
.List&lt;object[]&gt;();
</code></pre>

<p>```</p>

<p>This generates the SQL you&rsquo;d expect:</p>

<p>``` sql
SELECT</p>

<pre><code>this_.ProductID as y0_,
this_.Name as y1_,
this_.StandardCost as y2_
</code></pre>

<p>FROM</p>

<pre><code>Production.Product this_
</code></pre>

<p>```</p>

<p>Those are the basics of using <code>SelectList</code>. There are some cool things you can do with <code>SelectList</code> to build <code>SELECT</code> clauses dynamically.</p>

<p><code>SelectList</code> accepts a <code>QueryOverProjectionBuilder&lt;TRoot&gt;</code>. We can take advantage of QueryOver&rsquo;s dynamic nature to dynamically build a select list.</p>

<p>One way to do this is to create a method that accepts a <code>QueryOverProjectionBuilder&lt;TRoot&gt;</code> and has the same return type. To expand on the <code>Product</code> example above:</p>

<p>``` csharp
static QueryOverProjectionBuilder<Product> BuildSelectList(</p>

<pre><code>QueryOverProjectionBuilder&lt;Product&gt; list)
</code></pre>

<p>{</p>

<pre><code>bool getName = /* some condition */;

if (getName)
{
    list.Select(p =&gt; p.Name);
}

list
    .Select(p =&gt; p.Id)
    .Select(p =&gt; p.StandardCost);

return list;
</code></pre>

<p>}
```</p>

<p>We can then call the method directly from <code>SelectList</code>:</p>

<p>``` csharp
IList&lt;object[]> names = session.QueryOver<Product>()</p>

<pre><code>.SelectList(BuildSelectList)
.List&lt;object[]&gt;();
</code></pre>

<p>```</p>

<h4>Using <code>Projections.ProjectionList()</code></h4>

<p>Another way to build a <code>SELECT</code> clause is using <code>Projections.ProjectionList()</code>. You can pass a <code>ProjectionList</code> to the <code>.Select</code> method:</p>

<p>``` csharp
Product productAlias = null;</p>

<p>session.QueryOver<Product>(() => productAlias)</p>

<pre><code>.Select(Projections.ProjectionList()
    .Add(Projections.Property(() =&gt; productAlias.Id))
    .Add(Projections.Property(() =&gt; productAlias.Name))
)
.List&lt;object[]&gt;();
</code></pre>

<p>```</p>

<p>This generates the following SQL:</p>

<p>``` sql
SELECT</p>

<pre><code>this_.ProductID as y0_,
this_.Name as y1_
</code></pre>

<p>FROM</p>

<pre><code>Production.Product this_
</code></pre>

<p>```</p>

<p>It&rsquo;s also easy to generate dynamic <code>SELECT</code> clauses with <code>ProjectionList</code>:</p>

<p>``` csharp
Product productAlias = null;</p>

<p>ProjectionList projectionList = Projections.ProjectionList()</p>

<pre><code>.Add(Projections.Property(() =&gt; productAlias.Id))
.Add(Projections.Property(() =&gt; productAlias.StandardCost));
</code></pre>

<p>bool getName = true;</p>

<p>if (getName)
{</p>

<pre><code>projectionList.Add(Projections.Property(() =&gt; productAlias.Name));
</code></pre>

<p>}</p>

<p>session.QueryOver<Product>(() => productAlias)</p>

<pre><code>.Select(projectionList)
.List&lt;object[]&gt;();
</code></pre>

<p>```</p>

<p>I think if you&rsquo;re dynamically building the <code>SELECT</code> clause, <code>Projections.ProjectionList</code> is actually cleaner, due to the way you can easily build it outside of the query itself.</p>

<h3>Aggregates</h3>

<p>So far I&rsquo;ve looked at building simple <code>SELECT</code>s. Now I&rsquo;ll look at using aggregate functions.</p>

<p>In the simplest cases, using <code>SelectList</code> along with <code>SelectGroup</code> and the aggregate function you want will get the job done.</p>

<p>For example:</p>

<p>``` csharp
session.QueryOver<Product>()</p>

<pre><code>.JoinQueryOver(pr =&gt; pr.TransactionHistory, () =&gt; transactionHistoryAlias)
.SelectList(list =&gt; list
    .SelectGroup(pr =&gt; pr.Id)
    .SelectCount(() =&gt; transactionHistoryAlias.Id)
)
.List&lt;object[]&gt;();
</code></pre>

<p>```</p>

<p>Will generate:</p>

<p>``` sql
SELECT</p>

<pre><code>this_.ProductID as y0_,
count(transactio1_.TransactionID) as y1_
</code></pre>

<p>FROM</p>

<pre><code>Production.Product this_
</code></pre>

<p>inner join</p>

<pre><code>Production.TransactionHistory transactio1_
    on this_.ProductID=transactio1_.ProductID
</code></pre>

<p>GROUP BY</p>

<pre><code>this_.ProductID
</code></pre>

<p>```</p>

<p>You can call <code>SelectGroup</code> multiple times to add more columns to group on. You&rsquo;ll notice that <code>.SelectGroup</code> adds a column to the <code>GROUP BY</code> clause as well as the <code>SELECT</code> clause.</p>

<p>You can also add a <code>HAVING</code> clause, although it is <em>not</em> intuitive at all:</p>

<p>``` csharp
var results = session.QueryOver<Product>()</p>

<pre><code>.JoinQueryOver(pr =&gt; pr.TransactionHistory, () =&gt; transactionHistoryAlias)
.SelectList(list =&gt; list
    .SelectGroup(pr =&gt; pr.Id)
    .SelectGroup(pr =&gt; pr.Name)
    .SelectCount(() =&gt; transactionHistoryAlias.Id)
)
/* Generates a HAVING clause: */
.Where(Restrictions.Gt(
    Projections.Count(
        Projections.Property(() =&gt; transactionHistoryAlias.Id)), 5))
.List&lt;object[]&gt;();
</code></pre>

<p>```</p>

<p>This generates the following SQL:</p>

<p>``` sql
SELECT</p>

<pre><code>this_.ProductID as y0_,
this_.Name as y1_,
count(transactio1_.TransactionID) as y2_
</code></pre>

<p>FROM</p>

<pre><code>Production.Product this_
</code></pre>

<p>inner join</p>

<pre><code>Production.TransactionHistory transactio1_
    on this_.ProductID=transactio1_.ProductID
</code></pre>

<p>GROUP BY</p>

<pre><code>this_.ProductID,
this_.Name
</code></pre>

<p>HAVING</p>

<pre><code>count(transactio1_.TransactionID) &gt; 5;
</code></pre>

<p>```</p>

<h3>Subqueries</h3>

<p>There are several ways to create subqueries. You can create a correlated subquery by creating an alias in the outer query and referencing it in the other query. Here&rsquo;s an example using <code>SelectList</code> and <code>SelectSubQuery</code>:</p>

<p>``` csharp
var results = session.QueryOver<Product>(() => productAlias)</p>

<pre><code>.SelectList(list =&gt; list
    .Select(pr =&gt; pr.Id)
    .SelectSubQuery(
        QueryOver.Of&lt;TransactionHistory&gt;()
            // Creates a correlated subquery
            .Where(tx =&gt; tx.Product.Id == productAlias.Id)
            .OrderBy(tx =&gt; tx.TransactionDate).Asc
            .Select(tx =&gt; tx.TransactionDate)
            .Take(1)
        )
)
.List&lt;object[]&gt;();
</code></pre>

<p>```</p>

<p>Which generates:</p>

<p>``` sql
SELECT
   this<em>.ProductID as y0</em>,
   (SELECT</p>

<pre><code>   TOP (1)  this_0_.TransactionDate as y0_
</code></pre>

<p>   FROM</p>

<pre><code>   Production.TransactionHistory this_0_
</code></pre>

<p>   WHERE</p>

<pre><code>   this_0_.ProductID = this_.ProductID
</code></pre>

<p>   ORDER BY</p>

<pre><code>   this_0_.TransactionDate asc) as y1_
</code></pre>

<p>FROM
   Production.Product this_;
```</p>

<p>In general, if you can&rsquo;t find a method on <code>QueryOverProjectionBuilder&lt;TRoot&gt;</code> using <code>.SelectList</code>, you can drop back into criteria methods on the <code>Projections</code> class. For example, say you want to use a case statement in your <code>SELECT</code> clause. You can use <code>Projections.Conditional</code> for that:</p>

<p>``` csharp
var results = session.QueryOver<Product>(() => productAlias)</p>

<pre><code>.JoinQueryOver(pr =&gt; pr.TransactionHistory, () =&gt; transactionHistoryAlias)
.SelectList(list =&gt; list
    .Select(pr =&gt; pr.Id)
    .Select(Projections.Conditional(
        Restrictions.Gt(
            Projections.Property(() =&gt; transactionHistoryAlias.Quantity), 5),
        Projections.Constant(true),
        Projections.Constant(false)
)))
.List&lt;object[]&gt;();
</code></pre>

<p>```</p>

<p>Which generates:</p>

<p>``` sql
SELECT</p>

<pre><code>this_.ProductID as y0_,
(case
    when transactio1_.Quantity &gt; 5 then 'True'
    else 'False'
end) as y1_
</code></pre>

<p>FROM</p>

<pre><code>Production.Product this_
</code></pre>

<p>inner join</p>

<pre><code>Production.TransactionHistory transactio1_
    on this_.ProductID=transactio1_.ProductID;
</code></pre>

<p>```</p>

<h3>Summary</h3>

<p>This post covered a lot, but that&rsquo;s because there are many ways to build a <code>SELECT</code> clause with QueryOver. In summary:</p>

<ul>
<li><code>Select</code> can be used to build a <code>SELECT</code> clause with single columns</li>
<li><code>SelectList</code> and <code>Projections.ProjectionList</code> can be used to create more complex <code>SELECT</code> clauses.</li>
<li>When aggregating values, use <code>SelectGroup</code> (or <code>Projections.GroupProperty</code>).</li>
<li>For more complex scenarios, you can drop back in to Criteria methods on the <code>Projections</code> class. These support lambda expressions and can be used with QueryOver.</li>
</ul>

]]></content>
  </entry>
  
</feed>
