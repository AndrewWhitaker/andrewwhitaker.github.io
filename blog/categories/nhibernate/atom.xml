<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: nhibernate | Andrew Whitaker]]></title>
  <link href="http://blog.andrewawhitaker.com/blog/categories/nhibernate/atom.xml" rel="self"/>
  <link href="http://blog.andrewawhitaker.com/"/>
  <updated>2015-01-29T19:36:04-06:00</updated>
  <id>http://blog.andrewawhitaker.com/</id>
  <author>
    <name><![CDATA[Andrew Whitaker]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[QueryOver Series - Part 9: Extending QueryOver to Use Custom Methods and Properties]]></title>
    <link href="http://blog.andrewawhitaker.com/blog/2015/01/28/queryover-series-part-9-extending-queryover-using-custom-methods-and-properties/"/>
    <updated>2015-01-28T19:05:39-06:00</updated>
    <id>http://blog.andrewawhitaker.com/blog/2015/01/28/queryover-series-part-9-extending-queryover-using-custom-methods-and-properties</id>
    <content type="html"><![CDATA[<p>A basic tenet of QueryOver queries is that you can&rsquo;t query against unmapped properties. While this is generally true, in this post I&rsquo;ll outline some strategies you can use to register properties and functions with QueryOver so that they generate meaningful SQL.</p>

<!-- more -->


<h2>Basics</h2>

<p>Just as a refresher, consider the following class:</p>

<p>```csharp
public class Rectangle
{</p>

<pre><code>public Rectangle(double width, double height)
{
    this.Width = width;
    this.Height = height;
}

protected Rectangle()
{
}

public virtual int Id { get; set; }

public virtual double Width { get; protected set; }

public virtual double Height { get; protected set; }

public virtual double Area
{
    get { return this.Width * this.Height; }
}
</code></pre>

<p>}
```</p>

<p>Nothing too complicated right? This class maps to the following database table:</p>

<p>```sql
create table [Rectangle]
(</p>

<pre><code>[Id] int identity(1,1) primary key clustered,
[Width] float not null,
[Height] float not null
</code></pre>

<p>)
```</p>

<p>Notice that there&rsquo;s no <code>Area</code> column in the database. This property is computed by C# code. When you attempt to query against it using QueryOver:</p>

<p>```csharp
session.QueryOver<Rectangle>()</p>

<pre><code>.Where(r =&gt; r.Area &gt; 4.0)
.List&lt;Rectangle&gt;();
</code></pre>

<p>```</p>

<p>You&rsquo;ll get the following exception:</p>

<p>```
NHibernate.QueryException was unhandled
  HResult=-2146232832
  Message=could not resolve property: Area of: Rectangle.Rectangle
  Source=NHibernate
  StackTrace:</p>

<pre><code>   at NHibernate.Persister.Entity.AbstractPropertyMapping.ToType(String propertyName)
   at NHibernate.Persister.Entity.AbstractEntityPersister.GetSubclassPropertyTableNumber(String propertyPath)
   at NHibernate.Persister.Entity.BasicEntityPropertyMapping.ToColumns(String alias, String propertyName)
   at NHibernate.Persister.Entity.AbstractEntityPersister.ToColumns(String alias, String propertyName)
   at NHibernate.Loader.Criteria.CriteriaQueryTranslator.GetColumns(ICriteria subcriteria, String propertyName)
   at NHibernate.Loader.Criteria.CriteriaQueryTranslator.GetColumnsUsingProjection(ICriteria subcriteria, String propertyName)
   at NHibernate.Criterion.CriterionUtil.GetColumnNamesUsingPropertyName(ICriteriaQuery criteriaQuery, ICriteria criteria, String propertyName, Object value, ICriterion critertion)
   at NHibernate.Criterion.CriterionUtil.GetColumnNamesForSimpleExpression(String propertyName, IProjection projection, ICriteriaQuery criteriaQuery, ICriteria criteria, IDictionary`2 enabledFilters, ICriterion criterion, Object value)
   ...
</code></pre>

<p>```</p>

<p>The gist is that since <code>Area</code> is an unmapped property, NHibernate doesn&rsquo;t know what to do with it. Lets see if we can change that.</p>

<h2>Registering an Unmapped Property with QueryOver</h2>

<p>To get the gist of what we&rsquo;re going to do, it might be helpful to take a look at the <a href="https://github.com/nhibernate/nhibernate-core/blob/master/src/NHibernate/Criterion/ProjectionsExtensions.cs">ProjectionExtensions.cs</a> and <a href="https://github.com/nhibernate/nhibernate-core/blob/master/src/NHibernate/Impl/ExpressionProcessor.cs">ExpressionProcessor.cs</a> files in the NHibernate source code. There are only two things that we need to do:</p>

<ol>
<li>Write a function that can translate an <code>Expression</code> and turns it into a <code>Projection</code> that QueryOver can use.</li>
<li>Register the function from #1 with the <code>ExpressionProcessor</code> class referenced above.</li>
</ol>


<h3>Translating the <code>Area</code> property into a <code>Projection</code></h3>

<p>If you look at the <code>ExpressionProcessor</code> class, you&rsquo;ll see a bunch of <code>RegisterCustomProjection</code> calls. A few of them are used to let you use <code>DateTime</code> properties like <code>Month</code> or <code>Hour</code> directly in a QueryOver query. Since this is really close to what we want to do with the <code>Area</code> property, lets follow those methods as an example.</p>

<p>Taking a closer look at <code>RegisterCustomProjection</code>, you&rsquo;ll notice that the function takes two arguments:</p>

<ol>
<li>The property or method we want to register, and</li>
<li>A <code>Func&lt;MemberExpression, IProjection</code>. In other words, a lambda that takes a <code>MemberExpression</code> and returns an <code>IProjection</code>.</li>
</ol>


<p>Let&rsquo;s implement #2 first.</p>

<h4>Implementing the <code>ProcessArea</code> function</h4>

<p>The hardest part of this process is going to be the <code>ProcessArea</code> function that will take an expression and somehow return a projection that computes the length. Here&rsquo;s what that looks like:</p>

<p>```csharp
public static class RectangleExtensions
{</p>

<pre><code>/// &lt;summary&gt;
/// Helper function that takes an "alias" and property name and combines them into 
/// property access that can then be used in a projection.
/// &lt;/summary&gt;
/// &lt;param name="alias"&gt;The alias.&lt;/param&gt;
/// &lt;param name="property"&gt;The property.&lt;/param&gt;
/// &lt;returns&gt;A string representing full property access.&lt;/returns&gt;
private static string BuildPropertyName(string alias, string property)
{
    if (!string.IsNullOrEmpty(alias))
    {
        return string.Format("{0}.{1}", alias, property);
    }

    return property;
}

/// &lt;summary&gt;
/// Processes the "Area" property access, an unmapped property,
/// and turns it into a computation on the SQL side.
/// &lt;/summary&gt;
/// &lt;param name="expression"&gt;The expression to process.&lt;/param&gt;
/// &lt;returns&gt;The resulting projection.&lt;/returns&gt;
public static IProjection ProcessArea(System.Linq.Expressions.Expression expression)
{
    /* Expressions from which we can get "Width" and "Height" property names to 
     * build a projection */
    Expression&lt;Func&lt;Rectangle, double&gt;&gt; w = r =&gt; r.Width;
    Expression&lt;Func&lt;Rectangle, double&gt;&gt; h = r =&gt; r.Height;

    /* The name of the alias used in the query, if any */
    string aliasName = ExpressionProcessor.FindMemberExpression(expression);

    /* Retrieves the strings "Width" and "Height" from the expressions above */
    string widthName = ExpressionProcessor.FindMemberExpression(w.Body);
    string heightName = ExpressionProcessor.FindMemberExpression(h.Body);

    /* Combines the "Width" and "Height" strings with the alias name to 
     * build a projection: */
    PropertyProjection widthProjection = 
        Projections.Property(BuildPropertyName(aliasName, widthName));

    PropertyProjection hProjection =
        Projections.Property(BuildPropertyName(aliasName, heightName));

    /* Finally, return a SQL function that computes the product of */
     * Width and Height */
    ISQLFunction multiplication =
        new VarArgsSQLFunction(NHibernateUtil.Double, "(", "*", ")");

    return Projections.SqlFunction(
        multiplication, NHibernateUtil.Double, widthProjection, hProjection);
}
</code></pre>

<p>}
```</p>

<p>There&rsquo;s a lot going on there. Basically we need to get the <code>Width</code> and <code>Height</code> properties from the <code>Rectangle</code> class so that we can use them in a projection. This would be simple, but since the query could be using an alias, we need to combine the property names with the alias (which can be <code>string.Empty</code>) to create the proper property access.</p>

<p>Grabbing the property names as strings from <code>Expression</code>s prevents magic strings, which QueryOver is designed to prevent anyway.</p>

<p>Next, we need to build actual <code>Projection</code>s from the strings we&rsquo;ve made, which is easy using the overload of <code>Projection.Property</code> that takes a <code>string</code>.</p>

<p>Finally, we&rsquo;ll register our function with the <code>ExpressionProcessor</code>.</p>

<h4>Registering the <code>Area</code> property and <code>ProcessArea</code> function with the <code>ExpressionProcessor</code>.</h4>

<p>I don&rsquo;t think it matters exactly <em>when</em> you register your custom function, but it obviously has to be before you use the property or method in a query.</p>

<p>Here&rsquo;s what the code looks like:</p>

<p>```csharp
ExpressionProcessor.RegisterCustomProjection(</p>

<pre><code>() =&gt; default(Rectangle).Area,
expr =&gt; RectangleExtensions.ProcessArea(expr.Expression));
</code></pre>

<p>```</p>

<p>&hellip;And that&rsquo;s basically it. We&rsquo;re telling NHibernate to call the <code>ProcessArea</code> function when the <code>Rectangle.Area</code> property is used.</p>

<p>Now our original query is valid and should generate the correct SQL:</p>

<p>```sql
SELECT</p>

<pre><code>this_.Id as Id0_0_,
this_.Width as Width0_0_,
this_.Height as Height0_0_
</code></pre>

<p>FROM</p>

<pre><code>Rectangle this_
</code></pre>

<p>WHERE</p>

<pre><code>(
    this_.Width*this_.Height
) &gt; 4
</code></pre>

<p>```</p>

<h3>Using a user-defined function to compute <code>Area</code></h3>

<p>Now, lets take the concept a slightly different direction. Lets assume that the area function is defined in a user-defined function:</p>

<p>```sql
create function UFN_CalculateArea
(</p>

<pre><code>@Width float,
@Height float
</code></pre>

<p>)
returns float
as
begin</p>

<pre><code>declare @Area float;

select @Area = @Width * @Height;

return @Area;
</code></pre>

<p>end
```</p>

<p>Now our QueryOver code becomes:</p>

<p>```csharp
/// <summary>
/// Processes the &ldquo;Area&rdquo; property access, an unmapped property,
/// and turns it into a computation on the SQL side.
/// </summary>
/// <param name="expression">The expression to process.</param>
/// <returns>The resulting projection.</returns>
public static IProjection ProcessArea(System.Linq.Expressions.Expression expression)
{</p>

<pre><code>/* Expressions from which we can get "Width" and "Height" property names to 
 * build a projection */
Expression&lt;Func&lt;Rectangle, double&gt;&gt; w = r =&gt; r.Width;
Expression&lt;Func&lt;Rectangle, double&gt;&gt; h = r =&gt; r.Height;

/* The name of the alias used in the query, if any */
string aliasName = ExpressionProcessor.FindMemberExpression(expression);

/* Retrieves the strings "Width" and "Height" from the expressions above */
string widthName = ExpressionProcessor.FindMemberExpression(w.Body);
string heightName = ExpressionProcessor.FindMemberExpression(h.Body);

/* Combines the "Width" and "Height" strings with the alias name to 
 * build a projection: */
PropertyProjection widthProjection =
    Projections.Property(BuildPropertyName(aliasName, widthName));

PropertyProjection hProjection =
    Projections.Property(BuildPropertyName(aliasName, heightName));

/* Finally, return ISQLFunction that calls our user-defined function:  */
ISQLFunction multiplication =
    new SQLFunctionTemplate(NHibernateUtil.Double, "dbo.UFN_CalculateArea(?1, ?2)");

return Projections.SqlFunction(
    multiplication, NHibernateUtil.Double, widthProjection, hProjection);
</code></pre>

<p>}
```</p>

<p>And the generated SQL is what we expect:</p>

<p>```sql
SELECT</p>

<pre><code>this_.Id as Id0_0_,
this_.Width as Width0_0_,
this_.Height as Height0_0_
</code></pre>

<p>FROM</p>

<pre><code>Rectangle this_
</code></pre>

<p>WHERE</p>

<pre><code>dbo.UFN_CalculateArea(this_.Width, this_.Height) &gt; 4;
</code></pre>

<p>```</p>

<h2>Other Tips</h2>

<p>There are a few things worth noting here:</p>

<h3>Registered methods need not be implemented in C#</h3>


<p>We could actually decide not to provide an implementation for our <code>Area</code> property:</p>

<p>```csharp
public class Rectangle
{</p>

<pre><code>public Rectangle(double width, double height)
{
    this.Width = width;
    this.Height = height;
}

protected Rectangle()
{
}

public virtual int Id { get; set; }

public virtual double Width { get; protected set; }

public virtual double Height { get; protected set; }

public virtual double Area
{
    get
    {
        throw new NotImplementedException("Only available inside a QueryOver query"); 
    }
}
</code></pre>

<p>}
```</p>

<p>NHibernate will happily transform the <code>Area</code> property into the correct SQL as before&mdash;after all, it isn&rsquo;t actually <em>invoking</em> the property, it&rsquo;s evaluating it inside of an expression tree.</p>

<p>Another example of where this might be useful is for functionality that&rsquo;s actually only available in SQL. Let&rsquo;s pick on the <code>checksum</code> function. If we wanted to use that inside of a QueryOver query, one way to do that would be to create a <code>CheckSum</code> extension method and register it (check <a href="../blog/2014/08/15/queryover-series-part-7-using-sql-functions">Using SQL Functions</a> for how to add the <code>checksum</code> function with a custom dialect):</p>

<p>Here&rsquo;s our <code>CheckSum</code> method:</p>

<p>```csharp
public static class QueryOverExtensions
{</p>

<pre><code>public static int CheckSum(this object o)
{
    throw new NotImplementedException("Must be used inside of a QueryOver query.");
}
</code></pre>

<p>}
```</p>

<p>Here&rsquo;s the <code>ProcessCheckSum</code> method that processes the <code>CheckSum</code> method call into an <code>IProjection</code>:</p>

<p>```csharp
public static class Extensions
{</p>

<pre><code>public static IProjection ProcessCheckSum(MethodCallExpression methodCallExpression)
{
    IProjection property =
        ExpressionProcessor.FindMemberProjection(
            methodCallExpression.Arguments[0]).AsProjection();

    return Projections.SqlFunction("checksum", NHibernateUtil.Int32, property);
}
</code></pre>

<p>}
```</p>

<p>Finally, here&rsquo;s registering it with the <code>ExpressionProcessor</code>:</p>

<p>```csharp
ExpressionProcessor.RegisterCustomProjection(</p>

<pre><code>() =&gt; default(object).CheckSum(), Extensions.ProcessCheckSum);
</code></pre>

<p>```</p>

<p>Here&rsquo;s an example of getting a <code>checksum</code> of <code>Rectangle.Height</code>:</p>

<p>```csharp
int checksum = session.QueryOver<Rectangle>()</p>

<pre><code>.Select(rct =&gt; rct.Height.CheckSum())
.Take(1)
.SingleOrDefault&lt;int&gt;();
</code></pre>

<p>```</p>

<h3>Using multiple properties/columns in a function call</h3>

<p>There isn&rsquo;t an example of this (that I can find) in the NHibernate code base, so I figured I&rsquo;d go ahead and provide one.</p>

<p>Continuing with the <code>checksum</code> example above, what if we wanted to supply some additional columns to the <code>checksum</code> function? At this point it might be wiser to use the strategy outlined in Part 7, but lets expand the <code>CheckSum</code> extension method for the sake of an example.</p>

<p>Here&rsquo;s how the extension method itself needs to change:</p>

<p>```csharp
public static class QueryOverExtensions
{</p>

<pre><code>public static int CheckSum(this object o, params object[] additionalProperties)
{
    throw new NotImplementedException("Must be used inside of a QueryOver query.");
}
</code></pre>

<p>}
```</p>

<p>Note the use of <code>params</code>&mdash;we&rsquo;ve made it possible for the user of our method to supply as many additional properties as they&rsquo;d like.</p>

<p>Here&rsquo;s the new implementation of <code>ProcessCheckSum</code>:</p>

<p>```csharp
public static IProjection ProcessCheckSum(MethodCallExpression methodCallExpression)
{</p>

<pre><code>/* Retrieve the property the extension method was called on as a projection */
IProjection property =
    ExpressionProcessor.FindMemberProjection(methodCallExpression.Arguments[0])
        .AsProjection();

var projections = new List&lt;IProjection&gt; { property };

/* Process the array that's supplied as the second argument in the expression. */
var additionalProperties = (NewArrayExpression)methodCallExpression.Arguments[1];

/* Convert each item in the array into a projection */
IEnumerable&lt;IProjection&gt; additionalProjections =
    additionalProperties.Expressions
        .Select(expr =&gt; 
            ExpressionProcessor.FindMemberProjection(expr).AsProjection());

/* Combine the first projection and the additional ones */
projections.AddRange(additionalProjections);

return Projections.SqlFunction(
    "checksum", NHibernateUtil.Int32, projections.ToArray());
</code></pre>

<p>}
```</p>

<p>The key here is to notice that <code>Arguments[1]</code> is of type <code>NewArrayExpression</code> (because of the second argument being and array). We need to take out the expressions <em>within</em> that array (that&rsquo;s what the LINQ block does) and then supply those projections to <code>Projections.SqlFunction</code>.</p>

<p>Now we can call our extension method with more properties:</p>

<p>```csharp
int checksum = session.QueryOver<Rectangle>(() => rectAlias)</p>

<pre><code>.Select(rct =&gt; rct.Height.CheckSum(rct.Width))
.Take(1)
.SingleOrDefault&lt;int&gt;();
</code></pre>

<p>```</p>

<p>Note that <code>rct.Width</code> could easily be a property referenced with an alias (e.g. <code>rectAlias.Width</code>), even one from another class.</p>

<h2>Summary</h2>

<p>Hopefully this post has been helpful in providing some useful strategies on how to get NHibernate to generate meaningful SQL from a QueryOver query, even when using unmapped properties or methods. Doing this could be hugely helpful when you have existing user-defined functions you need to call, or you&rsquo;d like to use a computed property inside of a query, rather than pull back every item in your table and then filter it.</p>

<p>To summarize:</p>

<ul>
<li>Normally, unmapped properties are unavailable for querying inside of a QueryOver query, since NHibernate does not know how to translate the property into the correct SQL.</li>
<li>You can tell NHibernate what to do with a method or property using the static <code>ExpressionProcessor</code> class and a method that returns an <code>IProjection</code> given an expression containing the method call.</li>
<li>As long as you can represent the SQL you want to generate as some kind of <code>IProjection</code>, you can register any property or method with the <code>ExpressionProcessor</code>.</li>
<li>You can create extension methods or properties that are only available for use inside of a QueryOver query.</li>
<li>Methods can contain a provision for processing an arbitrary number of properties for inclusion in the SQL that&rsquo;s ultimately generated.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Named Queries and Unmapped Types]]></title>
    <link href="http://blog.andrewawhitaker.com/blog/2014/10/26/named-queries-and-unmapped-types/"/>
    <updated>2014-10-26T16:38:35-05:00</updated>
    <id>http://blog.andrewawhitaker.com/blog/2014/10/26/named-queries-and-unmapped-types</id>
    <content type="html"><![CDATA[<p><em>This post was inspired by <a href="http://stackoverflow.com/q/26512930/497356">this StackOverflow question</a></em>.</p>

<p>Named queries are extremely useful in a variety of situations when you&rsquo;re using NHibernate. If you want to use dialect-specific features that aren&rsquo;t supported in NHibernate, you&rsquo;re practically forced to go this route.</p>

<p>Another (possibly less common scenario) is this: you&rsquo;re working with a database and want to use a stored procedure. For some reason you cannot change the stored procedure.</p>

<!-- more -->


<p>On the surface, this doesn&rsquo;t sound problematic: Just map the stored procedure to a named query and execute it. What if the stored procedure returns a resultset whose column names are less than ideal?</p>

<p>To make this problem a bit more concrete, here&rsquo;s a simple stored procedure written against the AdventureWorks database that I&rsquo;ll work with for the rest of the post:</p>

<p>```sql
create procedure [Products_GetAll]
as begin</p>

<pre><code>select
    [Production].[Product].[ProductID] as [prod_id],
    [Production].[Product].[Name] as [prod_name],
    [Production].[Product].[Color] as [prod_col]
from
    [Production].[Product];
</code></pre>

<p>end
```</p>

<p>Our result type, <code>ProductDTO</code> has property names we&rsquo;d expect:</p>

<p>```csharp
public class ProductDTO
{</p>

<pre><code>public int Id { get; set; }

public string Name { get; set; }

public string Color { get; set; }
</code></pre>

<p>}
```</p>

<p>With these pieces in mind, lets go over some possible solutions to our problem. I&rsquo;m assuming here that you don&rsquo;t want to just rename the properties on <code>ProductDTO</code>. You could certainly do that&mdash;however you&rsquo;d end up with some ugly property names, which is what we&rsquo;re trying to avoid.</p>

<p>So basically the rules are:</p>

<ul>
<li>We can&rsquo;t change the stored procedure</li>
<li>We want sane names for the properties in <code>ProductDTO</code></li>
</ul>


<h2>Map <code>ProductDTO</code></h2>

<p>Named queries can have a <code>&lt;return&gt;</code> element with a <code>class</code> attribute. If we went this route, our <code>.hbm.xml</code> file containing the named query might look like this:</p>

<p>```xml
&lt;hibernate-mapping xmlns=&ldquo;urn:nhibernate-mapping-2.2&rdquo;>
  &lt;sql-query name=&ldquo;Products_GetAll&rdquo;></p>

<pre><code>&lt;return class="AdventureWorks.ProductDTO"&gt;
  &lt;return-property name="ProductId" column="prod_id" /&gt;
  &lt;return-property name="ProductName" column="prod_name" /&gt;
  &lt;return-property name="ProductColor" column="prod_color" /&gt;
&lt;/return&gt;
exec [Products_GetAll];
</code></pre>

<p>  &lt;/sql-query>
&lt;/hibernate-mapping>
```</p>

<p>This looks like it would work right? The problem is that if you go this route, <code>ProductDTO</code> must be mapped. If you try using this mapping with an unmapped class, NHibernate will throw an exception stating that it doesn&rsquo;t know what <code>ProductDTO</code> is.</p>

<p>This might actually make sense depending on your architecture, but if the stored procedure we&rsquo;re executing is purpose-built for a particular area of our application, it probably doesn&rsquo;t make sense to do that. I&rsquo;m thinking specifically of a domain-driven architecture where domain entities are mapped to tables in a database. If that&rsquo;s the architecture we&rsquo;re using then adding a <code>GetAllProducts</code> entity doesn&rsquo;t really make sense.</p>

<p>Furthermore, this stored procedure is simply a <em>query</em>. It doesn&rsquo;t really make sense to map something that&rsquo;s just used to query the same way we&rsquo;d map a table to a class that can be inserted/updated.</p>

<p>There&rsquo;s also the limitation that the poster of the StackOverflow question above had&mdash;his or her query returned a resultset that did not have a column/columns that could be used as an identifier. NHibernate requires that mapped classes have a column or combination of columns that can uniquely identify the row.</p>

<h2>Use LINQ to transform the result of executing the named query</h2>

<p>This solution involves using <code>&lt;return-scalar&gt;</code> in our named query. In other words, an <code>.hbm.xml</code> file that looks like this:</p>

<p>```xml
&lt;hibernate-mapping xmlns=&ldquo;urn:nhibernate-mapping-2.2&rdquo;>
  &lt;sql-query name=&ldquo;Products_GetAll&rdquo;></p>

<pre><code>&lt;return-scalar column="prod_id" type="integer"/&gt;
&lt;return-scalar column="prod_name" type="string"/&gt;
&lt;return-scalar column="prod_col" type="string"/&gt;

exec [Products_GetAll];
</code></pre>

<p>  &lt;/sql-query>
&lt;/hibernate-mapping>
```</p>

<p>And our C# to get the <code>Product</code>s list would look like this:</p>

<p>```csharp
var products = session.GetNamedQuery(&ldquo;Products_GetAll&rdquo;)</p>

<pre><code>.List&lt;object[]&gt;()
.Select(obj =&gt; new ProductDTO
{
    Id = (int)obj[0],
    Name = (string)obj[1],
    Color = (string)obj[2]
})
.ToList();
</code></pre>

<p>```</p>

<p>This will work fine. The problem is that it can become very unmanageable with more than 10 properties. NHibernate is supposed to get rid of code like this anyway. It feels like there should be a better solution.</p>

<h2>Use a Custom ResultTransformer</h2>

<p>The reason we can&rsquo;t use a built-in result transformer (i.e. one in the <code>NHibernate.Transform</code> namespace) is because the one that would be most useful, <code>AliasToBeanTransformer</code>, requires that we map aliases from the query to properties on the class we want to project into.</p>

<p>Unfortunately NHibernate doesn&rsquo;t allow us to do this mapping with a named query. We can, however, create a new result transformer that allows us to do that. We&rsquo;re using the same XML mapping for our named query as before:</p>

<p>```xml
&lt;hibernate-mapping xmlns=&ldquo;urn:nhibernate-mapping-2.2&rdquo;>
  &lt;sql-query name=&ldquo;Products_GetAll&rdquo;></p>

<pre><code>&lt;return-scalar column="prod_id" type="integer"/&gt;
&lt;return-scalar column="prod_name" type="string"/&gt;
&lt;return-scalar column="prod_col" type="string"/&gt;

exec [Products_GetAll];
</code></pre>

<p>  &lt;/sql-query>
&lt;/hibernate-mapping>
```</p>

<p>Here are the steps you would take to map <code>ProductDTO</code> to the results of the query.</p>

<p><strong>1. Create an attribute that allows us to map column names to properties:</strong>
```csharp
using System;</p>

<p>[AttributeUsage(AttributeTargets.Property | AttributeTargets.Field, AllowMultiple = false)]
public class NHibernateQueryColumnAttribute : Attribute
{</p>

<pre><code>public NHibernateQueryColumnAttribute(string columnName)
{
    this.ColumnName = columnName;
}

public string ColumnName { get; private set; }
</code></pre>

<p>}
```</p>

<p><strong>2. Apply the attribute to our result class:</strong>
```csharp
public class ProductDTO
{</p>

<pre><code>[NHibernateQueryColumn("prod_id")]
public int Id { get; set; }

[NHibernateQueryColumn("prod_name")]
public string Name { get; set; }

[NHibernateQueryColumn("prod_col")]
public string Color { get; set; }
</code></pre>

<p>}
```</p>

<p><strong>3. Create a result transformer that can leverage that attribute (based on <a href="https://github.com/nhibernate/nhibernate-core/blob/master/src/NHibernate/Transform/AliasToBeanResultTransformer.cs"><code>AliasToBeanResultTransformer</code></a>:</strong>
```csharp
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using NHibernate;
using NHibernate.Transform;</p>

<p>public class QueryColumnAttributeTransformer<TResultType> : AliasedTupleSubsetResultTransformer
{</p>

<pre><code>private readonly ConstructorInfo constructor;
private readonly Dictionary&lt;string, MemberInfo&gt; memberColumnMap;
private readonly Type resultType = typeof(TResultType);

public QueryColumnAttributeTransformer()
{
    this.constructor = this.resultType.GetConstructor(
        BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance,
        null,
        Type.EmptyTypes,
        null);

    if (this.constructor == null &amp;&amp; this.resultType.IsClass)
    {
        throw new ArgumentException(
            "The target class of a QueryColumnAttributeTransformer needs a parameterless constructor");
    }

    const BindingFlags flags = BindingFlags.Public | BindingFlags.Instance;

    this.memberColumnMap = new Dictionary&lt;string, MemberInfo&gt;();

    MemberInfo[] members =
        this.resultType.GetProperties(flags)
            .Cast&lt;MemberInfo&gt;()
            .Concat(this.resultType.GetFields(flags))
            .ToArray();

    foreach (MemberInfo member in members)
    {
        var attr = member.GetCustomAttribute&lt;NHibernateQueryColumnAttribute&gt;();

        this.memberColumnMap.Add(attr == null ? member.Name : attr.ColumnName, member);
    }
}

public override bool IsTransformedValueATupleElement(string[] aliases, int tupleLength)
{
    return false;
}

public override object TransformTuple(object[] tuple, string[] aliases)
{
    if (aliases == null)
    {
        throw new ArgumentNullException("aliases");
    }

    object result;

    try
    {
        result = this.resultType.IsClass
            ? this.constructor.Invoke(null)
            : NHibernate.Cfg.Environment.BytecodeProvider.ObjectsFactory.CreateInstance(this.resultType, true);

        for (int i = 0; i &lt; aliases.Length; i++)
        {
            string alias = aliases[i];

            MemberInfo member;

            if (this.memberColumnMap.TryGetValue(alias, out member))
            {
                if (member.MemberType == MemberTypes.Property)
                {
                    ((PropertyInfo)member).SetValue(result, tuple[i]);
                }
                else if (member.MemberType == MemberTypes.Field)
                {
                    ((FieldInfo)member).SetValue(result, tuple[i]);
                }
            }
            else
            {
                throw new ArgumentException(
                    string.Format(
                        "{0} has no field or property mapped to column '{1}'", this.resultType, alias));
            }
        }
    }
    catch (MemberAccessException e)
    {
        throw new HibernateException("Could not instantiate result class: " + this.resultType, e);
    }

    return result;
}

public override IList TransformList(IList collection)
{
    return collection;
}
</code></pre>

<p>}
```</p>

<p><strong>4. Use the result transformer in the query:</strong>
```csharp
var products = session.GetNamedQuery(&ldquo;Products_GetAll&rdquo;)</p>

<pre><code>.SetResultTransformer(new QueryColumnAttributeTransformer&lt;ProductDTO&gt;())
.List&lt;ProductDTO&gt;();
</code></pre>

<p>```</p>

<p>If you don&rsquo;t like the idea of modifying your result class to accommodate the query, you could make a few changes to the transformer that would allow it to use a <code>Dictionary</code> mapping that you pass in instead.</p>

<p>Hope that helps someone out there. And if there&rsquo;s an easier way to accomplish this, please let me know.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[QueryOver Series Part 8: Working with Subqueries]]></title>
    <link href="http://blog.andrewawhitaker.com/blog/2014/10/24/queryover-series-part-8-working-with-subqueries/"/>
    <updated>2014-10-24T11:17:39-05:00</updated>
    <id>http://blog.andrewawhitaker.com/blog/2014/10/24/queryover-series-part-8-working-with-subqueries</id>
    <content type="html"><![CDATA[<p>Subqueries are often extremely useful when building queries. Unfortunately there&rsquo;s not much out there on how to work with subqueries in QueryOver. In this post, I&rsquo;ll dive into how to create the subqueries using QueryOver&rsquo;s various subquery APIs.</p>

<!-- more -->


<p>There are two places you can use subqueries in a QueryOver query: the <code>SELECT</code> clause and the <code>WHERE</code> clause. Unfortunately you cannot use a subquery in the <code>FROM</code> clause of a QueryOver query.</p>

<h2>Subqueries in the <code>WHERE</code> clause</h2>

<p>As usual, there are several ways to generate identical SQL using QueryOver. I&rsquo;ll go over each one in detail.</p>

<h3><code>.WithSubquery</code></h3>

<p><code>.WithSubquery</code> is the most straightforward and natural way to create a subquery with QueryOver. Basically, using <code>.WithSubquery</code> allows you to use some property on <code>TSubType</code> (or a property belonging to an alias) with a subquery expression. After calling <code>.WithSubquery</code>, there are several methods that become available:</p>

<ul>
<li><code>.Where</code></li>
<li><code>.WhereAll</code></li>
<li><code>.WhereSome</code></li>
<li><code>.WhereExists</code></li>
<li><code>.WhereNotExists</code></li>
<li><code>.WhereProperty</code></li>
</ul>


<p>For the most part these are pretty straightforward, but I&rsquo;ll go over each one.</p>

<h4><code>.Where</code></h4>

<p>You should use <code>.WithSubquery.Where</code> when your subquery returns a scalar value and you want to compare that value (using <code>=</code>, <code>!=</code>, <code>&lt;</code>, <code>&gt;</code>, <code>&gt;=</code>, or <code>&lt;=</code>) with a value from your outer query.</p>

<p>For example, here&rsquo;s a query that finds the <code>Product</code> with the <code>Transaction</code> containing the highest quantity (one <code>Product</code> has many <code>Transactions</code>):</p>

<p><strong>QueryOver</strong>:
```csharp
var popularProduct = session.QueryOver<Product>()</p>

<pre><code>.WithSubquery.Where(pr =&gt; pr.Id ==
    QueryOver.Of&lt;TransactionHistory&gt;()
        .Select(tx =&gt; tx.Product.Id)
        .OrderBy(tx =&gt; tx.Quantity)
        .Desc
        .Take(1)
        .As&lt;int&gt;())
.SingleOrDefault&lt;Product&gt;();
</code></pre>

<p>```</p>

<p><strong>SQL</strong>:
```sql
SELECT</p>

<pre><code>*
</code></pre>

<p>FROM</p>

<pre><code>Production.Product this_
</code></pre>

<p>WHERE</p>

<pre><code>this_.ProductID = (
    SELECT
        TOP (1)  this_0_.ProductID as y0_
    FROM
        Production.TransactionHistory this_0_
    ORDER BY
        this_0_.Quantity desc
);
</code></pre>

<p>```</p>

<p>The interesting thing to note about the subquery is the <code>.As&lt;T&gt;</code> method at the end. This allows us to compare the <code>Id</code> property from the outer query with the inner query&rsquo;s <code>Product.Id</code> property. This method&rsquo;s sole purpose is to be used inside of a subquery like this so that we can treat the entire QueryOver query as a scalar value for comparison purposes.</p>

<h4><code>.WhereAll</code> and <code>.WhereSome</code></h4>

<p><code>.WithSubquery.WhereAll</code> and <code>.WithSubquery.WhereSome</code> generate SQL that looks similar to the SQL generated by <code>Where</code>, but it uses the <code>all</code> or <code>some</code> operator to modify the comparison. The subquery should return a resultset of one column. Each row in that result is compared with the scalar value from the outer query.</p>

<p>For example, here&rsquo;s a query that finds all <code>Product</code>s who&rsquo;s <code>ListPrice</code> is greater than <em>all</em> of the related <code>ProductCostHistory</code> entries' <code>StandardCost</code>. <code>ProductCostHistory</code> tracks product cost over time:</p>

<p><strong>QueryOver</strong>
```csharp
Product productAlias = null;
var products = session.QueryOver<Product>(() => productAlias)</p>

<pre><code>.WithSubquery.WhereAll(p =&gt; p.ListPrice &gt;
    QueryOver.Of&lt;ProductCostHistory&gt;()
        .Where(ch =&gt; ch.Product.Id == productAlias.Id)
        .Select(ch =&gt; ch.StandardCost)
        .As&lt;decimal&gt;())
.List&lt;Product&gt;();
</code></pre>

<p>```</p>

<p><strong>SQL</strong>
```sql
SELECT</p>

<pre><code>*
</code></pre>

<p>FROM</p>

<pre><code>Production.Product this_
</code></pre>

<p>WHERE</p>

<pre><code>this_.ListPrice &gt; all (
    SELECT
        this_0_.StandardCost as y0_
    FROM
        Production.ProductCostHistory this_0_
    WHERE
        this_0_.ProductID = this_.ProductID
)
</code></pre>

<p>```</p>

<p>If you look carefully at the QueryOver, you&rsquo;ll notice that I assigned an alias to the outer <code>Product</code>. This is so that I could correlate the outer query and the inner query.</p>

<p>Using <code>.WhereSome</code> instead would generate SQL using the <code>some</code> operator. This operator returns <code>true</code> if <em>at least one</em> of the values in the resultset from the subquery returns true.</p>

<h4><code>.WhereExists</code> and <code>.WhereNotExists</code></h4>

<p>These two are straightforward. These will generate the SQL you&rsquo;d expect with <code>exists</code> or <code>not exists</code>, respectively. If you&rsquo;re familiar with SQL, you&rsquo;ve probably used these a fair amount. Use <code>.WhereExists</code> to return rows where there&rsquo;s at least one result in the subquery, and use <code>.WhereNotExists</code> to return rows where the subquery returns no results.</p>

<p>Here&rsquo;s an example that returns all products with no transaction history:</p>

<p><strong>QueryOver</strong>
```csharp
Product productAlias = null;</p>

<p>var productsWithNoTransactions = session.QueryOver<Product>(() => productAlias)</p>

<pre><code>.WithSubquery.WhereNotExists(
    QueryOver.Of&lt;TransactionHistory&gt;()
        .Where(tx =&gt; tx.Product.Id == productAlias.Id)
        .Select(tx =&gt; tx.Id))
.List&lt;Product&gt;();
</code></pre>

<p>```</p>

<p><strong>SQL</strong>
```sql
SELECT</p>

<pre><code>*
</code></pre>

<p>FROM</p>

<pre><code>Production.Product this_
</code></pre>

<p>WHERE</p>

<pre><code>not exists (
    SELECT
        this_0_.TransactionID as y0_
    FROM
        Production.TransactionHistory this_0_
    WHERE
        this_0_.ProductID = this_.ProductID
)
</code></pre>

<p>```</p>

<p>Using <code>.WithSubquery</code> is the most straightforward way to work with subqueries in the <code>WHERE</code> clause of a query.</p>

<h3>With the <code>Restrictions</code> class</h3>

<p>You can use the <code>Restrictions</code> class to generate SQL within a QueryOver query as well. I won&rsquo;t show everything you can do with the <code>Restrictions</code> class&mdash; it should be pretty straightforward after showing a few examples.</p>

<p>Here&rsquo;s the first example from the previous section:</p>

<p>```csharp
session.QueryOver<Product>()</p>

<pre><code>.Where(
    Restrictions.EqProperty(
        Projections.Property&lt;Product&gt;(pr =&gt; pr.Id),
        Projections.SubQuery(
            QueryOver.Of&lt;TransactionHistory&gt;()
                .Select(tx =&gt; tx.Product.Id)
                .OrderBy(tx =&gt; tx.Quantity)
                .Desc
                .Take(1))))
.SingleOrDefault&lt;Product&gt;();
</code></pre>

<p>```</p>

<p>I&rsquo;m not sure about you, but to me this is much harder to read and looks much more complex than the example in the previous section.</p>

<p>Usually this syntax is not necessary, but you may find it useful if you&rsquo;re building queries dynamically.</p>

<p>One way to build a list of conditions joined by <code>AND</code> operators is to use <code>Restrictions.Conjunction()</code>. You can call <code>.Add</code> on the <code>Conjunction</code> instance you get back, building a conjunction based on various conditions.</p>

<p>Here&rsquo;s an example:</p>

<p>```csharp
Conjunction conjunction = Restrictions.Conjunction();</p>

<p>if (onlyBiggestTransaction)
{</p>

<pre><code>conjunction.Add(
    Restrictions.EqProperty(
        Projections.Property&lt;Product&gt;(pr =&gt; pr.Id),
        Projections.SubQuery(
            QueryOver.Of&lt;TransactionHistory&gt;()
                .Select(tx =&gt; tx.Product.Id)
                .OrderBy(tx =&gt; tx.Quantity)
                .Desc
                .Take(1))));
</code></pre>

<p>}</p>

<p>session.QueryOver<Product>()</p>

<pre><code>.Where(conjunction)
.List&lt;Product&gt;();
</code></pre>

<p>```</p>

<p>If you have lots of conditions you&rsquo;re evaluating to build a <code>WHERE</code> clause, I would consider going this route. It&rsquo;s easy to read the final query (starting on L16 above), and the various parts of the <code>Conjunction</code> are also nicely separated from the main query.</p>

<h2>Subqueries in the <code>SELECT</code> clause</h2>

<p>There are two ways to use subqueries in the <code>SELECT</code> clause: <code>SelectSubquery</code> and <code>Projections.Subquery</code>.</p>

<h3><code>SelectSubquery</code></h3>

<p>If you&rsquo;re using a select list (built using <code>QueryOver&lt;TRoot, TSubType&gt;.SelectList(...)</code>), the easiest way to create a subquery in the <code>SELECT</code> clause is to use <code>.SelectSubquery</code>. This works exactly how you&rsquo;d expect it to.</p>

<p>This example gets information about a <code>Product</code> and the highest <code>ProductReview.Rating</code> associated with that product:</p>

<p><strong>QueryOver</strong>
```csharp
session.QueryOver<Product>(() => productAlias)</p>

<pre><code>.SelectList(list =&gt; list
    .SelectSubQuery(
        QueryOver.Of&lt;ProductReview&gt;()
            .Where(pr =&gt; pr.Product.Id == productAlias.Id)
            .Select(pr =&gt; pr.Rating)
            .OrderBy(pr =&gt; pr.Rating).Desc
            .Take(1))
    .Select(pr =&gt; pr.Id)
    .Select(pr =&gt; pr.Name))
.List&lt;object[]&gt;();
</code></pre>

<p>```</p>

<p>Note that I&rsquo;m creating a correlated subquery by assigning <code>productAlias</code> in the outer query and then using it in the subquery.</p>

<p><strong>SQL</strong>
```sql
SELECT</p>

<pre><code>(SELECT
    TOP (1)  this_0_.Rating as y0_
FROM
    Production.ProductReview this_0_
WHERE
    this_0_.ProductID = this_.ProductID
ORDER BY
    this_0_.Rating desc) as y0_,
this_.ProductID as y1_,
this_.Name as y2_
</code></pre>

<p>FROM</p>

<pre><code>Production.Product this_;
</code></pre>

<p>```</p>

<h3><code>Projections.Subquery</code></h3>

<p><code>Projections.Subquery</code> can come in handy when building the <code>SELECT</code> clause dynamically. This is especially useful when you&rsquo;re building a <code>SELECT</code> clause using <code>Projections.ProjectionList</code>. Here&rsquo;s the same query from the <code>SelectSubquery</code> example above:</p>

<p>```csharp
session.QueryOver<Product>(() => productAlias)</p>

<pre><code>.Select(Projections.ProjectionList()
    .Add(Projections.SubQuery(
        QueryOver.Of&lt;ProductReview&gt;()
            .Where(pr =&gt; pr.Product.Id == productAlias.Id)
            .Select(pr =&gt; pr.Rating)
            .OrderBy(pr =&gt; pr.Rating)
            .Desc
            .Take(1)))
    .Add(Projections.Property(() =&gt; productAlias.Id))
    .Add(Projections.Property(() =&gt; productAlias.Name)))
.List&lt;object[]&gt;();
</code></pre>

<p>```</p>

<h2>Refactoring tip</h2>

<p>Working with subqueries in QueryOver can quickly become overwhelming, especially if you&rsquo;re building a complex query.</p>

<p>One great way to easily make things a bit more readable is to simply store subquery definitions in variables. Keeping with the same example:</p>

<p>```csharp
Product productAlias = null;</p>

<p>// Store the reviews subquery in a variable
QueryOver<ProductReview> reviewSubquery =</p>

<pre><code>QueryOver.Of&lt;ProductReview&gt;()
    .Where(pr =&gt; pr.Product.Id == productAlias.Id)
    .Select(pr =&gt; pr.Rating)
    .OrderBy(pr =&gt; pr.Rating)
    .Desc
    .Take(1);
</code></pre>

<p>// use that variable in the main query
session.QueryOver<Product>(() => productAlias)</p>

<pre><code>.Select(Projections.ProjectionList()
    .Add(Projections.SubQuery(reviewSubquery))
    .Add(Projections.Property(() =&gt; productAlias.Id))
    .Add(Projections.Property(() =&gt; productAlias.Name)))
.List&lt;object[]&gt;();
</code></pre>

<p>```</p>

<p>That&rsquo;s an easy improvement to make, especially when you&rsquo;re dealing with larger queries.</p>

<h2>Summary</h2>

<p>Working with subqueries can quickly become overwhelming with QueryOver. Hopefully this post will help you write and maintain more advanced QueryOver queries involving subqueries. To summarize:</p>

<ul>
<li>With QueryOver you can use subqueries in the <code>SELECT</code> clause or the <code>WHERE</code> clause. Unfortunately you cannot query from a derived table in the <code>FROM</code> clause</li>
<li>In the <code>WHERE</code> clause, you can use <code>.WithSubquery</code>, followed by a <code>.Where</code> variety to control how the results of the subquery are treated</li>
<li>You can also use the <code>Restrictions</code> class along with <code>Projections.Subquery</code></li>
<li>In the <code>SELECT</code> clause, you can use <code>.SelectSubQuery</code> with <code>.SelectList</code>.</li>
<li>You can also use <code>Projections.Subquery</code> to  generate a subquery in the <code>SELECT</code> clause.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting NHibernate Up and Running Quickly]]></title>
    <link href="http://blog.andrewawhitaker.com/blog/2014/08/28/getting-nhibernate-up-and-running-quickly/"/>
    <updated>2014-08-28T10:44:06-05:00</updated>
    <id>http://blog.andrewawhitaker.com/blog/2014/08/28/getting-nhibernate-up-and-running-quickly</id>
    <content type="html"><![CDATA[<p>NHibernate can seem like a daunting library to set up. The configuration can get quite complicated&mdash;XML mappings, code mappings, mapping conventions, dialects, logging, etc. Sometimes you just want to get something up and running to test out a query or play around with a database other than your primary one. In this post, I&rsquo;ll show you how to get up and running with NHibernate in about 5 minutes and in around 50 lines of code in <a href="http://www.linqpad.net">LINQPad</a>.</p>

<p>This assumes you already have a database configured and ready to create new tables and connect to with NHibernate.</p>

<!-- more -->


<h2>1. Create your database table</h2>

<p>I&rsquo;ll use MySQL as an example, but first you&rsquo;ll need to create a database table (or a few tables) that you want to play around with. I&rsquo;ll create a <code>person</code> table:</p>

<p><code>sql
CREATE TABLE `person` (
  `Id` int(11) NOT NULL AUTO_INCREMENT,
  `FirstName` varchar(200) NOT NULL,
  `BirthDate` date NOT NULL,
  `LastName` varchar(200) NOT NULL,
  PRIMARY KEY (`Id`)
)
</code></p>

<h2>2. Prepare your LINQPad Query</h2>

<p>After creating a new query in LINQPad, set the <strong>Language</strong> to <strong>C# Program</strong>, then press F4 to open the <strong>Query Properties</strong> window. From here you can browse to the &ldquo;NHibernate.dll&rdquo; file that you&rsquo;d like to use. I&rsquo;ll also add MySql.Data.dll since I need to interact with a MySql database:</p>

<p><img src="/images/posts/2014-08-28-getting-nhibernate-up-and-running-quickly-linqpad-query-properties/linqpad-query-properties.png"></p>

<p>Next, go over to the <strong>Additional Namespace Imports</strong> tab and add the following namespaces:</p>

<p><code>
NHibernate
NHibernate.Cfg
NHibernate.Cfg.MappingSchema
NHibernate.Dialect
NHibernate.Mapping.ByCode
NHibernate.Mapping.ByCode.Conformist
</code></p>

<p>Okay, that&rsquo;s all we should need to get started with actually writing the query.</p>

<h2>3. Add some configuration code</h2>

<p>Next we&rsquo;ll actually configure NHibernate to connect to the database correctly. Normally you would configure NHibernate via your project&rsquo;s *.config file, but since we&rsquo;re using LINQPad, a configuration file isn&rsquo;t really feasible. Luckily, we can configure NHibernate in C# using the <code>.DatabaseIntegration</code> extension method:</p>

<p>```csharp
void Main()
{</p>

<pre><code>Configuration cfg = new Configuration()
    .DataBaseIntegration(db =&gt;
    {
        db.ConnectionString = "Server=127.0.0.1;Database=test;Uid=nhibernate;Pwd=nhibernate;";
        db.Dialect&lt;MySQLDialect&gt;();
    });
</code></pre>

<p>}
```</p>

<p>Here I&rsquo;m just specifying the dialect I&rsquo;d like to use (<code>MySQLDialect</code>) and setting my connection string.</p>

<h2>4. Add an entity and mapping</h2>

<p>Since I created a <code>person</code> table earlier, I&rsquo;m going to go ahead and create a <code>Person</code> class and <code>PersonMap</code> to map that class using NHibernate&rsquo;s mapping-by-code. This code goes just under the <code>Main</code> method we filled in earlier. Here&rsquo;s the entity:</p>

<p>```csharp
public class Person
{</p>

<pre><code>public virtual int Id { get; set; }

public virtual string FirstName { get; set; }

public virtual string LastName { get; set; }

public virtual DateTime BirthDate { get; set; }
</code></pre>

<p>}
```</p>

<p>Here&rsquo;s the mapping:</p>

<p>```csharp
public class PersonMap : ClassMapping<Person>
{</p>

<pre><code>public PersonMap()
{
    this.Table("person");
    this.Id(p =&gt; p.Id);
    this.Property(p =&gt; p.FirstName);
    this.Property(p =&gt; p.LastName);        
    this.Property(p =&gt; p.BirthDate);
}
</code></pre>

<p>}
```</p>

<h2>5. Add code to process the mapping we added</h2>

<p>The last configuration step is to modify our <code>Main</code> method to incorporate our mappings into the configuration. We&rsquo;ll modify our <code>Main</code> method as follows:</p>

<p>```csharp
void Main()
{</p>

<pre><code>Configuration cfg = new Configuration()
    .DataBaseIntegration(db =&gt;
    {
        db.ConnectionString = "Server=127.0.0.1;Database=test;Uid=nhibernate;Pwd=nhibernate;";
        db.Dialect&lt;MySQLDialect&gt;();
    });

/* Add the mapping we defined: */
var mapper = new ModelMapper();
mapper.AddMappings(Assembly.GetExecutingAssembly().GetExportedTypes());

HbmMapping mapping = mapper.CompileMappingForAllExplicitlyAddedEntities();
cfg.AddMapping(mapping);
</code></pre>

<p>}
```</p>

<h2>6. Create an <code>ISessionFactory</code>, <code>ISession</code> and <code>ITransaction</code> and write a query</h2>

<p>Ok the last step is to build an <code>ISessionFactory</code> from our configuration. From there we can get an <code>ISession</code> and an <code>ITransaction</code> to actually work with the entities we&rsquo;ve created and mapped. We&rsquo;ll modify the <code>Main</code> method again as follows:</p>

<p>```csharp
void Main()
{</p>

<pre><code>Configuration cfg = new Configuration()
    .DataBaseIntegration(db =&gt;
    {
        db.ConnectionString = "Server=127.0.0.1;Database=test;Uid=nhibernate;Pwd=nhibernate;";
        db.Dialect&lt;MySQLDialect&gt;();
    });

/* Add the mapping we defined: */
var mapper = new ModelMapper();
mapper.AddMappings(Assembly.GetExecutingAssembly().GetExportedTypes());

HbmMapping mapping = mapper.CompileMappingForAllExplicitlyAddedEntities();

cfg.AddMapping(mapping);   

/* Create a session and execute a query: */
using (ISessionFactory factory = cfg.BuildSessionFactory())
using (ISession session = factory.OpenSession())
using (ITransaction tx = session.BeginTransaction())
{
    session.Get&lt;Person&gt;(1).Dump();

    tx.Commit();
}
</code></pre>

<p>}
```</p>

<p>&hellip;And that&rsquo;s really it. If you hit <strong>F5</strong> or the green play button in LINQPad, your query should run, assuming you have everything configured correctly. Here&rsquo;s the whole listing below, just in case:</p>

<p>```csharp
void Main()
{</p>

<pre><code>Configuration cfg = new Configuration()
    .DataBaseIntegration(db =&gt;
    {
        db.ConnectionString = "Server=127.0.0.1;Database=test;Uid=nhibernate;Pwd=nhibernate;";
        db.Dialect&lt;MySQLDialect&gt;();
    });

/* Add the mapping we defined: */
var mapper = new ModelMapper();
mapper.AddMappings(Assembly.GetExecutingAssembly().GetExportedTypes());

HbmMapping mapping = mapper.CompileMappingForAllExplicitlyAddedEntities();

cfg.AddMapping(mapping);

/* Create a session and execute a query: */
using (ISessionFactory factory = cfg.BuildSessionFactory())
using (ISession session = factory.OpenSession())
using (ITransaction tx = session.BeginTransaction())
{
    session.Get&lt;Person&gt;(1).Dump();

    tx.Commit();
}
</code></pre>

<p>}</p>

<p>public class PersonMap : ClassMapping<Person>
{</p>

<pre><code>public PersonMap()
{
    this.Table("person");
    this.Id(p =&gt; p.Id);
    this.Property(p =&gt; p.FirstName);
    this.Property(p =&gt; p.LastName);        
    this.Property(p =&gt; p.BirthDate);
}
</code></pre>

<p>}</p>

<p>public class Person
{</p>

<pre><code>public virtual int Id { get; set; }

public virtual string FirstName { get; set; }

public virtual string LastName { get; set; }

public virtual DateTime BirthDate { get; set; }
</code></pre>

<p>}
```</p>

<h2>Summary</h2>

<p>Hopefully this post will come in handy if you&rsquo;re looking to quickly get NHibernate up and running for some throwaway or experimental code. When you boil the setup down to the very basics it&rsquo;s actually not that bad at all. From here, you can make some configuration changes or enhancements. Two useful configuration options to turn on inside of the <code>.DatabaseIntegration</code> method are the <code>LogFormattedSql</code> property and the <code>LogSqlInConsole</code> property. These will allow you to actually see the SQL that NHibernate is generating.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[QueryOver Series - Part 7: Using SQL Functions]]></title>
    <link href="http://blog.andrewawhitaker.com/blog/2014/08/15/queryover-series-part-7-using-sql-functions/"/>
    <updated>2014-08-15T14:46:35-05:00</updated>
    <id>http://blog.andrewawhitaker.com/blog/2014/08/15/queryover-series-part-7-using-sql-functions</id>
    <content type="html"><![CDATA[<p>In this post, I&rsquo;ll go over how to use functions built into the database engine. This can be useful when you want to do some work inside of your SQL query rather than do post-processing on the result set you get back.</p>

<!-- more -->


<h2>Dialects in NHibernate</h2>

<p>To understand how to use and later build SQL functions, it&rsquo;s helpful to understand how the default SQL functions are registered with NHibernate to begin with.</p>

<p>NHibernate has the concept of a SQL <em>dialect</em>, a vendor-specific flavor of SQL. As you probably know, <a href="http://www.nhforge.org/doc/nh/en/#configuration-optional-dialects">many dialects are supported out of the box</a>. NHibernate represents dialects with a class per supported dialect.</p>

<p>The <code>Dialect</code> base class registers required functions for a dialect using ANSI-92 standards. If a dialect implements a function differently, that dialect must overwrite the base class' implementation with its own.</p>

<p>For example, SQL Server doesn&rsquo;t implement the ANSI-92 <code>TRIM</code> function, so the <code>MsSql2000</code> dialect class uses a different implementation than the base class (which ultimately calls <code>rtrim</code> and <code>ltrim</code> to simulate the ANSI standard).</p>

<p>It&rsquo;s worth looking over the <code>Dialect</code> base class and possibly the dialect class for the database engine you&rsquo;re using to see what functions are already available to you.</p>

<h2>Calling functions from your queries</h2>

<p>There are two ways to actually use SQL functions inside of your queries.</p>

<h3>Using <code>Projections.SqlFunction</code></h3>

<p>Using already registered SQL functions is fairly simple, using <code>Projections.SqlFunction</code>. For example, here&rsquo;s a query that gets every <code>Person</code>&rsquo;s middle name, or &ldquo;Not Applicable&rdquo; if <code>MiddleName</code> is <code>null</code>, using the <code>COALESCE</code> function:</p>

<p><strong>QueryOver</strong>:
```csharp
IList<string> middleNames = session.QueryOver<Person>()</p>

<pre><code>.Select(
    Projections.SqlFunction("coalesce", NHibernateUtil.String,
        Projections.Property&lt;Person&gt;(p =&gt; p.MiddleName),
        Projections.Constant("Not Applicable"))
)
.List&lt;string&gt;();
</code></pre>

<p>```</p>

<p><strong>SQL</strong>:
```sql
SELECT</p>

<pre><code>COALESCE (this_.MiddleName, 'Not Applicable') AS y0_ 
</code></pre>

<p>FROM</p>

<pre><code>Person.Person this_ 
</code></pre>

<p>```</p>

<p>This same pattern applies to all SQL functions that you&rsquo;d like to call using <code>Projections.SqlFunction</code>.</p>

<h3>Using <code>ProjectionsExtensions</code></h3>

<p>Inside of a QueryOver query, there&rsquo;s actually a better way to call many of the most common SQL functions. The <code>ProjectionsExtensions</code> class inside of the <code>NHibernate.Criterion</code> namespace contains extension methods that are parsed into SQL function calls.</p>

<p>For example, here&rsquo;s a query using the <code>.Upper</code> extension method. Note that these extension methods are actually on the object&rsquo;s properties:</p>

<p><strong>QueryOver</strong>:
```csharp
IList<string> middleNames = session.QueryOver<Person>()</p>

<pre><code>.Select(p =&gt; p.FirstName.Upper())
.List&lt;string&gt;();
</code></pre>

<p>```</p>

<p><strong>SQL</strong>:
```sql
SELECT</p>

<pre><code>UPPER (this_.FirstName) AS y0_ 
</code></pre>

<p>FROM</p>

<pre><code>Person.Person this_ 
</code></pre>

<p>```</p>

<p>This is much cleaner than the alternative using <code>Projections.SqlFunction</code>:</p>

<p>```csharp
IList<string> names = session.QueryOver<Person>()</p>

<pre><code>.Select(
    Projections.SqlFunction(
        "upper",
        NHibernateUtil.String,
        Projections.Property&lt;Person&gt;(p =&gt; p.FirstName)))
.List&lt;string&gt;();
</code></pre>

<p>```</p>

<h2>Using your own functions</h2>

<p>In most cases, functions you want to use will already be registered in the dialect you&rsquo;re using. In some cases, however, you&rsquo;ll want to add a function that&rsquo;s not been registered. In this section of the post, I&rsquo;ll go over how to add the <code>checksum</code> function in SQL Server. There are a few steps involved in using your own function, I&rsquo;ll go over each one in detail.</p>

<p>There are actually two ways to invoke a custom SQL function from your queries. You can either add the function &ldquo;statically&rdquo; to a custom dialect, or invoke a brand new function &ldquo;dynamically&rdquo; at runtime that&rsquo;s not registered with the dialect.</p>

<h3>Adding your own dialect</h3>

<p>As I discussed earlier, functions are registered in the dialect class representing the database flavor you&rsquo;re using. Since we can&rsquo;t modify those classes directly to register our function, we&rsquo;ll create a new dialect that&rsquo;s a subclass of the one we&rsquo;re using.</p>

<p>Since I&rsquo;m using SQL Server in this example, I&rsquo;ll create a custom dialect that&rsquo;s a subclass of <code>MsSql2012Dialect</code>.</p>

<p>```csharp
using NHibernate;
using NHibernate.Dialect;
using NHibernate.Dialect.Function;</p>

<p>public class AdventureWorksDialect : MsSql2012Dialect
{</p>

<pre><code>public AdventureWorksDialect()
{
    this.RegisterFunction("checksum", new StandardSQLFunction("checksum", NHibernateUtil.Int32));
}
</code></pre>

<p>}
```</p>

<p>Then, we need to make sure our application is using the new dialect. We can do this either in our configuration code:</p>

<p>```csharp
var cfg = new Configuration()</p>

<pre><code>.Configure()
.DataBaseIntegration(db =&gt;
{
    db.Dialect&lt;AdventureWorksDialect&gt;();
});
</code></pre>

<p>```</p>

<p>Or, in our config file:</p>

<p>```xml
&lt;hibernate-configuration xmlns=&ldquo;urn:nhibernate-configuration-2.2&rdquo;>
  &lt;session-factory></p>

<pre><code>&lt;property name="show_sql"&gt;false&lt;/property&gt;
&lt;property name="connection.driver_class"&gt;NHibernate.Driver.Sql2008ClientDriver&lt;/property&gt;
&lt;property name="dialect"&gt;AdventureWorks.Database.AdventureWorksDialect&lt;/property&gt;
&lt;property name="connection.connection_string_name"&gt;AdventureWorks&lt;/property&gt;
</code></pre>

<p>  &lt;/session-factory>
&lt;/hibernate-configuration>
```</p>

<h4>Calling the function using <code>Projections.SqlFunction</code></h4>

<p>If all you want to do is call a function using <code>Projections.SqlFunction</code>, you&rsquo;re basically done. All you need to do is call the function:</p>

<p>```csharp
IList<int> checksums = session.QueryOver<Product>()</p>

<pre><code>.Select(Projections.SqlFunction(
    "checksum",
    NHibernateUtil.Int32,
    Projections.Property&lt;Product&gt;(p =&gt; p.Id),
    Projections.Property&lt;Product&gt;(p =&gt; p.Name)))
.List&lt;int&gt;();
</code></pre>

<p>```</p>

<p>This will yield the following SQL:</p>

<p>```sql
SELECT</p>

<pre><code>CHECKSUM (this_.ProductID, this_.Name) AS y0_ 
</code></pre>

<p>FROM</p>

<pre><code>Production.Product this_ 
</code></pre>

<p>```</p>

<h4>Creating a custom projections class</h4>

<p>Using <code>Projections.SqlFunction</code> isn&rsquo;t quite satisfactory, especially after seeing the built-in <code>ProjectionExtensions</code>. We can easily create a <code>CustomProjections</code> class that provides some syntactic sugar for calling our custom function:</p>

<p>```csharp
public static class CustomProjections
{</p>

<pre><code>public static IProjection Checksum(params Expression&lt;Func&lt;object&gt;&gt;[] properties)
{
    return Checksum(properties.Select(Projections.Property).ToArray());
}

public static IProjection Checksum(params IProjection[] projections)
{
    return Projections.SqlFunction("checksum", NHibernateUtil.Int32, projections);
}
</code></pre>

<p>}
```</p>

<p>Notice that we have two overloads of <code>Checksum</code>, one that takes an array of <code>Expression&lt;Func&lt;object&gt;&gt;</code>s and another that takes an array of <code>IProjection</code>s.</p>

<p>Using the <code>Expression&lt;Func&lt;object&gt;&gt;[]</code> overload is convenient when we don&rsquo;t need to combine the use of <code>checksum</code> with other functions, for example:</p>

<p>```csharp
IList<int> checksums = session.QueryOver<Product>(() => productAlias)</p>

<pre><code>.Select(CustomProjections.Checksum(
    () =&gt; productAlias.Name,
    () =&gt; productAlias.Id))
.List&lt;int&gt;();
</code></pre>

<p>```</p>

<p>Using the <code>IProjection[]</code> overload is useful when we need to supply <code>checksum</code> with the result of calling <em>another</em> function, say <code>avg</code>:</p>

<p><code>``csharp
// Get the</code>checksum` of the average price for each sell start date.
IList&lt;object[]> checksums = session.QueryOver<Product>(() => productAlias)</p>

<pre><code>.SelectList(list =&gt; list
    .SelectGroup(p =&gt; p.SellStartDate)
    .Select(
        CustomProjections.Checksum(
            Projections.Avg(
                Projections.Property(() =&gt; productAlias.ListPrice)))
    ))
.List&lt;object[]&gt;();
</code></pre>

<p>```</p>

<h4><code>StandardSQLFunction</code> and <code>SQLFunctionTemplate</code></h4>

<p>If you look through <a href="https://github.com/nhibernate/nhibernate-core/tree/master/src/NHibernate/Dialect/Function">NHibernate&rsquo;s implementations of various SQL functions</a>, you might notice that many use <code>StandardSQLFunction</code> and <code>SQLFunctionTemplate</code>. These should take care of most of your custom function needs. If not, you can always implement <code>ISQLFunction</code> and create your own implementation.</p>

<h5><code>StandardSQLFunction</code></h5>

<p>We used <code>StandardSQLFunction</code> to implement our <code>checksum</code> example. Basically, <code>StandardSQLFunction</code> allows you to implement a SQL function that takes an arbitrary number of arguments and returns a scalar value.</p>

<h5><code>SQLFunctionTemplate</code></h5>

<p><code>SQLFunctionTemplate</code> is a bit more sophisticated, and you can use it to implement SQL functions with a <em>template</em>, like the name implies. This is typically useful when you want to require a function to have a specific number of arguments.</p>

<p>An example of this would be the <code>stuff</code> <a href="http://msdn.microsoft.com/en-us/library/ms188043.aspx">function in SQL Server</a>. This function inserts one string into another string, deleting the specified number of characters from the first string at a start index, then inserts the second string.</p>

<p>For example, here&rsquo;s how you could use <code>stuff</code> to replace &ldquo;C++&rdquo; with &ldquo;C#&rdquo;:</p>

<p><code>csharp
select stuff('C++', 2, 2, '#')
</code></p>

<p>Since <code>stuff</code> has a fixed number of parameters, it&rsquo;s a good candidate for <code>SQLFunctionTemplate</code>. All we have to do to register it in our dialect is add the following line:</p>

<p><code>csharp
this.RegisterFunction("stuff", new SQLFunctionTemplate(NHibernateUtil.Int32, "stuff(?1, ?2, ?3, ?4)"));
</code></p>

<p>Here, we&rsquo;re basically just saying that <code>stuff</code> is a function whose syntax is invoking the <code>stuff</code> function with exactly four parameters.</p>

<p>We&rsquo;ll add a few more static methods to our <code>CustomProjections</code> class, since there are several ways we might want to call this function, we&rsquo;ll provide several overloads:</p>

<p>```csharp
// Usage: CustomProjections.Stuff(() => alias.Property, 1, 2, () => alias.OtherProperty)
public static IProjection Stuff(Expression&lt;Func<object>> characterExpression, int start, int length, Expression&lt;Func<object>> replaceWithExpression)
{</p>

<pre><code>return Stuff(Projections.Property(characterExpression), start, length, Projections.Property(replaceWithExpression));
</code></pre>

<p>}</p>

<p>// Usage: CustomProjections.Stuff(Projections.Property(..), 1, 2, Projections.Constant(&hellip;))
public static IProjection Stuff(IProjection characterExpression, int start, int length, IProjection replaceWithExpression)
{</p>

<pre><code>return Projections.SqlFunction("stuff", NHibernateUtil.String, characterExpression, Projections.Constant(start), Projections.Constant(length), replaceWithExpression);
</code></pre>

<p>}</p>

<p>// Usage: CustomProjections.Stuff(() => alias.Property, 1, 2, &ldquo;Replacement&rdquo;)
public static IProjection Stuff(Expression&lt;Func<object>> characterExpression, int start, int length, string replaceWithExpression)
{</p>

<pre><code>return Stuff(Projections.Property(characterExpression), start, length, Projections.Constant(replaceWithExpression));
</code></pre>

<p>}
```</p>

<p>Here&rsquo;s an example of how it would be used:</p>

<p>```csharp
IList<string> stuffResults = session.QueryOver<Product>(() => productAlias)</p>

<pre><code>.SelectList(list =&gt; list
    .Select(
        CustomProjections.Stuff(() =&gt; productAlias.Name, 0, 2, "PR")
    ))
.List&lt;string&gt;();
</code></pre>

<p>```</p>

<h3>Invoking new functions at runtime</h3>

<p>If, for some reason, you don&rsquo;t want to create a custom dialect and register functions there, you can still invoke an unregistered SQL function. There&rsquo;s an overload of <code>Projections.SqlFunction</code> that takes an <code>ISQLFunction</code> that you can define at runtime. For example, if we had not registered our <code>checksum</code> function, you could call it dynamically like this:</p>

<p>```csharp
Projections.SqlFunction(</p>

<pre><code>new StandardSQLFunction("checksum"),
NHibernateUtil.Int32,
Projections.Property(() =&gt; productAlias.Name),
Projections.Property(() =&gt; productAlias.Id)
</code></pre>

<p>```</p>

<p>Here, we&rsquo;re defining and using the <code>checksum</code> function in one shot.</p>

<p>There <em>is</em> a disadvantage to using this method. When you register a function with the dialect instead, NHibernate adds the function to an internal cache and reuses the function definition whenever you access it by name.</p>

<p>Creating a new <code>checksum</code> function every time we needed to call the SQL Server <code>checksum</code> function would be wasteful&mdash;it would be better to define the function once and have NHibernate cache and reuse it.</p>

<p>However, we may want to leverage invoking a function dynamically to take care of special SQL functions, like SQL Server&rsquo;s <code>datediff</code> function.</p>

<h4>Implementing SQL Server&rsquo;s <code>datediff</code> function.</h4>

<p>SQL Server has a <a href="http://msdn.microsoft.com/en-us/library/ms189794%28SQL.90%29.aspx">function</a> called <code>datediff</code> that returns the number of &ldquo;date parts&rdquo; between a given start and end date.</p>

<p>At first glance, it seems like we could register <code>datediff</code> using <code>SQLFunctionTemplate</code>:</p>

<p><code>csharp
new SQLFunctionTemplate("datediff(?1, ?2, ?3)")
</code></p>

<p>The problem here is that <code>datediff</code>&rsquo;s first parameter is a SQL server keyword and <em>cannot</em> be supplied as a variable. According to MSDN:</p>

<blockquote><p>These dateparts and abbreviations cannot be supplied as a user-declared variable.</p></blockquote>

<p>So that means we can&rsquo;t call <code>datediff</code> and supply the <code>datepart</code> dynamically. We could register a function for every possible version of <code>datediff</code> and name them all slightly differently:</p>

<p><code>csharp
RegisterFunction("datediff-yr", new SQLFunctionTemplate("datediff(yy, ?1, ?2)"));
RegisterFunction("datediff-dd", new SQLFunctionTemplate("datediff(dd, ?1, ?2)"));
/* etc, for each valid datepart */
</code></p>

<p>I&rsquo;m not sure about you but this makes me cringe. Luckily there&rsquo;s a better solution. We can use NHibernate&rsquo;s ability to run an arbitrary, unregistered SQL function to dynamically create and execute the various versions of <code>datediff</code>. Here&rsquo;s the code:</p>

<p>```csharp
public static class DateProjections
{</p>

<pre><code>private const string DateDiffFormat = "datediff({0}, ?1, ?2)";

public static IProjection DateDiff(
    string datepart, 
    Expression&lt;Func&lt;object&gt;&gt; startDate, 
    Expression&lt;Func&lt;object&gt;&gt; endDate)
{
    // Build the function template based on the date part.
    string functionTemplate = string.Format(DateDiffFormat, datepart);

    return Projections.SqlFunction(
        new SQLFunctionTemplate(NHibernateUtil.Int32, functionTemplate),
        NHibernateUtil.Int32,
        Projections.Property(startDate),
        Projections.Property(endDate));
}
</code></pre>

<p>}
```</p>

<p>Now, we&rsquo;re able to write queries using any date part we want without having to register a separate function for each date part. For example, here&rsquo;s a query that gets the <code>datediff</code> in days, quarters, and months:</p>

<p>```csharp
IList&lt;object[]> checksums = session.QueryOver<Product>(() => productAlias)</p>

<pre><code>.SelectList(list =&gt; list
    .Select(DateProjections.DateDiff("dd", () =&gt; productAlias.SellStartDate, () =&gt; productAlias.SellEndDate))
    .Select(DateProjections.DateDiff("qq", () =&gt; productAlias.SellStartDate, () =&gt; productAlias.SellEndDate))
    .Select(DateProjections.DateDiff("mm", () =&gt; productAlias.SellStartDate, () =&gt; productAlias.SellEndDate)))
.List&lt;object[]&gt;();
</code></pre>

<p>```</p>

<p>This still isn&rsquo;t perfect. You might have realized that we&rsquo;re still at a disadvantage since we&rsquo;re not using cached versions of our function definitions. One good solution to this is to use our own cache for the various <code>datediff</code> flavors. Here&rsquo;s what our class looks like with that modification:</p>

<p>```csharp
public static class DateProjections
{</p>

<pre><code>private const string DateDiffFormat = "datediff({0}, ?1, ?2)";

// Maps datepart to an ISQLFunction
private static Dictionary&lt;string, ISQLFunction&gt; DateDiffFunctionCache = 
    new Dictionary&lt;string, ISQLFunction&gt;();

public static IProjection DateDiff(
    string datepart, 
    Expression&lt;Func&lt;object&gt;&gt; startDate, 
    Expression&lt;Func&lt;object&gt;&gt; endDate)
{
    ISQLFunction sqlFunction = GetDateDiffFunction(datepart);

    return Projections.SqlFunction(
        sqlFunction,
        NHibernateUtil.Int32,
        Projections.Property(startDate),
        Projections.Property(endDate));
}

private static ISQLFunction GetDateDiffFunction(string datepart)
{
    ISQLFunction sqlFunction;

    if (!DateDiffFunctionCache.TryGetValue(datepart, out sqlFunction))
    {
        string functionTemplate = string.Format(DateDiffFormat, datepart);
        sqlFunction = new SQLFunctionTemplate(NHibernateUtil.Int32, functionTemplate);

        DateDiffFunctionCache[datepart] = sqlFunction;
    }

    return sqlFunction;
}
</code></pre>

<p>}
```</p>

<p>Now we&rsquo;re caching our function definitions so that we&rsquo;re not redefining versions of <code>datediff</code> unnecessarily.</p>

<p>Another enhancement that probably should be made is to make the <code>datepart</code> argument of <code>DateProjections.DateDiff</code> strongly typed. A good solution there would be to use an <code>enum</code> defining the possible <code>datepart</code> values. Then you could use a <code>Dictionary&lt;DatePart, string&gt;</code> to map from <code>enum</code> values to strings.</p>

<h2>Summary</h2>

<p>Calling built-in SQL functions from NHibernate queries has been written about many times before, but hopefully I was able to shed some light on how those functions are registered and invoked. In summary:</p>

<ul>
<li>You can either register a function by using a custom dialect and invoke it by name later, or define and invoke the function in one step.</li>
<li>Registering a function with a custom dialect is often the best option since the function definition is cached and reused automatically by NHibernate.</li>
<li><code>StandardSQLFunction</code> and <code>SQLFunctionTemplate</code> are implementations of <code>ISQLFunction</code> that enable easily defining SQL functions.</li>
<li>Using a custom projections class is a useful abstraction to lay on top of <code>Projections.SqlFunction</code> to make code easier to read and more robust.</li>
<li>You can use NHibernate&rsquo;s ability to call SQL functions at runtime to implement the <code>datediff</code> function in a clean way.</li>
</ul>

]]></content>
  </entry>
  
</feed>
